// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContralProtocol.proto

#include "ContralProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ContralProtocol {
class ContralServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContralServerInfo>
      _instance;
} _ContralServerInfo_default_instance_;
class ContralRegisterServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContralRegisterService>
      _instance;
} _ContralRegisterService_default_instance_;
class ContralServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContralService>
      _instance;
} _ContralService_default_instance_;
class ContralServiceAnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContralServiceAnswer>
      _instance;
} _ContralServiceAnswer_default_instance_;
}  // namespace ContralProtocol
namespace protobuf_ContralProtocol_2eproto {
static void InitDefaultsContralServerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ContralProtocol::_ContralServerInfo_default_instance_;
    new (ptr) ::ContralProtocol::ContralServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContralProtocol::ContralServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContralServerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContralServerInfo}, {}};

static void InitDefaultsContralRegisterService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ContralProtocol::_ContralRegisterService_default_instance_;
    new (ptr) ::ContralProtocol::ContralRegisterService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContralProtocol::ContralRegisterService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContralRegisterService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContralRegisterService}, {}};

static void InitDefaultsContralService() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ContralProtocol::_ContralService_default_instance_;
    new (ptr) ::ContralProtocol::ContralService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContralProtocol::ContralService::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContralService =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContralService}, {}};

static void InitDefaultsContralServiceAnswer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ContralProtocol::_ContralServiceAnswer_default_instance_;
    new (ptr) ::ContralProtocol::ContralServiceAnswer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContralProtocol::ContralServiceAnswer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContralServiceAnswer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContralServiceAnswer}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ContralServerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContralRegisterService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContralService.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContralServiceAnswer.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServerInfo, clienttotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServerInfo, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServerInfo, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServerInfo, clientstart_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, serviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, maxlink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralRegisterService, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralService, servicecrc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, servicestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, serviceip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, serviceport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContralProtocol::ContralServiceAnswer, password_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ContralProtocol::ContralServerInfo)},
  { 9, -1, sizeof(::ContralProtocol::ContralRegisterService)},
  { 19, -1, sizeof(::ContralProtocol::ContralService)},
  { 25, -1, sizeof(::ContralProtocol::ContralServiceAnswer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ContralProtocol::_ContralServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ContralProtocol::_ContralRegisterService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ContralProtocol::_ContralService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ContralProtocol::_ContralServiceAnswer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ContralProtocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025ContralProtocol.proto\022\017ContralProtocol"
      "\"a\n\021ContralServerInfo\022\023\n\013ClientTotal\030\001 \001"
      "(\005\022\020\n\010ServerID\030\002 \001(\005\022\020\n\010ClientID\030\003 \001(\t\022\023"
      "\n\013ClientStart\030\004 \001(\005\"n\n\026ContralRegisterSe"
      "rvice\022\021\n\tServiceID\030\001 \001(\005\022\014\n\004Type\030\002 \001(\005\022\017"
      "\n\007MaxLink\030\003 \001(\005\022\020\n\010UserName\030\004 \001(\t\022\020\n\010Pas"
      "sWord\030\005 \001(\t\"$\n\016ContralService\022\022\n\nService"
      "CRC\030\001 \001(\t\"x\n\024ContralServiceAnswer\022\024\n\014Ser"
      "viceState\030\001 \001(\005\022\021\n\tServiceIP\030\002 \001(\t\022\023\n\013Se"
      "rvicePort\030\003 \001(\005\022\020\n\010UserName\030\004 \001(\t\022\020\n\010Pas"
      "sWord\030\005 \001(\t*\254\001\n\tCenterCMD\022\017\n\013CMD_UNKNOWN"
      "\020\000\022\030\n\024CMD_REGISTER_SERVICE\020\002\022\037\n\033CMD_REGI"
      "STER_SERVICE_ANSWER\020\003\022\032\n\026CMD_SERVICE_STA"
      "TISTICS\020\004\022\027\n\023CMD_SERVICE_SERVICE\020\005\022\036\n\032CM"
      "D_SERVICE_SERVICE_ANSWER\020\006B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContralProtocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ContralProtocol_2eproto
namespace ContralProtocol {
const ::google::protobuf::EnumDescriptor* CenterCMD_descriptor() {
  protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ContralProtocol_2eproto::file_level_enum_descriptors[0];
}
bool CenterCMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ContralServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContralServerInfo::kClientTotalFieldNumber;
const int ContralServerInfo::kServerIDFieldNumber;
const int ContralServerInfo::kClientIDFieldNumber;
const int ContralServerInfo::kClientStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContralServerInfo::ContralServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ContralProtocol_2eproto::scc_info_ContralServerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContralProtocol.ContralServerInfo)
}
ContralServerInfo::ContralServerInfo(const ContralServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientid().size() > 0) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  ::memcpy(&clienttotal_, &from.clienttotal_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientstart_) -
    reinterpret_cast<char*>(&clienttotal_)) + sizeof(clientstart_));
  // @@protoc_insertion_point(copy_constructor:ContralProtocol.ContralServerInfo)
}

void ContralServerInfo::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clienttotal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientstart_) -
      reinterpret_cast<char*>(&clienttotal_)) + sizeof(clientstart_));
}

ContralServerInfo::~ContralServerInfo() {
  // @@protoc_insertion_point(destructor:ContralProtocol.ContralServerInfo)
  SharedDtor();
}

void ContralServerInfo::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContralServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContralServerInfo::descriptor() {
  ::protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContralServerInfo& ContralServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ContralProtocol_2eproto::scc_info_ContralServerInfo.base);
  return *internal_default_instance();
}


void ContralServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ContralProtocol.ContralServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clienttotal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clientstart_) -
      reinterpret_cast<char*>(&clienttotal_)) + sizeof(clientstart_));
  _internal_metadata_.Clear();
}

bool ContralServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContralProtocol.ContralServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ClientTotal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ServerID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ClientID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralServerInfo.ClientID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ClientStart = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContralProtocol.ContralServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContralProtocol.ContralServerInfo)
  return false;
#undef DO_
}

void ContralServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContralProtocol.ContralServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ClientTotal = 1;
  if (this->clienttotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clienttotal(), output);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // string ClientID = 3;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServerInfo.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->clientid(), output);
  }

  // int32 ClientStart = 4;
  if (this->clientstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientstart(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ContralProtocol.ContralServerInfo)
}

::google::protobuf::uint8* ContralServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContralProtocol.ContralServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ClientTotal = 1;
  if (this->clienttotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clienttotal(), target);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // string ClientID = 3;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServerInfo.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientid(), target);
  }

  // int32 ClientStart = 4;
  if (this->clientstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientstart(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContralProtocol.ContralServerInfo)
  return target;
}

size_t ContralServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContralProtocol.ContralServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ClientID = 3;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // int32 ClientTotal = 1;
  if (this->clienttotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clienttotal());
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  // int32 ClientStart = 4;
  if (this->clientstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientstart());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContralServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContralProtocol.ContralServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ContralServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContralServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContralProtocol.ContralServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContralProtocol.ContralServerInfo)
    MergeFrom(*source);
  }
}

void ContralServerInfo::MergeFrom(const ContralServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContralProtocol.ContralServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.clienttotal() != 0) {
    set_clienttotal(from.clienttotal());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.clientstart() != 0) {
    set_clientstart(from.clientstart());
  }
}

void ContralServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContralProtocol.ContralServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContralServerInfo::CopyFrom(const ContralServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContralProtocol.ContralServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContralServerInfo::IsInitialized() const {
  return true;
}

void ContralServerInfo::Swap(ContralServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContralServerInfo::InternalSwap(ContralServerInfo* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clienttotal_, other->clienttotal_);
  swap(serverid_, other->serverid_);
  swap(clientstart_, other->clientstart_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContralServerInfo::GetMetadata() const {
  protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContralRegisterService::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContralRegisterService::kServiceIDFieldNumber;
const int ContralRegisterService::kTypeFieldNumber;
const int ContralRegisterService::kMaxLinkFieldNumber;
const int ContralRegisterService::kUserNameFieldNumber;
const int ContralRegisterService::kPassWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContralRegisterService::ContralRegisterService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ContralProtocol_2eproto::scc_info_ContralRegisterService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContralProtocol.ContralRegisterService)
}
ContralRegisterService::ContralRegisterService(const ContralRegisterService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlink_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(maxlink_));
  // @@protoc_insertion_point(copy_constructor:ContralProtocol.ContralRegisterService)
}

void ContralRegisterService::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlink_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(maxlink_));
}

ContralRegisterService::~ContralRegisterService() {
  // @@protoc_insertion_point(destructor:ContralProtocol.ContralRegisterService)
  SharedDtor();
}

void ContralRegisterService::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContralRegisterService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContralRegisterService::descriptor() {
  ::protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContralRegisterService& ContralRegisterService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ContralProtocol_2eproto::scc_info_ContralRegisterService.base);
  return *internal_default_instance();
}


void ContralRegisterService::Clear() {
// @@protoc_insertion_point(message_clear_start:ContralProtocol.ContralRegisterService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlink_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(maxlink_));
  _internal_metadata_.Clear();
}

bool ContralRegisterService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContralProtocol.ContralRegisterService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ServiceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MaxLink = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralRegisterService.UserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PassWord = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralRegisterService.PassWord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContralProtocol.ContralRegisterService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContralProtocol.ContralRegisterService)
  return false;
#undef DO_
}

void ContralRegisterService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContralProtocol.ContralRegisterService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServiceID = 1;
  if (this->serviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serviceid(), output);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 MaxLink = 3;
  if (this->maxlink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxlink(), output);
  }

  // string UserName = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralRegisterService.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralRegisterService.PassWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ContralProtocol.ContralRegisterService)
}

::google::protobuf::uint8* ContralRegisterService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContralProtocol.ContralRegisterService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServiceID = 1;
  if (this->serviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serviceid(), target);
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 MaxLink = 3;
  if (this->maxlink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxlink(), target);
  }

  // string UserName = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralRegisterService.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralRegisterService.PassWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContralProtocol.ContralRegisterService)
  return target;
}

size_t ContralRegisterService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContralProtocol.ContralRegisterService)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string UserName = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 ServiceID = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serviceid());
  }

  // int32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 MaxLink = 3;
  if (this->maxlink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxlink());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContralRegisterService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContralProtocol.ContralRegisterService)
  GOOGLE_DCHECK_NE(&from, this);
  const ContralRegisterService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContralRegisterService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContralProtocol.ContralRegisterService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContralProtocol.ContralRegisterService)
    MergeFrom(*source);
  }
}

void ContralRegisterService::MergeFrom(const ContralRegisterService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContralProtocol.ContralRegisterService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.serviceid() != 0) {
    set_serviceid(from.serviceid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.maxlink() != 0) {
    set_maxlink(from.maxlink());
  }
}

void ContralRegisterService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContralProtocol.ContralRegisterService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContralRegisterService::CopyFrom(const ContralRegisterService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContralProtocol.ContralRegisterService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContralRegisterService::IsInitialized() const {
  return true;
}

void ContralRegisterService::Swap(ContralRegisterService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContralRegisterService::InternalSwap(ContralRegisterService* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(type_, other->type_);
  swap(maxlink_, other->maxlink_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContralRegisterService::GetMetadata() const {
  protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContralService::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContralService::kServiceCRCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContralService::ContralService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ContralProtocol_2eproto::scc_info_ContralService.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContralProtocol.ContralService)
}
ContralService::ContralService(const ContralService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servicecrc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servicecrc().size() > 0) {
    servicecrc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicecrc_);
  }
  // @@protoc_insertion_point(copy_constructor:ContralProtocol.ContralService)
}

void ContralService::SharedCtor() {
  servicecrc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContralService::~ContralService() {
  // @@protoc_insertion_point(destructor:ContralProtocol.ContralService)
  SharedDtor();
}

void ContralService::SharedDtor() {
  servicecrc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContralService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContralService::descriptor() {
  ::protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContralService& ContralService::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ContralProtocol_2eproto::scc_info_ContralService.base);
  return *internal_default_instance();
}


void ContralService::Clear() {
// @@protoc_insertion_point(message_clear_start:ContralProtocol.ContralService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicecrc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ContralService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContralProtocol.ContralService)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ServiceCRC = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicecrc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servicecrc().data(), static_cast<int>(this->servicecrc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralService.ServiceCRC"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContralProtocol.ContralService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContralProtocol.ContralService)
  return false;
#undef DO_
}

void ContralService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContralProtocol.ContralService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceCRC = 1;
  if (this->servicecrc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicecrc().data(), static_cast<int>(this->servicecrc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralService.ServiceCRC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servicecrc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ContralProtocol.ContralService)
}

::google::protobuf::uint8* ContralService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContralProtocol.ContralService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceCRC = 1;
  if (this->servicecrc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servicecrc().data(), static_cast<int>(this->servicecrc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralService.ServiceCRC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servicecrc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContralProtocol.ContralService)
  return target;
}

size_t ContralService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContralProtocol.ContralService)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServiceCRC = 1;
  if (this->servicecrc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicecrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContralService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContralProtocol.ContralService)
  GOOGLE_DCHECK_NE(&from, this);
  const ContralService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContralService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContralProtocol.ContralService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContralProtocol.ContralService)
    MergeFrom(*source);
  }
}

void ContralService::MergeFrom(const ContralService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContralProtocol.ContralService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicecrc().size() > 0) {

    servicecrc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicecrc_);
  }
}

void ContralService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContralProtocol.ContralService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContralService::CopyFrom(const ContralService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContralProtocol.ContralService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContralService::IsInitialized() const {
  return true;
}

void ContralService::Swap(ContralService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContralService::InternalSwap(ContralService* other) {
  using std::swap;
  servicecrc_.Swap(&other->servicecrc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContralService::GetMetadata() const {
  protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContralServiceAnswer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContralServiceAnswer::kServiceStateFieldNumber;
const int ContralServiceAnswer::kServiceIPFieldNumber;
const int ContralServiceAnswer::kServicePortFieldNumber;
const int ContralServiceAnswer::kUserNameFieldNumber;
const int ContralServiceAnswer::kPassWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContralServiceAnswer::ContralServiceAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ContralProtocol_2eproto::scc_info_ContralServiceAnswer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContralProtocol.ContralServiceAnswer)
}
ContralServiceAnswer::ContralServiceAnswer(const ContralServiceAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serviceip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serviceip().size() > 0) {
    serviceip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceip_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&servicestate_, &from.servicestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&serviceport_) -
    reinterpret_cast<char*>(&servicestate_)) + sizeof(serviceport_));
  // @@protoc_insertion_point(copy_constructor:ContralProtocol.ContralServiceAnswer)
}

void ContralServiceAnswer::SharedCtor() {
  serviceip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&servicestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceport_) -
      reinterpret_cast<char*>(&servicestate_)) + sizeof(serviceport_));
}

ContralServiceAnswer::~ContralServiceAnswer() {
  // @@protoc_insertion_point(destructor:ContralProtocol.ContralServiceAnswer)
  SharedDtor();
}

void ContralServiceAnswer::SharedDtor() {
  serviceip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContralServiceAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContralServiceAnswer::descriptor() {
  ::protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContralServiceAnswer& ContralServiceAnswer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ContralProtocol_2eproto::scc_info_ContralServiceAnswer.base);
  return *internal_default_instance();
}


void ContralServiceAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:ContralProtocol.ContralServiceAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&servicestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serviceport_) -
      reinterpret_cast<char*>(&servicestate_)) + sizeof(serviceport_));
  _internal_metadata_.Clear();
}

bool ContralServiceAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContralProtocol.ContralServiceAnswer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ServiceState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicestate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ServiceIP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serviceip().data(), static_cast<int>(this->serviceip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralServiceAnswer.ServiceIP"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ServicePort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serviceport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralServiceAnswer.UserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PassWord = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ContralProtocol.ContralServiceAnswer.PassWord"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContralProtocol.ContralServiceAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContralProtocol.ContralServiceAnswer)
  return false;
#undef DO_
}

void ContralServiceAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContralProtocol.ContralServiceAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServiceState = 1;
  if (this->servicestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servicestate(), output);
  }

  // string ServiceIP = 2;
  if (this->serviceip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serviceip().data(), static_cast<int>(this->serviceip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.ServiceIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serviceip(), output);
  }

  // int32 ServicePort = 3;
  if (this->serviceport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serviceport(), output);
  }

  // string UserName = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.PassWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ContralProtocol.ContralServiceAnswer)
}

::google::protobuf::uint8* ContralServiceAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContralProtocol.ContralServiceAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServiceState = 1;
  if (this->servicestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servicestate(), target);
  }

  // string ServiceIP = 2;
  if (this->serviceip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serviceip().data(), static_cast<int>(this->serviceip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.ServiceIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serviceip(), target);
  }

  // int32 ServicePort = 3;
  if (this->serviceport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serviceport(), target);
  }

  // string UserName = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ContralProtocol.ContralServiceAnswer.PassWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContralProtocol.ContralServiceAnswer)
  return target;
}

size_t ContralServiceAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContralProtocol.ContralServiceAnswer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ServiceIP = 2;
  if (this->serviceip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serviceip());
  }

  // string UserName = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string PassWord = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 ServiceState = 1;
  if (this->servicestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servicestate());
  }

  // int32 ServicePort = 3;
  if (this->serviceport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serviceport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContralServiceAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContralProtocol.ContralServiceAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const ContralServiceAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContralServiceAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContralProtocol.ContralServiceAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContralProtocol.ContralServiceAnswer)
    MergeFrom(*source);
  }
}

void ContralServiceAnswer::MergeFrom(const ContralServiceAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContralProtocol.ContralServiceAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serviceip().size() > 0) {

    serviceip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serviceip_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.servicestate() != 0) {
    set_servicestate(from.servicestate());
  }
  if (from.serviceport() != 0) {
    set_serviceport(from.serviceport());
  }
}

void ContralServiceAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContralProtocol.ContralServiceAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContralServiceAnswer::CopyFrom(const ContralServiceAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContralProtocol.ContralServiceAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContralServiceAnswer::IsInitialized() const {
  return true;
}

void ContralServiceAnswer::Swap(ContralServiceAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContralServiceAnswer::InternalSwap(ContralServiceAnswer* other) {
  using std::swap;
  serviceip_.Swap(&other->serviceip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(servicestate_, other->servicestate_);
  swap(serviceport_, other->serviceport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContralServiceAnswer::GetMetadata() const {
  protobuf_ContralProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ContralProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ContralProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContralProtocol::ContralServerInfo* Arena::CreateMaybeMessage< ::ContralProtocol::ContralServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ContralProtocol::ContralServerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContralProtocol::ContralRegisterService* Arena::CreateMaybeMessage< ::ContralProtocol::ContralRegisterService >(Arena* arena) {
  return Arena::CreateInternal< ::ContralProtocol::ContralRegisterService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContralProtocol::ContralService* Arena::CreateMaybeMessage< ::ContralProtocol::ContralService >(Arena* arena) {
  return Arena::CreateInternal< ::ContralProtocol::ContralService >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContralProtocol::ContralServiceAnswer* Arena::CreateMaybeMessage< ::ContralProtocol::ContralServiceAnswer >(Arena* arena) {
  return Arena::CreateInternal< ::ContralProtocol::ContralServiceAnswer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
