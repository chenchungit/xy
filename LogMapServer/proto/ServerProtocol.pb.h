// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerProtocol.proto

#ifndef PROTOBUF_INCLUDED_ServerProtocol_2eproto
#define PROTOBUF_INCLUDED_ServerProtocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ServerProtocol_2eproto 

namespace protobuf_ServerProtocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[109];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ServerProtocol_2eproto
namespace ServerProtocol {
class CardRecord;
class CardRecordDefaultTypeInternal;
extern CardRecordDefaultTypeInternal _CardRecord_default_instance_;
class CardsAreaDeviceContrast;
class CardsAreaDeviceContrastDefaultTypeInternal;
extern CardsAreaDeviceContrastDefaultTypeInternal _CardsAreaDeviceContrast_default_instance_;
class CountryCode;
class CountryCodeDefaultTypeInternal;
extern CountryCodeDefaultTypeInternal _CountryCode_default_instance_;
class DevTypeCribe;
class DevTypeCribeDefaultTypeInternal;
extern DevTypeCribeDefaultTypeInternal _DevTypeCribe_default_instance_;
class Developer;
class DeveloperDefaultTypeInternal;
extern DeveloperDefaultTypeInternal _Developer_default_instance_;
class DeviceAlarm;
class DeviceAlarmDefaultTypeInternal;
extern DeviceAlarmDefaultTypeInternal _DeviceAlarm_default_instance_;
class DeviceAlarmProperty;
class DeviceAlarmPropertyDefaultTypeInternal;
extern DeviceAlarmPropertyDefaultTypeInternal _DeviceAlarmProperty_default_instance_;
class DeviceDescribeInfo;
class DeviceDescribeInfoDefaultTypeInternal;
extern DeviceDescribeInfoDefaultTypeInternal _DeviceDescribeInfo_default_instance_;
class DeviceHeartRecord;
class DeviceHeartRecordDefaultTypeInternal;
extern DeviceHeartRecordDefaultTypeInternal _DeviceHeartRecord_default_instance_;
class FolderTree;
class FolderTreeDefaultTypeInternal;
extern FolderTreeDefaultTypeInternal _FolderTree_default_instance_;
class FolderUpRecord;
class FolderUpRecordDefaultTypeInternal;
extern FolderUpRecordDefaultTypeInternal _FolderUpRecord_default_instance_;
class FrameRegisterServer;
class FrameRegisterServerDefaultTypeInternal;
extern FrameRegisterServerDefaultTypeInternal _FrameRegisterServer_default_instance_;
class FrameRegisterServerAnswer;
class FrameRegisterServerAnswerDefaultTypeInternal;
extern FrameRegisterServerAnswerDefaultTypeInternal _FrameRegisterServerAnswer_default_instance_;
class FrameUserInfo;
class FrameUserInfoDefaultTypeInternal;
extern FrameUserInfoDefaultTypeInternal _FrameUserInfo_default_instance_;
class GwDeviceBindTemp;
class GwDeviceBindTempDefaultTypeInternal;
extern GwDeviceBindTempDefaultTypeInternal _GwDeviceBindTemp_default_instance_;
class H2SRequeseData;
class H2SRequeseDataDefaultTypeInternal;
extern H2SRequeseDataDefaultTypeInternal _H2SRequeseData_default_instance_;
class HmRecord;
class HmRecordDefaultTypeInternal;
extern HmRecordDefaultTypeInternal _HmRecord_default_instance_;
class JgPushRecord;
class JgPushRecordDefaultTypeInternal;
extern JgPushRecordDefaultTypeInternal _JgPushRecord_default_instance_;
class KeyShareRecord;
class KeyShareRecordDefaultTypeInternal;
extern KeyShareRecordDefaultTypeInternal _KeyShareRecord_default_instance_;
class ManagersRoleContrast;
class ManagersRoleContrastDefaultTypeInternal;
extern ManagersRoleContrastDefaultTypeInternal _ManagersRoleContrast_default_instance_;
class NoCreditEquip;
class NoCreditEquipDefaultTypeInternal;
extern NoCreditEquipDefaultTypeInternal _NoCreditEquip_default_instance_;
class SAppRoleContrastInfo;
class SAppRoleContrastInfoDefaultTypeInternal;
extern SAppRoleContrastInfoDefaultTypeInternal _SAppRoleContrastInfo_default_instance_;
class SAppRoleFun;
class SAppRoleFunDefaultTypeInternal;
extern SAppRoleFunDefaultTypeInternal _SAppRoleFun_default_instance_;
class SAppRoleFunBaseInfo;
class SAppRoleFunBaseInfoDefaultTypeInternal;
extern SAppRoleFunBaseInfoDefaultTypeInternal _SAppRoleFunBaseInfo_default_instance_;
class SAppRoleType;
class SAppRoleTypeDefaultTypeInternal;
extern SAppRoleTypeDefaultTypeInternal _SAppRoleType_default_instance_;
class SAreaDeviceinfo;
class SAreaDeviceinfoDefaultTypeInternal;
extern SAreaDeviceinfoDefaultTypeInternal _SAreaDeviceinfo_default_instance_;
class SAreaUseRecord;
class SAreaUseRecordDefaultTypeInternal;
extern SAreaUseRecordDefaultTypeInternal _SAreaUseRecord_default_instance_;
class SAreabaseinfo;
class SAreabaseinfoDefaultTypeInternal;
extern SAreabaseinfoDefaultTypeInternal _SAreabaseinfo_default_instance_;
class SBuildPsw;
class SBuildPswDefaultTypeInternal;
extern SBuildPswDefaultTypeInternal _SBuildPsw_default_instance_;
class SDevFetNickName;
class SDevFetNickNameDefaultTypeInternal;
extern SDevFetNickNameDefaultTypeInternal _SDevFetNickName_default_instance_;
class SDeviceBaseinfo;
class SDeviceBaseinfoDefaultTypeInternal;
extern SDeviceBaseinfoDefaultTypeInternal _SDeviceBaseinfo_default_instance_;
class SDeviceFet;
class SDeviceFetDefaultTypeInternal;
extern SDeviceFetDefaultTypeInternal _SDeviceFet_default_instance_;
class SDeviceGroup;
class SDeviceGroupDefaultTypeInternal;
extern SDeviceGroupDefaultTypeInternal _SDeviceGroup_default_instance_;
class SDevicePassword;
class SDevicePasswordDefaultTypeInternal;
extern SDevicePasswordDefaultTypeInternal _SDevicePassword_default_instance_;
class SDeviceProperty;
class SDevicePropertyDefaultTypeInternal;
extern SDevicePropertyDefaultTypeInternal _SDeviceProperty_default_instance_;
class SEleSendRecord;
class SEleSendRecordDefaultTypeInternal;
extern SEleSendRecordDefaultTypeInternal _SEleSendRecord_default_instance_;
class SFramEleSendRecord;
class SFramEleSendRecordDefaultTypeInternal;
extern SFramEleSendRecordDefaultTypeInternal _SFramEleSendRecord_default_instance_;
class SFramMechanism;
class SFramMechanismDefaultTypeInternal;
extern SFramMechanismDefaultTypeInternal _SFramMechanism_default_instance_;
class SFramPswKeyRecord;
class SFramPswKeyRecordDefaultTypeInternal;
extern SFramPswKeyRecordDefaultTypeInternal _SFramPswKeyRecord_default_instance_;
class SFramPswSendRecord;
class SFramPswSendRecordDefaultTypeInternal;
extern SFramPswSendRecordDefaultTypeInternal _SFramPswSendRecord_default_instance_;
class SFramRoleType;
class SFramRoleTypeDefaultTypeInternal;
extern SFramRoleTypeDefaultTypeInternal _SFramRoleType_default_instance_;
class SFramRoleinfo;
class SFramRoleinfoDefaultTypeInternal;
extern SFramRoleinfoDefaultTypeInternal _SFramRoleinfo_default_instance_;
class SFramShareKey;
class SFramShareKeyDefaultTypeInternal;
extern SFramShareKeyDefaultTypeInternal _SFramShareKey_default_instance_;
class SFramToolAuthority;
class SFramToolAuthorityDefaultTypeInternal;
extern SFramToolAuthorityDefaultTypeInternal _SFramToolAuthority_default_instance_;
class SFramUseRecord;
class SFramUseRecordDefaultTypeInternal;
extern SFramUseRecordDefaultTypeInternal _SFramUseRecord_default_instance_;
class SFramUserinfo;
class SFramUserinfoDefaultTypeInternal;
extern SFramUserinfoDefaultTypeInternal _SFramUserinfo_default_instance_;
class SFrameAppRoleContrastInfo;
class SFrameAppRoleContrastInfoDefaultTypeInternal;
extern SFrameAppRoleContrastInfoDefaultTypeInternal _SFrameAppRoleContrastInfo_default_instance_;
class SFrameAppRoleFun;
class SFrameAppRoleFunDefaultTypeInternal;
extern SFrameAppRoleFunDefaultTypeInternal _SFrameAppRoleFun_default_instance_;
class SFrameAppRoleFunBaseInfo;
class SFrameAppRoleFunBaseInfoDefaultTypeInternal;
extern SFrameAppRoleFunBaseInfoDefaultTypeInternal _SFrameAppRoleFunBaseInfo_default_instance_;
class SFrameAppRoleType;
class SFrameAppRoleTypeDefaultTypeInternal;
extern SFrameAppRoleTypeDefaultTypeInternal _SFrameAppRoleType_default_instance_;
class SFrameAreaDevice;
class SFrameAreaDeviceDefaultTypeInternal;
extern SFrameAreaDeviceDefaultTypeInternal _SFrameAreaDevice_default_instance_;
class SFrameAreaUseRecord;
class SFrameAreaUseRecordDefaultTypeInternal;
extern SFrameAreaUseRecordDefaultTypeInternal _SFrameAreaUseRecord_default_instance_;
class SFrameAreabase;
class SFrameAreabaseDefaultTypeInternal;
extern SFrameAreabaseDefaultTypeInternal _SFrameAreabase_default_instance_;
class SFrameBuildPsw;
class SFrameBuildPswDefaultTypeInternal;
extern SFrameBuildPswDefaultTypeInternal _SFrameBuildPsw_default_instance_;
class SFrameCardRecord;
class SFrameCardRecordDefaultTypeInternal;
extern SFrameCardRecordDefaultTypeInternal _SFrameCardRecord_default_instance_;
class SFrameCardsAreaDeviceContrast;
class SFrameCardsAreaDeviceContrastDefaultTypeInternal;
extern SFrameCardsAreaDeviceContrastDefaultTypeInternal _SFrameCardsAreaDeviceContrast_default_instance_;
class SFrameCountryCode;
class SFrameCountryCodeDefaultTypeInternal;
extern SFrameCountryCodeDefaultTypeInternal _SFrameCountryCode_default_instance_;
class SFrameDevTypeCribe;
class SFrameDevTypeCribeDefaultTypeInternal;
extern SFrameDevTypeCribeDefaultTypeInternal _SFrameDevTypeCribe_default_instance_;
class SFrameDeveloper;
class SFrameDeveloperDefaultTypeInternal;
extern SFrameDeveloperDefaultTypeInternal _SFrameDeveloper_default_instance_;
class SFrameDeviceAlarm;
class SFrameDeviceAlarmDefaultTypeInternal;
extern SFrameDeviceAlarmDefaultTypeInternal _SFrameDeviceAlarm_default_instance_;
class SFrameDeviceAlarmProperty;
class SFrameDeviceAlarmPropertyDefaultTypeInternal;
extern SFrameDeviceAlarmPropertyDefaultTypeInternal _SFrameDeviceAlarmProperty_default_instance_;
class SFrameDeviceBase;
class SFrameDeviceBaseDefaultTypeInternal;
extern SFrameDeviceBaseDefaultTypeInternal _SFrameDeviceBase_default_instance_;
class SFrameDeviceDescribeInfo;
class SFrameDeviceDescribeInfoDefaultTypeInternal;
extern SFrameDeviceDescribeInfoDefaultTypeInternal _SFrameDeviceDescribeInfo_default_instance_;
class SFrameDeviceFet;
class SFrameDeviceFetDefaultTypeInternal;
extern SFrameDeviceFetDefaultTypeInternal _SFrameDeviceFet_default_instance_;
class SFrameDeviceFetNickName;
class SFrameDeviceFetNickNameDefaultTypeInternal;
extern SFrameDeviceFetNickNameDefaultTypeInternal _SFrameDeviceFetNickName_default_instance_;
class SFrameDeviceGroup;
class SFrameDeviceGroupDefaultTypeInternal;
extern SFrameDeviceGroupDefaultTypeInternal _SFrameDeviceGroup_default_instance_;
class SFrameDeviceHeartRecord;
class SFrameDeviceHeartRecordDefaultTypeInternal;
extern SFrameDeviceHeartRecordDefaultTypeInternal _SFrameDeviceHeartRecord_default_instance_;
class SFrameDevicePassword;
class SFrameDevicePasswordDefaultTypeInternal;
extern SFrameDevicePasswordDefaultTypeInternal _SFrameDevicePassword_default_instance_;
class SFrameDeviceProperty;
class SFrameDevicePropertyDefaultTypeInternal;
extern SFrameDevicePropertyDefaultTypeInternal _SFrameDeviceProperty_default_instance_;
class SFrameFaceRecognition;
class SFrameFaceRecognitionDefaultTypeInternal;
extern SFrameFaceRecognitionDefaultTypeInternal _SFrameFaceRecognition_default_instance_;
class SFrameFaceRecognitionAnswer;
class SFrameFaceRecognitionAnswerDefaultTypeInternal;
extern SFrameFaceRecognitionAnswerDefaultTypeInternal _SFrameFaceRecognitionAnswer_default_instance_;
class SFrameFirmwareVersion;
class SFrameFirmwareVersionDefaultTypeInternal;
extern SFrameFirmwareVersionDefaultTypeInternal _SFrameFirmwareVersion_default_instance_;
class SFrameFirmwareVersionAnswer;
class SFrameFirmwareVersionAnswerDefaultTypeInternal;
extern SFrameFirmwareVersionAnswerDefaultTypeInternal _SFrameFirmwareVersionAnswer_default_instance_;
class SFrameFolderTree;
class SFrameFolderTreeDefaultTypeInternal;
extern SFrameFolderTreeDefaultTypeInternal _SFrameFolderTree_default_instance_;
class SFrameFolderUpRecord;
class SFrameFolderUpRecordDefaultTypeInternal;
extern SFrameFolderUpRecordDefaultTypeInternal _SFrameFolderUpRecord_default_instance_;
class SFrameGWDeviceContrast;
class SFrameGWDeviceContrastDefaultTypeInternal;
extern SFrameGWDeviceContrastDefaultTypeInternal _SFrameGWDeviceContrast_default_instance_;
class SFrameGwDeviceBindTemp;
class SFrameGwDeviceBindTempDefaultTypeInternal;
extern SFrameGwDeviceBindTempDefaultTypeInternal _SFrameGwDeviceBindTemp_default_instance_;
class SFrameHmRecord;
class SFrameHmRecordDefaultTypeInternal;
extern SFrameHmRecordDefaultTypeInternal _SFrameHmRecord_default_instance_;
class SFrameItem;
class SFrameItemDefaultTypeInternal;
extern SFrameItemDefaultTypeInternal _SFrameItem_default_instance_;
class SFrameJgPushRecord;
class SFrameJgPushRecordDefaultTypeInternal;
extern SFrameJgPushRecordDefaultTypeInternal _SFrameJgPushRecord_default_instance_;
class SFrameKeyShareRecord;
class SFrameKeyShareRecordDefaultTypeInternal;
extern SFrameKeyShareRecordDefaultTypeInternal _SFrameKeyShareRecord_default_instance_;
class SFrameManagersRoleContrast;
class SFrameManagersRoleContrastDefaultTypeInternal;
extern SFrameManagersRoleContrastDefaultTypeInternal _SFrameManagersRoleContrast_default_instance_;
class SFrameNBAIOT;
class SFrameNBAIOTDefaultTypeInternal;
extern SFrameNBAIOTDefaultTypeInternal _SFrameNBAIOT_default_instance_;
class SFrameNBAIOTAnswer;
class SFrameNBAIOTAnswerDefaultTypeInternal;
extern SFrameNBAIOTAnswerDefaultTypeInternal _SFrameNBAIOTAnswer_default_instance_;
class SFrameNBWhiteList;
class SFrameNBWhiteListDefaultTypeInternal;
extern SFrameNBWhiteListDefaultTypeInternal _SFrameNBWhiteList_default_instance_;
class SFrameNBWhiteListAnswer;
class SFrameNBWhiteListAnswerDefaultTypeInternal;
extern SFrameNBWhiteListAnswerDefaultTypeInternal _SFrameNBWhiteListAnswer_default_instance_;
class SFrameNoCreditEquip;
class SFrameNoCreditEquipDefaultTypeInternal;
extern SFrameNoCreditEquipDefaultTypeInternal _SFrameNoCreditEquip_default_instance_;
class SFrameRoleDeviceRecord;
class SFrameRoleDeviceRecordDefaultTypeInternal;
extern SFrameRoleDeviceRecordDefaultTypeInternal _SFrameRoleDeviceRecord_default_instance_;
class SFrameTypeApiContrast;
class SFrameTypeApiContrastDefaultTypeInternal;
extern SFrameTypeApiContrastDefaultTypeInternal _SFrameTypeApiContrast_default_instance_;
class SFrameVersion;
class SFrameVersionDefaultTypeInternal;
extern SFrameVersionDefaultTypeInternal _SFrameVersion_default_instance_;
class SFrameVersionRangle;
class SFrameVersionRangleDefaultTypeInternal;
extern SFrameVersionRangleDefaultTypeInternal _SFrameVersionRangle_default_instance_;
class SFrameWebInterface;
class SFrameWebInterfaceDefaultTypeInternal;
extern SFrameWebInterfaceDefaultTypeInternal _SFrameWebInterface_default_instance_;
class SGWDeviceContrast;
class SGWDeviceContrastDefaultTypeInternal;
extern SGWDeviceContrastDefaultTypeInternal _SGWDeviceContrast_default_instance_;
class SItemInfo;
class SItemInfoDefaultTypeInternal;
extern SItemInfoDefaultTypeInternal _SItemInfo_default_instance_;
class SMechanism;
class SMechanismDefaultTypeInternal;
extern SMechanismDefaultTypeInternal _SMechanism_default_instance_;
class SPswKeyRecord;
class SPswKeyRecordDefaultTypeInternal;
extern SPswKeyRecordDefaultTypeInternal _SPswKeyRecord_default_instance_;
class SPswSendRecord;
class SPswSendRecordDefaultTypeInternal;
extern SPswSendRecordDefaultTypeInternal _SPswSendRecord_default_instance_;
class SRoleDeviceRecord;
class SRoleDeviceRecordDefaultTypeInternal;
extern SRoleDeviceRecordDefaultTypeInternal _SRoleDeviceRecord_default_instance_;
class SRoleType;
class SRoleTypeDefaultTypeInternal;
extern SRoleTypeDefaultTypeInternal _SRoleType_default_instance_;
class SRoleinfo;
class SRoleinfoDefaultTypeInternal;
extern SRoleinfoDefaultTypeInternal _SRoleinfo_default_instance_;
class SToolAuthority;
class SToolAuthorityDefaultTypeInternal;
extern SToolAuthorityDefaultTypeInternal _SToolAuthority_default_instance_;
class SUseRecord;
class SUseRecordDefaultTypeInternal;
extern SUseRecordDefaultTypeInternal _SUseRecord_default_instance_;
class SUserinfo;
class SUserinfoDefaultTypeInternal;
extern SUserinfoDefaultTypeInternal _SUserinfo_default_instance_;
class SystemCode;
class SystemCodeDefaultTypeInternal;
extern SystemCodeDefaultTypeInternal _SystemCode_default_instance_;
class SystemJGPush;
class SystemJGPushDefaultTypeInternal;
extern SystemJGPushDefaultTypeInternal _SystemJGPush_default_instance_;
class TypeApiContrast;
class TypeApiContrastDefaultTypeInternal;
extern TypeApiContrastDefaultTypeInternal _TypeApiContrast_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class VersionRangle;
class VersionRangleDefaultTypeInternal;
extern VersionRangleDefaultTypeInternal _VersionRangle_default_instance_;
class WebInterface;
class WebInterfaceDefaultTypeInternal;
extern WebInterfaceDefaultTypeInternal _WebInterface_default_instance_;
}  // namespace ServerProtocol
namespace google {
namespace protobuf {
template<> ::ServerProtocol::CardRecord* Arena::CreateMaybeMessage<::ServerProtocol::CardRecord>(Arena*);
template<> ::ServerProtocol::CardsAreaDeviceContrast* Arena::CreateMaybeMessage<::ServerProtocol::CardsAreaDeviceContrast>(Arena*);
template<> ::ServerProtocol::CountryCode* Arena::CreateMaybeMessage<::ServerProtocol::CountryCode>(Arena*);
template<> ::ServerProtocol::DevTypeCribe* Arena::CreateMaybeMessage<::ServerProtocol::DevTypeCribe>(Arena*);
template<> ::ServerProtocol::Developer* Arena::CreateMaybeMessage<::ServerProtocol::Developer>(Arena*);
template<> ::ServerProtocol::DeviceAlarm* Arena::CreateMaybeMessage<::ServerProtocol::DeviceAlarm>(Arena*);
template<> ::ServerProtocol::DeviceAlarmProperty* Arena::CreateMaybeMessage<::ServerProtocol::DeviceAlarmProperty>(Arena*);
template<> ::ServerProtocol::DeviceDescribeInfo* Arena::CreateMaybeMessage<::ServerProtocol::DeviceDescribeInfo>(Arena*);
template<> ::ServerProtocol::DeviceHeartRecord* Arena::CreateMaybeMessage<::ServerProtocol::DeviceHeartRecord>(Arena*);
template<> ::ServerProtocol::FolderTree* Arena::CreateMaybeMessage<::ServerProtocol::FolderTree>(Arena*);
template<> ::ServerProtocol::FolderUpRecord* Arena::CreateMaybeMessage<::ServerProtocol::FolderUpRecord>(Arena*);
template<> ::ServerProtocol::FrameRegisterServer* Arena::CreateMaybeMessage<::ServerProtocol::FrameRegisterServer>(Arena*);
template<> ::ServerProtocol::FrameRegisterServerAnswer* Arena::CreateMaybeMessage<::ServerProtocol::FrameRegisterServerAnswer>(Arena*);
template<> ::ServerProtocol::FrameUserInfo* Arena::CreateMaybeMessage<::ServerProtocol::FrameUserInfo>(Arena*);
template<> ::ServerProtocol::GwDeviceBindTemp* Arena::CreateMaybeMessage<::ServerProtocol::GwDeviceBindTemp>(Arena*);
template<> ::ServerProtocol::H2SRequeseData* Arena::CreateMaybeMessage<::ServerProtocol::H2SRequeseData>(Arena*);
template<> ::ServerProtocol::HmRecord* Arena::CreateMaybeMessage<::ServerProtocol::HmRecord>(Arena*);
template<> ::ServerProtocol::JgPushRecord* Arena::CreateMaybeMessage<::ServerProtocol::JgPushRecord>(Arena*);
template<> ::ServerProtocol::KeyShareRecord* Arena::CreateMaybeMessage<::ServerProtocol::KeyShareRecord>(Arena*);
template<> ::ServerProtocol::ManagersRoleContrast* Arena::CreateMaybeMessage<::ServerProtocol::ManagersRoleContrast>(Arena*);
template<> ::ServerProtocol::NoCreditEquip* Arena::CreateMaybeMessage<::ServerProtocol::NoCreditEquip>(Arena*);
template<> ::ServerProtocol::SAppRoleContrastInfo* Arena::CreateMaybeMessage<::ServerProtocol::SAppRoleContrastInfo>(Arena*);
template<> ::ServerProtocol::SAppRoleFun* Arena::CreateMaybeMessage<::ServerProtocol::SAppRoleFun>(Arena*);
template<> ::ServerProtocol::SAppRoleFunBaseInfo* Arena::CreateMaybeMessage<::ServerProtocol::SAppRoleFunBaseInfo>(Arena*);
template<> ::ServerProtocol::SAppRoleType* Arena::CreateMaybeMessage<::ServerProtocol::SAppRoleType>(Arena*);
template<> ::ServerProtocol::SAreaDeviceinfo* Arena::CreateMaybeMessage<::ServerProtocol::SAreaDeviceinfo>(Arena*);
template<> ::ServerProtocol::SAreaUseRecord* Arena::CreateMaybeMessage<::ServerProtocol::SAreaUseRecord>(Arena*);
template<> ::ServerProtocol::SAreabaseinfo* Arena::CreateMaybeMessage<::ServerProtocol::SAreabaseinfo>(Arena*);
template<> ::ServerProtocol::SBuildPsw* Arena::CreateMaybeMessage<::ServerProtocol::SBuildPsw>(Arena*);
template<> ::ServerProtocol::SDevFetNickName* Arena::CreateMaybeMessage<::ServerProtocol::SDevFetNickName>(Arena*);
template<> ::ServerProtocol::SDeviceBaseinfo* Arena::CreateMaybeMessage<::ServerProtocol::SDeviceBaseinfo>(Arena*);
template<> ::ServerProtocol::SDeviceFet* Arena::CreateMaybeMessage<::ServerProtocol::SDeviceFet>(Arena*);
template<> ::ServerProtocol::SDeviceGroup* Arena::CreateMaybeMessage<::ServerProtocol::SDeviceGroup>(Arena*);
template<> ::ServerProtocol::SDevicePassword* Arena::CreateMaybeMessage<::ServerProtocol::SDevicePassword>(Arena*);
template<> ::ServerProtocol::SDeviceProperty* Arena::CreateMaybeMessage<::ServerProtocol::SDeviceProperty>(Arena*);
template<> ::ServerProtocol::SEleSendRecord* Arena::CreateMaybeMessage<::ServerProtocol::SEleSendRecord>(Arena*);
template<> ::ServerProtocol::SFramEleSendRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFramEleSendRecord>(Arena*);
template<> ::ServerProtocol::SFramMechanism* Arena::CreateMaybeMessage<::ServerProtocol::SFramMechanism>(Arena*);
template<> ::ServerProtocol::SFramPswKeyRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFramPswKeyRecord>(Arena*);
template<> ::ServerProtocol::SFramPswSendRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFramPswSendRecord>(Arena*);
template<> ::ServerProtocol::SFramRoleType* Arena::CreateMaybeMessage<::ServerProtocol::SFramRoleType>(Arena*);
template<> ::ServerProtocol::SFramRoleinfo* Arena::CreateMaybeMessage<::ServerProtocol::SFramRoleinfo>(Arena*);
template<> ::ServerProtocol::SFramShareKey* Arena::CreateMaybeMessage<::ServerProtocol::SFramShareKey>(Arena*);
template<> ::ServerProtocol::SFramToolAuthority* Arena::CreateMaybeMessage<::ServerProtocol::SFramToolAuthority>(Arena*);
template<> ::ServerProtocol::SFramUseRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFramUseRecord>(Arena*);
template<> ::ServerProtocol::SFramUserinfo* Arena::CreateMaybeMessage<::ServerProtocol::SFramUserinfo>(Arena*);
template<> ::ServerProtocol::SFrameAppRoleContrastInfo* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAppRoleContrastInfo>(Arena*);
template<> ::ServerProtocol::SFrameAppRoleFun* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAppRoleFun>(Arena*);
template<> ::ServerProtocol::SFrameAppRoleFunBaseInfo* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAppRoleFunBaseInfo>(Arena*);
template<> ::ServerProtocol::SFrameAppRoleType* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAppRoleType>(Arena*);
template<> ::ServerProtocol::SFrameAreaDevice* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAreaDevice>(Arena*);
template<> ::ServerProtocol::SFrameAreaUseRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAreaUseRecord>(Arena*);
template<> ::ServerProtocol::SFrameAreabase* Arena::CreateMaybeMessage<::ServerProtocol::SFrameAreabase>(Arena*);
template<> ::ServerProtocol::SFrameBuildPsw* Arena::CreateMaybeMessage<::ServerProtocol::SFrameBuildPsw>(Arena*);
template<> ::ServerProtocol::SFrameCardRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameCardRecord>(Arena*);
template<> ::ServerProtocol::SFrameCardsAreaDeviceContrast* Arena::CreateMaybeMessage<::ServerProtocol::SFrameCardsAreaDeviceContrast>(Arena*);
template<> ::ServerProtocol::SFrameCountryCode* Arena::CreateMaybeMessage<::ServerProtocol::SFrameCountryCode>(Arena*);
template<> ::ServerProtocol::SFrameDevTypeCribe* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDevTypeCribe>(Arena*);
template<> ::ServerProtocol::SFrameDeveloper* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeveloper>(Arena*);
template<> ::ServerProtocol::SFrameDeviceAlarm* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceAlarm>(Arena*);
template<> ::ServerProtocol::SFrameDeviceAlarmProperty* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceAlarmProperty>(Arena*);
template<> ::ServerProtocol::SFrameDeviceBase* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceBase>(Arena*);
template<> ::ServerProtocol::SFrameDeviceDescribeInfo* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceDescribeInfo>(Arena*);
template<> ::ServerProtocol::SFrameDeviceFet* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceFet>(Arena*);
template<> ::ServerProtocol::SFrameDeviceFetNickName* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceFetNickName>(Arena*);
template<> ::ServerProtocol::SFrameDeviceGroup* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceGroup>(Arena*);
template<> ::ServerProtocol::SFrameDeviceHeartRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceHeartRecord>(Arena*);
template<> ::ServerProtocol::SFrameDevicePassword* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDevicePassword>(Arena*);
template<> ::ServerProtocol::SFrameDeviceProperty* Arena::CreateMaybeMessage<::ServerProtocol::SFrameDeviceProperty>(Arena*);
template<> ::ServerProtocol::SFrameFaceRecognition* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFaceRecognition>(Arena*);
template<> ::ServerProtocol::SFrameFaceRecognitionAnswer* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFaceRecognitionAnswer>(Arena*);
template<> ::ServerProtocol::SFrameFirmwareVersion* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFirmwareVersion>(Arena*);
template<> ::ServerProtocol::SFrameFirmwareVersionAnswer* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFirmwareVersionAnswer>(Arena*);
template<> ::ServerProtocol::SFrameFolderTree* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFolderTree>(Arena*);
template<> ::ServerProtocol::SFrameFolderUpRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameFolderUpRecord>(Arena*);
template<> ::ServerProtocol::SFrameGWDeviceContrast* Arena::CreateMaybeMessage<::ServerProtocol::SFrameGWDeviceContrast>(Arena*);
template<> ::ServerProtocol::SFrameGwDeviceBindTemp* Arena::CreateMaybeMessage<::ServerProtocol::SFrameGwDeviceBindTemp>(Arena*);
template<> ::ServerProtocol::SFrameHmRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameHmRecord>(Arena*);
template<> ::ServerProtocol::SFrameItem* Arena::CreateMaybeMessage<::ServerProtocol::SFrameItem>(Arena*);
template<> ::ServerProtocol::SFrameJgPushRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameJgPushRecord>(Arena*);
template<> ::ServerProtocol::SFrameKeyShareRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameKeyShareRecord>(Arena*);
template<> ::ServerProtocol::SFrameManagersRoleContrast* Arena::CreateMaybeMessage<::ServerProtocol::SFrameManagersRoleContrast>(Arena*);
template<> ::ServerProtocol::SFrameNBAIOT* Arena::CreateMaybeMessage<::ServerProtocol::SFrameNBAIOT>(Arena*);
template<> ::ServerProtocol::SFrameNBAIOTAnswer* Arena::CreateMaybeMessage<::ServerProtocol::SFrameNBAIOTAnswer>(Arena*);
template<> ::ServerProtocol::SFrameNBWhiteList* Arena::CreateMaybeMessage<::ServerProtocol::SFrameNBWhiteList>(Arena*);
template<> ::ServerProtocol::SFrameNBWhiteListAnswer* Arena::CreateMaybeMessage<::ServerProtocol::SFrameNBWhiteListAnswer>(Arena*);
template<> ::ServerProtocol::SFrameNoCreditEquip* Arena::CreateMaybeMessage<::ServerProtocol::SFrameNoCreditEquip>(Arena*);
template<> ::ServerProtocol::SFrameRoleDeviceRecord* Arena::CreateMaybeMessage<::ServerProtocol::SFrameRoleDeviceRecord>(Arena*);
template<> ::ServerProtocol::SFrameTypeApiContrast* Arena::CreateMaybeMessage<::ServerProtocol::SFrameTypeApiContrast>(Arena*);
template<> ::ServerProtocol::SFrameVersion* Arena::CreateMaybeMessage<::ServerProtocol::SFrameVersion>(Arena*);
template<> ::ServerProtocol::SFrameVersionRangle* Arena::CreateMaybeMessage<::ServerProtocol::SFrameVersionRangle>(Arena*);
template<> ::ServerProtocol::SFrameWebInterface* Arena::CreateMaybeMessage<::ServerProtocol::SFrameWebInterface>(Arena*);
template<> ::ServerProtocol::SGWDeviceContrast* Arena::CreateMaybeMessage<::ServerProtocol::SGWDeviceContrast>(Arena*);
template<> ::ServerProtocol::SItemInfo* Arena::CreateMaybeMessage<::ServerProtocol::SItemInfo>(Arena*);
template<> ::ServerProtocol::SMechanism* Arena::CreateMaybeMessage<::ServerProtocol::SMechanism>(Arena*);
template<> ::ServerProtocol::SPswKeyRecord* Arena::CreateMaybeMessage<::ServerProtocol::SPswKeyRecord>(Arena*);
template<> ::ServerProtocol::SPswSendRecord* Arena::CreateMaybeMessage<::ServerProtocol::SPswSendRecord>(Arena*);
template<> ::ServerProtocol::SRoleDeviceRecord* Arena::CreateMaybeMessage<::ServerProtocol::SRoleDeviceRecord>(Arena*);
template<> ::ServerProtocol::SRoleType* Arena::CreateMaybeMessage<::ServerProtocol::SRoleType>(Arena*);
template<> ::ServerProtocol::SRoleinfo* Arena::CreateMaybeMessage<::ServerProtocol::SRoleinfo>(Arena*);
template<> ::ServerProtocol::SToolAuthority* Arena::CreateMaybeMessage<::ServerProtocol::SToolAuthority>(Arena*);
template<> ::ServerProtocol::SUseRecord* Arena::CreateMaybeMessage<::ServerProtocol::SUseRecord>(Arena*);
template<> ::ServerProtocol::SUserinfo* Arena::CreateMaybeMessage<::ServerProtocol::SUserinfo>(Arena*);
template<> ::ServerProtocol::SystemCode* Arena::CreateMaybeMessage<::ServerProtocol::SystemCode>(Arena*);
template<> ::ServerProtocol::SystemJGPush* Arena::CreateMaybeMessage<::ServerProtocol::SystemJGPush>(Arena*);
template<> ::ServerProtocol::TypeApiContrast* Arena::CreateMaybeMessage<::ServerProtocol::TypeApiContrast>(Arena*);
template<> ::ServerProtocol::Version* Arena::CreateMaybeMessage<::ServerProtocol::Version>(Arena*);
template<> ::ServerProtocol::VersionRangle* Arena::CreateMaybeMessage<::ServerProtocol::VersionRangle>(Arena*);
template<> ::ServerProtocol::WebInterface* Arena::CreateMaybeMessage<::ServerProtocol::WebInterface>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ServerProtocol {

enum ServerCode {
  SERVER_UNKNOWN = 0,
  SERVER_REGISTER_APPLICATION = 2,
  SERVER_REGISTER_ANSWER = 3,
  SERVER_INITDATA_AREABASEINFO = 7004,
  SERVER_INITDATA_AREDEVICEINFO = 7005,
  SERVER_INITDATA_AREAUSERECORD = 7006,
  SERVER_INITDATA_BUILDPSW = 7007,
  SERVER_INITDATA_DEVICEBASEINFO = 7008,
  SERVER_INITDATA_DEVICEPSW = 7009,
  SERVER_INITDATA_ELESENDRECORD = 7010,
  SERVER_INITDATA_MECHANISM = 7011,
  SERVER_INITDATA_PSWKEYRECORD = 7012,
  SERVER_INITDATA_PSWSENDRECORD = 7013,
  SERVER_INITDATA_ROLEINFO = 7014,
  SERVER_INITDATA_ROLETYPE = 7015,
  SERVER_INITDATA_TOOLAUTHORITY = 7016,
  SERVER_INITDATA_USERECORD = 7017,
  SERVER_INITDATA_USERINFO = 7018,
  SERVER_INITDATA_APPROLETYPE = 7019,
  SERVER_INITDATA_APPROLEFUN = 7020,
  SERVER_INITDATA_DEVICEGROUP = 7021,
  SERVER_INITDATA_ITEM = 7022,
  SERVER_INITDATA_ROLETYPEBASEFUN = 7023,
  SERVER_INITDATA_ROLEDEVICE = 7024,
  SERVER_INITDATA_APPROLECONTRAST = 7025,
  SERVER_INITDATA_DEVICEPROPERTY = 7026,
  SERVER_INITDATA_DEVICEFET = 7027,
  SERVER_INITDATA_GWDEVICECONTRAST = 7028,
  SERVER_INITDATA_GWDEVICEBINDTEMP = 7029,
  SERVER_INITDATA_DEVICEDESRIBEINFO = 7030,
  SERVER_INITDATA_DEVICEALARM = 7031,
  SERVER_INITDATA_DEVICEALARMPROPERTY = 7032,
  SERVER_INITDATA_DEVICEFETNICKNAME = 7033,
  SERVER_INITDATA_FOLDERTREE = 7034,
  SERVER_INITDATA_FOLDERUPRECORD = 7035,
  SERVER_INITDATA_MANAGERSROLECONTRSAT = 7036,
  SERVER_INITDATA_CARDRECORD = 7037,
  SERVER_INITDATA_CARDSAREADEVICECONTRAST = 7038,
  SERVER_INITDATA_DEVELOPER = 7039,
  SERVER_INITDATA_APIINTNTERFACE = 7040,
  SERVER_INITDATA_TYPEAPICONTRAST = 7041,
  SERVER_INITDATA_COUNTRYCODE = 7042,
  SERVER_INITDATA_DEVTYPECRIBE = 7043,
  SERVER_INITDATA_KEYSHARERECORD = 7044,
  SERVER_INITDATA_NOCREDUTEQUIP = 7045,
  SERVER_INITDATA_VERSION = 7046,
  SERVER_INITDATA_VERSIONRANGLE = 7047,
  SERVER_INITDATA_JGPUSHRECORD = 7048,
  SERVER_FACE_RECOGNITION = 7049,
  SERVER_FIRMWARE_VERSION = 7050,
  SERVER_INITDATA_HMRECORD = 7051,
  SERVER_NB_WHITELIST = 7052,
  SERVER_NB_AIOT = 7053,
  SERVER_INIT_END = 7054,
  SERVER_INITDATA_DEVICEHEARTRECORD = 7055,
  SERVER_H2S_REQUESEDATA = 7056,
  SERVER_INSERT_UPDATE_AREABASEINFO = 8002,
  SERVER_INSERT_UPDATE_AREDEVICEINFO = 8003,
  SERVER_INSERT_UPDATE_AREAUSERECORD = 8004,
  SERVER_INSERT_UPDATE_BUILDPSW = 8005,
  SERVER_INSERT_UPDATE_DEVICEBASEINFO = 8006,
  SERVER_INSERT_UPDATE_DEVICEPSW = 8007,
  SERVER_INSERT_UPDATE_ELESENDRECORD = 8008,
  SERVER_INSERT_UPDATE_MECHANISM = 8009,
  SERVER_INSERT_UPDATE_PSWKEYRECORD = 8010,
  SERVER_INSERT_UPDATE_PSWSENDRECORD = 8011,
  SERVER_INSERT_UPDATE_ROLEINFO = 8012,
  SERVER_INSERT_UPDATE_ROLETYPE = 8013,
  SERVER_INSERT_UPDATE_TOOLAUTHORITY = 8014,
  SERVER_INSERT_UPDATE_USERECORD = 8015,
  SERVER_INSERT_UPDATE_USERINFO = 8016,
  SERVER_INSERT_UPDATE_APPROLETYPE = 8017,
  SERVER_INSERT_UPDATE_APPROLEFUN = 8018,
  SERVER_INSERT_UPDATE_DEVICEGROUP = 8019,
  SERVER_INSERT_UPDATE_ITEM = 8020,
  SERVER_INSERT_UPDATE_ROLETYPEBASEFUN = 8021,
  SERVER_INSERT_UPDATE_ROLEDEVICE = 8022,
  SERVER_INSERT_UPDATE_APPROLECONTRAST = 8023,
  SERVER_INSERT_UPDATE_DEVICEPROPERTY = 8024,
  SERVER_INSERT_UPDATE_DEVICEFET = 8025,
  SERVER_INSERT_UPDATE_GWDEVICECONTRAST = 8026,
  SERVER_INSERT_UPDATE_GWDEVICEBINDTEMP = 8027,
  SERVER_INSERT_UPDATE_DEVICEDESRIBEINFO = 8028,
  SERVER_INSERT_UPDATE_DEVICEALARM = 8029,
  SERVER_INSERT_UPDATE_DEVICEALARMPROPERTY = 8030,
  SERVER_INSERT_UPDATE_DEVICEFETNICKNAME = 8031,
  SERVER_INSERT_UPDATE_FOLDERTREE = 8032,
  SERVER_INSERT_UPDATE_FOLDERUPRECORD = 8033,
  SERVER_INSERT_UPDATE_MANAGERSROLECONTRSAT = 8034,
  SERVER_INSERT_UPDATE_CARDRECORD = 8035,
  SERVER_INSERT_UPDATE_CARDSAREADEVICECONTRAST = 8036,
  SERVER_INSERT_UPDATE_DEVELOPER = 8037,
  SERVER_INSERT_UPDATE_APIINTNTERFACE = 8038,
  SERVER_INSERT_UPDATE_TYPEAPICONTRAST = 8039,
  SERVER_INSERT_UPDATE_COUNTRYCODE = 8040,
  SERVER_INSERT_UPDATE_DEVTYPECRIBE = 8041,
  SERVER_INSERT_UPDATE_KEYSHARERECORD = 8042,
  SERVER_INSERT_UPDATE_NOCREDUTEQUIP = 8043,
  SERVER_INSERT_UPDATE_VERSION = 8044,
  SERVER_INSERT_UPDATE_VERSIONRANGLE = 8045,
  SERVER_INSERT_UPDATE_JGPUSHRECORD = 8046,
  SERVER_FACE_RECOGNITION_ANSWER = 8047,
  SERVER_FIRMWARE_VERSION_ANSWER = 8048,
  SERVER_INSERT_UPDATE_HMRECORD = 8049,
  SERVER_NB_WHITELIST_ANSWER = 8050,
  SERVER_INSERT_UPDATE_DEVICEHEARTRECORD = 8051,
  SERVER_SYSTEM_CODE = 50000,
  SERVER_SYSTEM_JGPUSH = 50001,
  SERVER_SMS_SHAREKEY = 50002,
  C2S_MESSAGE_SERVICESENCE = 50,
  ServerCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerCode_IsValid(int value);
const ServerCode ServerCode_MIN = SERVER_UNKNOWN;
const ServerCode ServerCode_MAX = SERVER_SMS_SHAREKEY;
const int ServerCode_ARRAYSIZE = ServerCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerCode_descriptor();
inline const ::std::string& ServerCode_Name(ServerCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerCode_descriptor(), value);
}
inline bool ServerCode_Parse(
    const ::std::string& name, ServerCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerCode>(
    ServerCode_descriptor(), name, value);
}
enum HttpActionType {
  ACTION_TYPE_MECH_ADD = 0,
  ACTION_TYPE_MECH_UPDATE = 1,
  ACTION_TYPE_MECH_DEL = 2,
  ACTION_TYPE_ITEM_ADD = 3,
  ACTION_TYPE_ITEM_UPDATE = 4,
  ACTION_TYPE_ITEM_DEL = 5,
  ACTION_TYPE_AREA_ADD = 6,
  ACTION_TYPE_AREA_UPDATE = 7,
  ACTION_TYPE_AREA_DEL = 8,
  ACTION_TYPE_PUBLIC_ELE = 9,
  ACTION_TYPE_TYPECRIBINFO = 10,
  ACTION_TYPE_ROLEINFO = 11,
  ACTION_TYPE_USERINFO = 12,
  ACTION_TYPE_WBLIST = 13,
  ACTION_TYPE_CARDSRECORD = 14,
  ACTION_TYPE_JGPUSH = 15,
  ACTION_TYPE_WHITEBLACK = 16,
  ACTION_TYPE_FACEDISCERN = 17,
  ACTION_TYPE_CONFIG = 18,
  ACTION_TYPE_HARDWAREVERSION = 19,
  ACTION_TYPE_DELDEVICE = 20,
  HttpActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpActionType_IsValid(int value);
const HttpActionType HttpActionType_MIN = ACTION_TYPE_MECH_ADD;
const HttpActionType HttpActionType_MAX = ACTION_TYPE_DELDEVICE;
const int HttpActionType_ARRAYSIZE = HttpActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpActionType_descriptor();
inline const ::std::string& HttpActionType_Name(HttpActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpActionType_descriptor(), value);
}
inline bool HttpActionType_Parse(
    const ::std::string& name, HttpActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpActionType>(
    HttpActionType_descriptor(), name, value);
}
enum HttpErrorCode {
  HTTP_ERROR_SUCCESS = 0,
  HTTP_ERROR_FAIL = 1,
  HTTP_ERROR_NOPARAM = 2,
  HTTP_ERROR_NOSERIALIZE = 3,
  HttpErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpErrorCode_IsValid(int value);
const HttpErrorCode HttpErrorCode_MIN = HTTP_ERROR_SUCCESS;
const HttpErrorCode HttpErrorCode_MAX = HTTP_ERROR_NOSERIALIZE;
const int HttpErrorCode_ARRAYSIZE = HttpErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpErrorCode_descriptor();
inline const ::std::string& HttpErrorCode_Name(HttpErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpErrorCode_descriptor(), value);
}
inline bool HttpErrorCode_Parse(
    const ::std::string& name, HttpErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpErrorCode>(
    HttpErrorCode_descriptor(), name, value);
}
enum ItemType {
  ITEM_TYPE_0 = 0,
  ITEM_TYPE_1 = 1,
  ITEM_TYPE_2 = 2,
  ITEM_TYPE_3 = 3,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = ITEM_TYPE_0;
const ItemType ItemType_MAX = ITEM_TYPE_3;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum messagestate {
  REGISTER_DEFAULT = 0,
  REGISTER_GW_SUCCESSFULL = 1,
  REGISTER_GW_FAIL = 2,
  REGISTER_MASS_SUCCESSFULL = 3,
  REGISTER_MASS_FAIL = 4,
  REGISTER_COORD_SUCCESSFULL = 5,
  REGISTER_COORD_FAIL = 6,
  REGISTER_UNKNOWN = 7,
  messagestate_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  messagestate_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool messagestate_IsValid(int value);
const messagestate messagestate_MIN = REGISTER_DEFAULT;
const messagestate messagestate_MAX = REGISTER_UNKNOWN;
const int messagestate_ARRAYSIZE = messagestate_MAX + 1;

const ::google::protobuf::EnumDescriptor* messagestate_descriptor();
inline const ::std::string& messagestate_Name(messagestate value) {
  return ::google::protobuf::internal::NameOfEnum(
    messagestate_descriptor(), value);
}
inline bool messagestate_Parse(
    const ::std::string& name, messagestate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<messagestate>(
    messagestate_descriptor(), name, value);
}
enum DumpState {
  DUMP_UNKNOWN = 0,
  DUMP_STATE_1 = 1,
  DUMP_STATE_2 = 2,
  DUMP_STATE_3 = 3,
  DUMP_STATE_4 = 4,
  DumpState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DumpState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DumpState_IsValid(int value);
const DumpState DumpState_MIN = DUMP_UNKNOWN;
const DumpState DumpState_MAX = DUMP_STATE_4;
const int DumpState_ARRAYSIZE = DumpState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DumpState_descriptor();
inline const ::std::string& DumpState_Name(DumpState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DumpState_descriptor(), value);
}
inline bool DumpState_Parse(
    const ::std::string& name, DumpState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DumpState>(
    DumpState_descriptor(), name, value);
}
enum ServerID {
  SERVER_ID_UNKNOWN = 0,
  SERVER_ID_MQTT = 100,
  SERVER_ID_NETSERVER = 200,
  SERVER_ID_DATA = 70,
  SERVER_ID_DB = 400,
  SERVER_ID_NETCLIENT = 500,
  ServerID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerID_IsValid(int value);
const ServerID ServerID_MIN = SERVER_ID_UNKNOWN;
const ServerID ServerID_MAX = SERVER_ID_NETCLIENT;
const int ServerID_ARRAYSIZE = ServerID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerID_descriptor();
inline const ::std::string& ServerID_Name(ServerID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerID_descriptor(), value);
}
inline bool ServerID_Parse(
    const ::std::string& name, ServerID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerID>(
    ServerID_descriptor(), name, value);
}
enum ServerType {
  SERVER_DEFAULT = 0,
  SERVER_MQTT = 1,
  SERVER_QZL_DATA = 3,
  SERVER_DB = 4,
  SERVER_CENTER = 16,
  SERVER_NET = 5,
  SERVER_FACE = 6,
  SERVER_DIANXIN = 7,
  SERVER_YIDONG = 8,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = SERVER_DEFAULT;
const ServerType ServerType_MAX = SERVER_CENTER;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum DeviceType {
  DEVICE_TYPE_UNKNOWN = 0,
  DEVICE_TYPE_GATEWAY = 96,
  DEVICE_TYPE_MJLOOK = 32,
  DEVICE_TYPE_CORELOCK = 33,
  DEVICE_TYPE_DOORLOCK = 34,
  DEVICE_TYPE_HANDLOCK = 35,
  DEVICE_TYPE_PARKINGLOCK = 36,
  DEVICE_TYPE_CABINETLOCK = 37,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = DEVICE_TYPE_UNKNOWN;
const DeviceType DeviceType_MAX = DEVICE_TYPE_GATEWAY;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor();
inline const ::std::string& DeviceType_Name(DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceType_descriptor(), value);
}
inline bool DeviceType_Parse(
    const ::std::string& name, DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
enum ServerUseType {
  SERVER_USE_UNKNOWN = 0,
  SERVER_USE_SAVE = 1,
  SERVER_USE_CLOSE = 2,
  ServerUseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerUseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerUseType_IsValid(int value);
const ServerUseType ServerUseType_MIN = SERVER_USE_UNKNOWN;
const ServerUseType ServerUseType_MAX = SERVER_USE_CLOSE;
const int ServerUseType_ARRAYSIZE = ServerUseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerUseType_descriptor();
inline const ::std::string& ServerUseType_Name(ServerUseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerUseType_descriptor(), value);
}
inline bool ServerUseType_Parse(
    const ::std::string& name, ServerUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerUseType>(
    ServerUseType_descriptor(), name, value);
}
enum WBListType {
  WB_LIST_TYPE_UNKNOWN = 0,
  WB_LIST_TYPE_PSW = 160,
  WB_LIST_TYPE_PSW1 = 161,
  WB_LIST_TYPE_PSW2 = 162,
  WB_LIST_TYPE_PSW3 = 163,
  WB_LIST_TYPE_PSW4 = 164,
  WB_LIST_TYPE_CARDS = 1,
  WBListType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WBListType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WBListType_IsValid(int value);
const WBListType WBListType_MIN = WB_LIST_TYPE_UNKNOWN;
const WBListType WBListType_MAX = WB_LIST_TYPE_PSW4;
const int WBListType_ARRAYSIZE = WBListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WBListType_descriptor();
inline const ::std::string& WBListType_Name(WBListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WBListType_descriptor(), value);
}
inline bool WBListType_Parse(
    const ::std::string& name, WBListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WBListType>(
    WBListType_descriptor(), name, value);
}
enum InstallUserType {
  INSTALL_TYPE_UNKNOWN = 0,
  INSTALL_TYPE_MANAGER = 2,
  INSTALL_TYPE_PERSONAL = 1,
  InstallUserType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InstallUserType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InstallUserType_IsValid(int value);
const InstallUserType InstallUserType_MIN = INSTALL_TYPE_UNKNOWN;
const InstallUserType InstallUserType_MAX = INSTALL_TYPE_MANAGER;
const int InstallUserType_ARRAYSIZE = InstallUserType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstallUserType_descriptor();
inline const ::std::string& InstallUserType_Name(InstallUserType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstallUserType_descriptor(), value);
}
inline bool InstallUserType_Parse(
    const ::std::string& name, InstallUserType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstallUserType>(
    InstallUserType_descriptor(), name, value);
}
enum JgTempType {
  APP_TYPE_TEMPUNDEFINE = 0,
  APP_TYPE_QUNZHILIAN = 1,
  APP_TYPE_XINGYI = 2,
  APP_TYPE_QUNZHILIAN_GM = 3,
  APP_TYPE_TSL = 4,
  APP_TYPE_FACE = 5,
  JgTempType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JgTempType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JgTempType_IsValid(int value);
const JgTempType JgTempType_MIN = APP_TYPE_TEMPUNDEFINE;
const JgTempType JgTempType_MAX = APP_TYPE_FACE;
const int JgTempType_ARRAYSIZE = JgTempType_MAX + 1;

const ::google::protobuf::EnumDescriptor* JgTempType_descriptor();
inline const ::std::string& JgTempType_Name(JgTempType value) {
  return ::google::protobuf::internal::NameOfEnum(
    JgTempType_descriptor(), value);
}
inline bool JgTempType_Parse(
    const ::std::string& name, JgTempType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JgTempType>(
    JgTempType_descriptor(), name, value);
}
enum AppType {
  APP_TYPE_DEFINE = 0,
  APP_TYPE_MANAGER = 1,
  APP_TYPE_MAIN = 2,
  APP_TYPE_NEUTRAL = 3,
  APP_TYPE_ZNYJ = 4,
  AppType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AppType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AppType_IsValid(int value);
const AppType AppType_MIN = APP_TYPE_DEFINE;
const AppType AppType_MAX = APP_TYPE_ZNYJ;
const int AppType_ARRAYSIZE = AppType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AppType_descriptor();
inline const ::std::string& AppType_Name(AppType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AppType_descriptor(), value);
}
inline bool AppType_Parse(
    const ::std::string& name, AppType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppType>(
    AppType_descriptor(), name, value);
}
// ===================================================================

class SystemCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SystemCode) */ {
 public:
  SystemCode();
  virtual ~SystemCode();

  SystemCode(const SystemCode& from);

  inline SystemCode& operator=(const SystemCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemCode(SystemCode&& from) noexcept
    : SystemCode() {
    *this = ::std::move(from);
  }

  inline SystemCode& operator=(SystemCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemCode* internal_default_instance() {
    return reinterpret_cast<const SystemCode*>(
               &_SystemCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SystemCode* other);
  friend void swap(SystemCode& a, SystemCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemCode* New() const final {
    return CreateMaybeMessage<SystemCode>(NULL);
  }

  SystemCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemCode& from);
  void MergeFrom(const SystemCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SystemCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class H2SRequeseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.H2SRequeseData) */ {
 public:
  H2SRequeseData();
  virtual ~H2SRequeseData();

  H2SRequeseData(const H2SRequeseData& from);

  inline H2SRequeseData& operator=(const H2SRequeseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  H2SRequeseData(H2SRequeseData&& from) noexcept
    : H2SRequeseData() {
    *this = ::std::move(from);
  }

  inline H2SRequeseData& operator=(H2SRequeseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const H2SRequeseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const H2SRequeseData* internal_default_instance() {
    return reinterpret_cast<const H2SRequeseData*>(
               &_H2SRequeseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(H2SRequeseData* other);
  friend void swap(H2SRequeseData& a, H2SRequeseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline H2SRequeseData* New() const final {
    return CreateMaybeMessage<H2SRequeseData>(NULL);
  }

  H2SRequeseData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<H2SRequeseData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const H2SRequeseData& from);
  void MergeFrom(const H2SRequeseData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H2SRequeseData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 DBId = 2;
  void clear_dbid();
  static const int kDBIdFieldNumber = 2;
  ::google::protobuf::uint64 dbid() const;
  void set_dbid(::google::protobuf::uint64 value);

  // int32 ActionType = 1;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 1;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.H2SRequeseData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 dbid_;
  ::google::protobuf::int32 actiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceHeartRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceHeartRecord) */ {
 public:
  SFrameDeviceHeartRecord();
  virtual ~SFrameDeviceHeartRecord();

  SFrameDeviceHeartRecord(const SFrameDeviceHeartRecord& from);

  inline SFrameDeviceHeartRecord& operator=(const SFrameDeviceHeartRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceHeartRecord(SFrameDeviceHeartRecord&& from) noexcept
    : SFrameDeviceHeartRecord() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceHeartRecord& operator=(SFrameDeviceHeartRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceHeartRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceHeartRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceHeartRecord*>(
               &_SFrameDeviceHeartRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SFrameDeviceHeartRecord* other);
  friend void swap(SFrameDeviceHeartRecord& a, SFrameDeviceHeartRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceHeartRecord* New() const final {
    return CreateMaybeMessage<SFrameDeviceHeartRecord>(NULL);
  }

  SFrameDeviceHeartRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceHeartRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceHeartRecord& from);
  void MergeFrom(const SFrameDeviceHeartRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceHeartRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DeviceHeartRecord DeviceHeartRecordlist = 1;
  int deviceheartrecordlist_size() const;
  void clear_deviceheartrecordlist();
  static const int kDeviceHeartRecordlistFieldNumber = 1;
  ::ServerProtocol::DeviceHeartRecord* mutable_deviceheartrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceHeartRecord >*
      mutable_deviceheartrecordlist();
  const ::ServerProtocol::DeviceHeartRecord& deviceheartrecordlist(int index) const;
  ::ServerProtocol::DeviceHeartRecord* add_deviceheartrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceHeartRecord >&
      deviceheartrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceHeartRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceHeartRecord > deviceheartrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceHeartRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceHeartRecord) */ {
 public:
  DeviceHeartRecord();
  virtual ~DeviceHeartRecord();

  DeviceHeartRecord(const DeviceHeartRecord& from);

  inline DeviceHeartRecord& operator=(const DeviceHeartRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceHeartRecord(DeviceHeartRecord&& from) noexcept
    : DeviceHeartRecord() {
    *this = ::std::move(from);
  }

  inline DeviceHeartRecord& operator=(DeviceHeartRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceHeartRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceHeartRecord* internal_default_instance() {
    return reinterpret_cast<const DeviceHeartRecord*>(
               &_DeviceHeartRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeviceHeartRecord* other);
  friend void swap(DeviceHeartRecord& a, DeviceHeartRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceHeartRecord* New() const final {
    return CreateMaybeMessage<DeviceHeartRecord>(NULL);
  }

  DeviceHeartRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceHeartRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceHeartRecord& from);
  void MergeFrom(const DeviceHeartRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceHeartRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 ModifyTime = 3;
  void clear_modifytime();
  static const int kModifyTimeFieldNumber = 3;
  ::google::protobuf::uint64 modifytime() const;
  void set_modifytime(::google::protobuf::uint64 value);

  // int32 Value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // int32 ActionType = 5;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 5;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceHeartRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 modifytime_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 actiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameHmRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameHmRecord) */ {
 public:
  SFrameHmRecord();
  virtual ~SFrameHmRecord();

  SFrameHmRecord(const SFrameHmRecord& from);

  inline SFrameHmRecord& operator=(const SFrameHmRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameHmRecord(SFrameHmRecord&& from) noexcept
    : SFrameHmRecord() {
    *this = ::std::move(from);
  }

  inline SFrameHmRecord& operator=(SFrameHmRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameHmRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameHmRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameHmRecord*>(
               &_SFrameHmRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SFrameHmRecord* other);
  friend void swap(SFrameHmRecord& a, SFrameHmRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameHmRecord* New() const final {
    return CreateMaybeMessage<SFrameHmRecord>(NULL);
  }

  SFrameHmRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameHmRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameHmRecord& from);
  void MergeFrom(const SFrameHmRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameHmRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.HmRecord HmRecordlist = 1;
  int hmrecordlist_size() const;
  void clear_hmrecordlist();
  static const int kHmRecordlistFieldNumber = 1;
  ::ServerProtocol::HmRecord* mutable_hmrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::HmRecord >*
      mutable_hmrecordlist();
  const ::ServerProtocol::HmRecord& hmrecordlist(int index) const;
  ::ServerProtocol::HmRecord* add_hmrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::HmRecord >&
      hmrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameHmRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::HmRecord > hmrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.HmRecord) */ {
 public:
  HmRecord();
  virtual ~HmRecord();

  HmRecord(const HmRecord& from);

  inline HmRecord& operator=(const HmRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmRecord(HmRecord&& from) noexcept
    : HmRecord() {
    *this = ::std::move(from);
  }

  inline HmRecord& operator=(HmRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmRecord* internal_default_instance() {
    return reinterpret_cast<const HmRecord*>(
               &_HmRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HmRecord* other);
  friend void swap(HmRecord& a, HmRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmRecord* New() const final {
    return CreateMaybeMessage<HmRecord>(NULL);
  }

  HmRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmRecord& from);
  void MergeFrom(const HmRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string GwMac = 3;
  void clear_gwmac();
  static const int kGwMacFieldNumber = 3;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const char* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 UserId = 4;
  void clear_userid();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 Time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int64 BeginTime = 7;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 7;
  ::google::protobuf::int64 begintime() const;
  void set_begintime(::google::protobuf::int64 value);

  // int32 State = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 ActionType = 9;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 9;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // int64 EndTime = 8;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 8;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.HmRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 actiontype_;
  ::google::protobuf::int64 endtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFirmwareVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFirmwareVersion) */ {
 public:
  SFrameFirmwareVersion();
  virtual ~SFrameFirmwareVersion();

  SFrameFirmwareVersion(const SFrameFirmwareVersion& from);

  inline SFrameFirmwareVersion& operator=(const SFrameFirmwareVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFirmwareVersion(SFrameFirmwareVersion&& from) noexcept
    : SFrameFirmwareVersion() {
    *this = ::std::move(from);
  }

  inline SFrameFirmwareVersion& operator=(SFrameFirmwareVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFirmwareVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFirmwareVersion* internal_default_instance() {
    return reinterpret_cast<const SFrameFirmwareVersion*>(
               &_SFrameFirmwareVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SFrameFirmwareVersion* other);
  friend void swap(SFrameFirmwareVersion& a, SFrameFirmwareVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFirmwareVersion* New() const final {
    return CreateMaybeMessage<SFrameFirmwareVersion>(NULL);
  }

  SFrameFirmwareVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFirmwareVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFirmwareVersion& from);
  void MergeFrom(const SFrameFirmwareVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFirmwareVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DownUrl = 1;
  void clear_downurl();
  static const int kDownUrlFieldNumber = 1;
  const ::std::string& downurl() const;
  void set_downurl(const ::std::string& value);
  #if LANG_CXX11
  void set_downurl(::std::string&& value);
  #endif
  void set_downurl(const char* value);
  void set_downurl(const char* value, size_t size);
  ::std::string* mutable_downurl();
  ::std::string* release_downurl();
  void set_allocated_downurl(::std::string* downurl);

  // uint64 VersionID = 2;
  void clear_versionid();
  static const int kVersionIDFieldNumber = 2;
  ::google::protobuf::uint64 versionid() const;
  void set_versionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFirmwareVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr downurl_;
  ::google::protobuf::uint64 versionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFirmwareVersionAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFirmwareVersionAnswer) */ {
 public:
  SFrameFirmwareVersionAnswer();
  virtual ~SFrameFirmwareVersionAnswer();

  SFrameFirmwareVersionAnswer(const SFrameFirmwareVersionAnswer& from);

  inline SFrameFirmwareVersionAnswer& operator=(const SFrameFirmwareVersionAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFirmwareVersionAnswer(SFrameFirmwareVersionAnswer&& from) noexcept
    : SFrameFirmwareVersionAnswer() {
    *this = ::std::move(from);
  }

  inline SFrameFirmwareVersionAnswer& operator=(SFrameFirmwareVersionAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFirmwareVersionAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFirmwareVersionAnswer* internal_default_instance() {
    return reinterpret_cast<const SFrameFirmwareVersionAnswer*>(
               &_SFrameFirmwareVersionAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SFrameFirmwareVersionAnswer* other);
  friend void swap(SFrameFirmwareVersionAnswer& a, SFrameFirmwareVersionAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFirmwareVersionAnswer* New() const final {
    return CreateMaybeMessage<SFrameFirmwareVersionAnswer>(NULL);
  }

  SFrameFirmwareVersionAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFirmwareVersionAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFirmwareVersionAnswer& from);
  void MergeFrom(const SFrameFirmwareVersionAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFirmwareVersionAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ProductName = 2;
  void clear_productname();
  static const int kProductNameFieldNumber = 2;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  #if LANG_CXX11
  void set_productname(::std::string&& value);
  #endif
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // string Model = 3;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // string Manufactory = 4;
  void clear_manufactory();
  static const int kManufactoryFieldNumber = 4;
  const ::std::string& manufactory() const;
  void set_manufactory(const ::std::string& value);
  #if LANG_CXX11
  void set_manufactory(::std::string&& value);
  #endif
  void set_manufactory(const char* value);
  void set_manufactory(const char* value, size_t size);
  ::std::string* mutable_manufactory();
  ::std::string* release_manufactory();
  void set_allocated_manufactory(::std::string* manufactory);

  // string DeviceType = 5;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 5;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // string DevicePn = 6;
  void clear_devicepn();
  static const int kDevicePnFieldNumber = 6;
  const ::std::string& devicepn() const;
  void set_devicepn(const ::std::string& value);
  #if LANG_CXX11
  void set_devicepn(::std::string&& value);
  #endif
  void set_devicepn(const char* value);
  void set_devicepn(const char* value, size_t size);
  ::std::string* mutable_devicepn();
  ::std::string* release_devicepn();
  void set_allocated_devicepn(::std::string* devicepn);

  // uint64 VersionID = 1;
  void clear_versionid();
  static const int kVersionIDFieldNumber = 1;
  ::google::protobuf::uint64 versionid() const;
  void set_versionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFirmwareVersionAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr manufactory_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::internal::ArenaStringPtr devicepn_;
  ::google::protobuf::uint64 versionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameNBAIOT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameNBAIOT) */ {
 public:
  SFrameNBAIOT();
  virtual ~SFrameNBAIOT();

  SFrameNBAIOT(const SFrameNBAIOT& from);

  inline SFrameNBAIOT& operator=(const SFrameNBAIOT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameNBAIOT(SFrameNBAIOT&& from) noexcept
    : SFrameNBAIOT() {
    *this = ::std::move(from);
  }

  inline SFrameNBAIOT& operator=(SFrameNBAIOT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameNBAIOT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameNBAIOT* internal_default_instance() {
    return reinterpret_cast<const SFrameNBAIOT*>(
               &_SFrameNBAIOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SFrameNBAIOT* other);
  friend void swap(SFrameNBAIOT& a, SFrameNBAIOT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameNBAIOT* New() const final {
    return CreateMaybeMessage<SFrameNBAIOT>(NULL);
  }

  SFrameNBAIOT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameNBAIOT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameNBAIOT& from);
  void MergeFrom(const SFrameNBAIOT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameNBAIOT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string Imei = 3;
  void clear_imei();
  static const int kImeiFieldNumber = 3;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // string resid = 4;
  void clear_resid();
  static const int kResidFieldNumber = 4;
  const ::std::string& resid() const;
  void set_resid(const ::std::string& value);
  #if LANG_CXX11
  void set_resid(::std::string&& value);
  #endif
  void set_resid(const char* value);
  void set_resid(const char* value, size_t size);
  ::std::string* mutable_resid();
  ::std::string* release_resid();
  void set_allocated_resid(::std::string* resid);

  // uint64 CardsAreaDeviceID = 1;
  void clear_cardsareadeviceid();
  static const int kCardsAreaDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 cardsareadeviceid() const;
  void set_cardsareadeviceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameNBAIOT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr resid_;
  ::google::protobuf::uint64 cardsareadeviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameNBAIOTAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameNBAIOTAnswer) */ {
 public:
  SFrameNBAIOTAnswer();
  virtual ~SFrameNBAIOTAnswer();

  SFrameNBAIOTAnswer(const SFrameNBAIOTAnswer& from);

  inline SFrameNBAIOTAnswer& operator=(const SFrameNBAIOTAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameNBAIOTAnswer(SFrameNBAIOTAnswer&& from) noexcept
    : SFrameNBAIOTAnswer() {
    *this = ::std::move(from);
  }

  inline SFrameNBAIOTAnswer& operator=(SFrameNBAIOTAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameNBAIOTAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameNBAIOTAnswer* internal_default_instance() {
    return reinterpret_cast<const SFrameNBAIOTAnswer*>(
               &_SFrameNBAIOTAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SFrameNBAIOTAnswer* other);
  friend void swap(SFrameNBAIOTAnswer& a, SFrameNBAIOTAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameNBAIOTAnswer* New() const final {
    return CreateMaybeMessage<SFrameNBAIOTAnswer>(NULL);
  }

  SFrameNBAIOTAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameNBAIOTAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameNBAIOTAnswer& from);
  void MergeFrom(const SFrameNBAIOTAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameNBAIOTAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 CardsAreaDeviceID = 2;
  void clear_cardsareadeviceid();
  static const int kCardsAreaDeviceIDFieldNumber = 2;
  ::google::protobuf::uint64 cardsareadeviceid() const;
  void set_cardsareadeviceid(::google::protobuf::uint64 value);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameNBAIOTAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cardsareadeviceid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameNBWhiteList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameNBWhiteList) */ {
 public:
  SFrameNBWhiteList();
  virtual ~SFrameNBWhiteList();

  SFrameNBWhiteList(const SFrameNBWhiteList& from);

  inline SFrameNBWhiteList& operator=(const SFrameNBWhiteList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameNBWhiteList(SFrameNBWhiteList&& from) noexcept
    : SFrameNBWhiteList() {
    *this = ::std::move(from);
  }

  inline SFrameNBWhiteList& operator=(SFrameNBWhiteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameNBWhiteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameNBWhiteList* internal_default_instance() {
    return reinterpret_cast<const SFrameNBWhiteList*>(
               &_SFrameNBWhiteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SFrameNBWhiteList* other);
  friend void swap(SFrameNBWhiteList& a, SFrameNBWhiteList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameNBWhiteList* New() const final {
    return CreateMaybeMessage<SFrameNBWhiteList>(NULL);
  }

  SFrameNBWhiteList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameNBWhiteList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameNBWhiteList& from);
  void MergeFrom(const SFrameNBWhiteList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameNBWhiteList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string Imei = 3;
  void clear_imei();
  static const int kImeiFieldNumber = 3;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // string resid = 4;
  void clear_resid();
  static const int kResidFieldNumber = 4;
  const ::std::string& resid() const;
  void set_resid(const ::std::string& value);
  #if LANG_CXX11
  void set_resid(::std::string&& value);
  #endif
  void set_resid(const char* value);
  void set_resid(const char* value, size_t size);
  ::std::string* mutable_resid();
  ::std::string* release_resid();
  void set_allocated_resid(::std::string* resid);

  // uint64 CardsAreaDeviceID = 1;
  void clear_cardsareadeviceid();
  static const int kCardsAreaDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 cardsareadeviceid() const;
  void set_cardsareadeviceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameNBWhiteList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr resid_;
  ::google::protobuf::uint64 cardsareadeviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameNBWhiteListAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameNBWhiteListAnswer) */ {
 public:
  SFrameNBWhiteListAnswer();
  virtual ~SFrameNBWhiteListAnswer();

  SFrameNBWhiteListAnswer(const SFrameNBWhiteListAnswer& from);

  inline SFrameNBWhiteListAnswer& operator=(const SFrameNBWhiteListAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameNBWhiteListAnswer(SFrameNBWhiteListAnswer&& from) noexcept
    : SFrameNBWhiteListAnswer() {
    *this = ::std::move(from);
  }

  inline SFrameNBWhiteListAnswer& operator=(SFrameNBWhiteListAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameNBWhiteListAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameNBWhiteListAnswer* internal_default_instance() {
    return reinterpret_cast<const SFrameNBWhiteListAnswer*>(
               &_SFrameNBWhiteListAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SFrameNBWhiteListAnswer* other);
  friend void swap(SFrameNBWhiteListAnswer& a, SFrameNBWhiteListAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameNBWhiteListAnswer* New() const final {
    return CreateMaybeMessage<SFrameNBWhiteListAnswer>(NULL);
  }

  SFrameNBWhiteListAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameNBWhiteListAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameNBWhiteListAnswer& from);
  void MergeFrom(const SFrameNBWhiteListAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameNBWhiteListAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 CardsAreaDeviceID = 2;
  void clear_cardsareadeviceid();
  static const int kCardsAreaDeviceIDFieldNumber = 2;
  ::google::protobuf::uint64 cardsareadeviceid() const;
  void set_cardsareadeviceid(::google::protobuf::uint64 value);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameNBWhiteListAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cardsareadeviceid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFaceRecognition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFaceRecognition) */ {
 public:
  SFrameFaceRecognition();
  virtual ~SFrameFaceRecognition();

  SFrameFaceRecognition(const SFrameFaceRecognition& from);

  inline SFrameFaceRecognition& operator=(const SFrameFaceRecognition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFaceRecognition(SFrameFaceRecognition&& from) noexcept
    : SFrameFaceRecognition() {
    *this = ::std::move(from);
  }

  inline SFrameFaceRecognition& operator=(SFrameFaceRecognition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFaceRecognition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFaceRecognition* internal_default_instance() {
    return reinterpret_cast<const SFrameFaceRecognition*>(
               &_SFrameFaceRecognition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SFrameFaceRecognition* other);
  friend void swap(SFrameFaceRecognition& a, SFrameFaceRecognition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFaceRecognition* New() const final {
    return CreateMaybeMessage<SFrameFaceRecognition>(NULL);
  }

  SFrameFaceRecognition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFaceRecognition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFaceRecognition& from);
  void MergeFrom(const SFrameFaceRecognition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFaceRecognition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DownUrl = 1;
  void clear_downurl();
  static const int kDownUrlFieldNumber = 1;
  const ::std::string& downurl() const;
  void set_downurl(const ::std::string& value);
  #if LANG_CXX11
  void set_downurl(::std::string&& value);
  #endif
  void set_downurl(const char* value);
  void set_downurl(const char* value, size_t size);
  ::std::string* mutable_downurl();
  ::std::string* release_downurl();
  void set_allocated_downurl(::std::string* downurl);

  // uint64 UserID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFaceRecognition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr downurl_;
  ::google::protobuf::uint64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFaceRecognitionAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFaceRecognitionAnswer) */ {
 public:
  SFrameFaceRecognitionAnswer();
  virtual ~SFrameFaceRecognitionAnswer();

  SFrameFaceRecognitionAnswer(const SFrameFaceRecognitionAnswer& from);

  inline SFrameFaceRecognitionAnswer& operator=(const SFrameFaceRecognitionAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFaceRecognitionAnswer(SFrameFaceRecognitionAnswer&& from) noexcept
    : SFrameFaceRecognitionAnswer() {
    *this = ::std::move(from);
  }

  inline SFrameFaceRecognitionAnswer& operator=(SFrameFaceRecognitionAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFaceRecognitionAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFaceRecognitionAnswer* internal_default_instance() {
    return reinterpret_cast<const SFrameFaceRecognitionAnswer*>(
               &_SFrameFaceRecognitionAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SFrameFaceRecognitionAnswer* other);
  friend void swap(SFrameFaceRecognitionAnswer& a, SFrameFaceRecognitionAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFaceRecognitionAnswer* New() const final {
    return CreateMaybeMessage<SFrameFaceRecognitionAnswer>(NULL);
  }

  SFrameFaceRecognitionAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFaceRecognitionAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFaceRecognitionAnswer& from);
  void MergeFrom(const SFrameFaceRecognitionAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFaceRecognitionAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string CharacteristicCodeUrl = 1;
  void clear_characteristiccodeurl();
  static const int kCharacteristicCodeUrlFieldNumber = 1;
  const ::std::string& characteristiccodeurl() const;
  void set_characteristiccodeurl(const ::std::string& value);
  #if LANG_CXX11
  void set_characteristiccodeurl(::std::string&& value);
  #endif
  void set_characteristiccodeurl(const char* value);
  void set_characteristiccodeurl(const char* value, size_t size);
  ::std::string* mutable_characteristiccodeurl();
  ::std::string* release_characteristiccodeurl();
  void set_allocated_characteristiccodeurl(::std::string* characteristiccodeurl);

  // uint64 UserID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFaceRecognitionAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr characteristiccodeurl_;
  ::google::protobuf::uint64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameJgPushRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameJgPushRecord) */ {
 public:
  SFrameJgPushRecord();
  virtual ~SFrameJgPushRecord();

  SFrameJgPushRecord(const SFrameJgPushRecord& from);

  inline SFrameJgPushRecord& operator=(const SFrameJgPushRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameJgPushRecord(SFrameJgPushRecord&& from) noexcept
    : SFrameJgPushRecord() {
    *this = ::std::move(from);
  }

  inline SFrameJgPushRecord& operator=(SFrameJgPushRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameJgPushRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameJgPushRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameJgPushRecord*>(
               &_SFrameJgPushRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SFrameJgPushRecord* other);
  friend void swap(SFrameJgPushRecord& a, SFrameJgPushRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameJgPushRecord* New() const final {
    return CreateMaybeMessage<SFrameJgPushRecord>(NULL);
  }

  SFrameJgPushRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameJgPushRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameJgPushRecord& from);
  void MergeFrom(const SFrameJgPushRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameJgPushRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.JgPushRecord JgPushRecordlist = 1;
  int jgpushrecordlist_size() const;
  void clear_jgpushrecordlist();
  static const int kJgPushRecordlistFieldNumber = 1;
  ::ServerProtocol::JgPushRecord* mutable_jgpushrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::JgPushRecord >*
      mutable_jgpushrecordlist();
  const ::ServerProtocol::JgPushRecord& jgpushrecordlist(int index) const;
  ::ServerProtocol::JgPushRecord* add_jgpushrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::JgPushRecord >&
      jgpushrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameJgPushRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::JgPushRecord > jgpushrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JgPushRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.JgPushRecord) */ {
 public:
  JgPushRecord();
  virtual ~JgPushRecord();

  JgPushRecord(const JgPushRecord& from);

  inline JgPushRecord& operator=(const JgPushRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JgPushRecord(JgPushRecord&& from) noexcept
    : JgPushRecord() {
    *this = ::std::move(from);
  }

  inline JgPushRecord& operator=(JgPushRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JgPushRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JgPushRecord* internal_default_instance() {
    return reinterpret_cast<const JgPushRecord*>(
               &_JgPushRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(JgPushRecord* other);
  friend void swap(JgPushRecord& a, JgPushRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JgPushRecord* New() const final {
    return CreateMaybeMessage<JgPushRecord>(NULL);
  }

  JgPushRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JgPushRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JgPushRecord& from);
  void MergeFrom(const JgPushRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JgPushRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alert = 4;
  void clear_alert();
  static const int kAlertFieldNumber = 4;
  const ::std::string& alert() const;
  void set_alert(const ::std::string& value);
  #if LANG_CXX11
  void set_alert(::std::string&& value);
  #endif
  void set_alert(const char* value);
  void set_alert(const char* value, size_t size);
  ::std::string* mutable_alert();
  ::std::string* release_alert();
  void set_allocated_alert(::std::string* alert);

  // string Title = 5;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string Content = 6;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string ContentTitle = 7;
  void clear_contenttitle();
  static const int kContentTitleFieldNumber = 7;
  const ::std::string& contenttitle() const;
  void set_contenttitle(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttitle(::std::string&& value);
  #endif
  void set_contenttitle(const char* value);
  void set_contenttitle(const char* value, size_t size);
  ::std::string* mutable_contenttitle();
  ::std::string* release_contenttitle();
  void set_allocated_contenttitle(::std::string* contenttitle);

  // string TagAlias = 8;
  void clear_tagalias();
  static const int kTagAliasFieldNumber = 8;
  const ::std::string& tagalias() const;
  void set_tagalias(const ::std::string& value);
  #if LANG_CXX11
  void set_tagalias(::std::string&& value);
  #endif
  void set_tagalias(const char* value);
  void set_tagalias(const char* value, size_t size);
  ::std::string* mutable_tagalias();
  ::std::string* release_tagalias();
  void set_allocated_tagalias(::std::string* tagalias);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 PushType = 2;
  void clear_pushtype();
  static const int kPushTypeFieldNumber = 2;
  ::google::protobuf::int32 pushtype() const;
  void set_pushtype(::google::protobuf::int32 value);

  // int32 ActionType = 3;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 3;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // int64 PushTime = 10;
  void clear_pushtime();
  static const int kPushTimeFieldNumber = 10;
  ::google::protobuf::int64 pushtime() const;
  void set_pushtime(::google::protobuf::int64 value);

  // int32 PushAppType = 9;
  void clear_pushapptype();
  static const int kPushAppTypeFieldNumber = 9;
  ::google::protobuf::int32 pushapptype() const;
  void set_pushapptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.JgPushRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alert_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr contenttitle_;
  ::google::protobuf::internal::ArenaStringPtr tagalias_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 pushtype_;
  ::google::protobuf::int32 actiontype_;
  ::google::protobuf::int64 pushtime_;
  ::google::protobuf::int32 pushapptype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameVersionRangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameVersionRangle) */ {
 public:
  SFrameVersionRangle();
  virtual ~SFrameVersionRangle();

  SFrameVersionRangle(const SFrameVersionRangle& from);

  inline SFrameVersionRangle& operator=(const SFrameVersionRangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameVersionRangle(SFrameVersionRangle&& from) noexcept
    : SFrameVersionRangle() {
    *this = ::std::move(from);
  }

  inline SFrameVersionRangle& operator=(SFrameVersionRangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameVersionRangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameVersionRangle* internal_default_instance() {
    return reinterpret_cast<const SFrameVersionRangle*>(
               &_SFrameVersionRangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SFrameVersionRangle* other);
  friend void swap(SFrameVersionRangle& a, SFrameVersionRangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameVersionRangle* New() const final {
    return CreateMaybeMessage<SFrameVersionRangle>(NULL);
  }

  SFrameVersionRangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameVersionRangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameVersionRangle& from);
  void MergeFrom(const SFrameVersionRangle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameVersionRangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.VersionRangle VersionRanglelist = 1;
  int versionranglelist_size() const;
  void clear_versionranglelist();
  static const int kVersionRanglelistFieldNumber = 1;
  ::ServerProtocol::VersionRangle* mutable_versionranglelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::VersionRangle >*
      mutable_versionranglelist();
  const ::ServerProtocol::VersionRangle& versionranglelist(int index) const;
  ::ServerProtocol::VersionRangle* add_versionranglelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::VersionRangle >&
      versionranglelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameVersionRangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::VersionRangle > versionranglelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionRangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.VersionRangle) */ {
 public:
  VersionRangle();
  virtual ~VersionRangle();

  VersionRangle(const VersionRangle& from);

  inline VersionRangle& operator=(const VersionRangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionRangle(VersionRangle&& from) noexcept
    : VersionRangle() {
    *this = ::std::move(from);
  }

  inline VersionRangle& operator=(VersionRangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionRangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRangle* internal_default_instance() {
    return reinterpret_cast<const VersionRangle*>(
               &_VersionRangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(VersionRangle* other);
  friend void swap(VersionRangle& a, VersionRangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionRangle* New() const final {
    return CreateMaybeMessage<VersionRangle>(NULL);
  }

  VersionRangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionRangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionRangle& from);
  void MergeFrom(const VersionRangle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 VerID = 2;
  void clear_verid();
  static const int kVerIDFieldNumber = 2;
  ::google::protobuf::uint64 verid() const;
  void set_verid(::google::protobuf::uint64 value);

  // uint64 UserID = 3;
  void clear_userid();
  static const int kUserIDFieldNumber = 3;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 UserType = 5;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 5;
  ::google::protobuf::int32 usertype() const;
  void set_usertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.VersionRangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 verid_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 usertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameVersion) */ {
 public:
  SFrameVersion();
  virtual ~SFrameVersion();

  SFrameVersion(const SFrameVersion& from);

  inline SFrameVersion& operator=(const SFrameVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameVersion(SFrameVersion&& from) noexcept
    : SFrameVersion() {
    *this = ::std::move(from);
  }

  inline SFrameVersion& operator=(SFrameVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameVersion* internal_default_instance() {
    return reinterpret_cast<const SFrameVersion*>(
               &_SFrameVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SFrameVersion* other);
  friend void swap(SFrameVersion& a, SFrameVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameVersion* New() const final {
    return CreateMaybeMessage<SFrameVersion>(NULL);
  }

  SFrameVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameVersion& from);
  void MergeFrom(const SFrameVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.Version Versionlist = 1;
  int versionlist_size() const;
  void clear_versionlist();
  static const int kVersionlistFieldNumber = 1;
  ::ServerProtocol::Version* mutable_versionlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Version >*
      mutable_versionlist();
  const ::ServerProtocol::Version& versionlist(int index) const;
  ::ServerProtocol::Version* add_versionlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Version >&
      versionlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Version > versionlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Version : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.Version) */ {
 public:
  Version();
  virtual ~Version();

  Version(const Version& from);

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Version* other);
  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(NULL);
  }

  Version* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Url = 6;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string Log = 10;
  void clear_log();
  static const int kLogFieldNumber = 10;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // string ProductName = 13;
  void clear_productname();
  static const int kProductNameFieldNumber = 13;
  const ::std::string& productname() const;
  void set_productname(const ::std::string& value);
  #if LANG_CXX11
  void set_productname(::std::string&& value);
  #endif
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  ::std::string* mutable_productname();
  ::std::string* release_productname();
  void set_allocated_productname(::std::string* productname);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 ProductType = 2;
  void clear_producttype();
  static const int kProductTypeFieldNumber = 2;
  ::google::protobuf::int32 producttype() const;
  void set_producttype(::google::protobuf::int32 value);

  // int32 ReleaseMode = 3;
  void clear_releasemode();
  static const int kReleaseModeFieldNumber = 3;
  ::google::protobuf::int32 releasemode() const;
  void set_releasemode(::google::protobuf::int32 value);

  // int32 MandatoryState = 4;
  void clear_mandatorystate();
  static const int kMandatoryStateFieldNumber = 4;
  ::google::protobuf::int32 mandatorystate() const;
  void set_mandatorystate(::google::protobuf::int32 value);

  // int32 UpdateRange = 5;
  void clear_updaterange();
  static const int kUpdateRangeFieldNumber = 5;
  ::google::protobuf::int32 updaterange() const;
  void set_updaterange(::google::protobuf::int32 value);

  // int64 VersionCode = 7;
  void clear_versioncode();
  static const int kVersionCodeFieldNumber = 7;
  ::google::protobuf::int64 versioncode() const;
  void set_versioncode(::google::protobuf::int64 value);

  // int64 FileSize = 8;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 8;
  ::google::protobuf::int64 filesize() const;
  void set_filesize(::google::protobuf::int64 value);

  // int64 UpTime = 9;
  void clear_uptime();
  static const int kUpTimeFieldNumber = 9;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // int32 State = 11;
  void clear_state();
  static const int kStateFieldNumber = 11;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 UpdateCount = 12;
  void clear_updatecount();
  static const int kUpdateCountFieldNumber = 12;
  ::google::protobuf::int32 updatecount() const;
  void set_updatecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.Version)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::internal::ArenaStringPtr productname_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 producttype_;
  ::google::protobuf::int32 releasemode_;
  ::google::protobuf::int32 mandatorystate_;
  ::google::protobuf::int32 updaterange_;
  ::google::protobuf::int64 versioncode_;
  ::google::protobuf::int64 filesize_;
  ::google::protobuf::int64 uptime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 updatecount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameNoCreditEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameNoCreditEquip) */ {
 public:
  SFrameNoCreditEquip();
  virtual ~SFrameNoCreditEquip();

  SFrameNoCreditEquip(const SFrameNoCreditEquip& from);

  inline SFrameNoCreditEquip& operator=(const SFrameNoCreditEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameNoCreditEquip(SFrameNoCreditEquip&& from) noexcept
    : SFrameNoCreditEquip() {
    *this = ::std::move(from);
  }

  inline SFrameNoCreditEquip& operator=(SFrameNoCreditEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameNoCreditEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameNoCreditEquip* internal_default_instance() {
    return reinterpret_cast<const SFrameNoCreditEquip*>(
               &_SFrameNoCreditEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SFrameNoCreditEquip* other);
  friend void swap(SFrameNoCreditEquip& a, SFrameNoCreditEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameNoCreditEquip* New() const final {
    return CreateMaybeMessage<SFrameNoCreditEquip>(NULL);
  }

  SFrameNoCreditEquip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameNoCreditEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameNoCreditEquip& from);
  void MergeFrom(const SFrameNoCreditEquip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameNoCreditEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.NoCreditEquip NoCreditEquiplist = 1;
  int nocreditequiplist_size() const;
  void clear_nocreditequiplist();
  static const int kNoCreditEquiplistFieldNumber = 1;
  ::ServerProtocol::NoCreditEquip* mutable_nocreditequiplist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::NoCreditEquip >*
      mutable_nocreditequiplist();
  const ::ServerProtocol::NoCreditEquip& nocreditequiplist(int index) const;
  ::ServerProtocol::NoCreditEquip* add_nocreditequiplist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::NoCreditEquip >&
      nocreditequiplist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameNoCreditEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::NoCreditEquip > nocreditequiplist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoCreditEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.NoCreditEquip) */ {
 public:
  NoCreditEquip();
  virtual ~NoCreditEquip();

  NoCreditEquip(const NoCreditEquip& from);

  inline NoCreditEquip& operator=(const NoCreditEquip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoCreditEquip(NoCreditEquip&& from) noexcept
    : NoCreditEquip() {
    *this = ::std::move(from);
  }

  inline NoCreditEquip& operator=(NoCreditEquip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoCreditEquip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoCreditEquip* internal_default_instance() {
    return reinterpret_cast<const NoCreditEquip*>(
               &_NoCreditEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(NoCreditEquip* other);
  friend void swap(NoCreditEquip& a, NoCreditEquip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoCreditEquip* New() const final {
    return CreateMaybeMessage<NoCreditEquip>(NULL);
  }

  NoCreditEquip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NoCreditEquip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NoCreditEquip& from);
  void MergeFrom(const NoCreditEquip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoCreditEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string EuipMentFlag = 2;
  void clear_euipmentflag();
  static const int kEuipMentFlagFieldNumber = 2;
  const ::std::string& euipmentflag() const;
  void set_euipmentflag(const ::std::string& value);
  #if LANG_CXX11
  void set_euipmentflag(::std::string&& value);
  #endif
  void set_euipmentflag(const char* value);
  void set_euipmentflag(const char* value, size_t size);
  ::std::string* mutable_euipmentflag();
  ::std::string* release_euipmentflag();
  void set_allocated_euipmentflag(::std::string* euipmentflag);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 UserID = 3;
  void clear_userid();
  static const int kUserIDFieldNumber = 3;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.NoCreditEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr euipmentflag_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameKeyShareRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameKeyShareRecord) */ {
 public:
  SFrameKeyShareRecord();
  virtual ~SFrameKeyShareRecord();

  SFrameKeyShareRecord(const SFrameKeyShareRecord& from);

  inline SFrameKeyShareRecord& operator=(const SFrameKeyShareRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameKeyShareRecord(SFrameKeyShareRecord&& from) noexcept
    : SFrameKeyShareRecord() {
    *this = ::std::move(from);
  }

  inline SFrameKeyShareRecord& operator=(SFrameKeyShareRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameKeyShareRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameKeyShareRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameKeyShareRecord*>(
               &_SFrameKeyShareRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SFrameKeyShareRecord* other);
  friend void swap(SFrameKeyShareRecord& a, SFrameKeyShareRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameKeyShareRecord* New() const final {
    return CreateMaybeMessage<SFrameKeyShareRecord>(NULL);
  }

  SFrameKeyShareRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameKeyShareRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameKeyShareRecord& from);
  void MergeFrom(const SFrameKeyShareRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameKeyShareRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.KeyShareRecord KeyShareRecordlist = 1;
  int keysharerecordlist_size() const;
  void clear_keysharerecordlist();
  static const int kKeyShareRecordlistFieldNumber = 1;
  ::ServerProtocol::KeyShareRecord* mutable_keysharerecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::KeyShareRecord >*
      mutable_keysharerecordlist();
  const ::ServerProtocol::KeyShareRecord& keysharerecordlist(int index) const;
  ::ServerProtocol::KeyShareRecord* add_keysharerecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::KeyShareRecord >&
      keysharerecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameKeyShareRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::KeyShareRecord > keysharerecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyShareRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.KeyShareRecord) */ {
 public:
  KeyShareRecord();
  virtual ~KeyShareRecord();

  KeyShareRecord(const KeyShareRecord& from);

  inline KeyShareRecord& operator=(const KeyShareRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyShareRecord(KeyShareRecord&& from) noexcept
    : KeyShareRecord() {
    *this = ::std::move(from);
  }

  inline KeyShareRecord& operator=(KeyShareRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyShareRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyShareRecord* internal_default_instance() {
    return reinterpret_cast<const KeyShareRecord*>(
               &_KeyShareRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(KeyShareRecord* other);
  friend void swap(KeyShareRecord& a, KeyShareRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyShareRecord* New() const final {
    return CreateMaybeMessage<KeyShareRecord>(NULL);
  }

  KeyShareRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyShareRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyShareRecord& from);
  void MergeFrom(const KeyShareRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyShareRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string KeyID = 2;
  void clear_keyid();
  static const int kKeyIDFieldNumber = 2;
  const ::std::string& keyid() const;
  void set_keyid(const ::std::string& value);
  #if LANG_CXX11
  void set_keyid(::std::string&& value);
  #endif
  void set_keyid(const char* value);
  void set_keyid(const char* value, size_t size);
  ::std::string* mutable_keyid();
  ::std::string* release_keyid();
  void set_allocated_keyid(::std::string* keyid);

  // string Cipher = 3;
  void clear_cipher();
  static const int kCipherFieldNumber = 3;
  const ::std::string& cipher() const;
  void set_cipher(const ::std::string& value);
  #if LANG_CXX11
  void set_cipher(::std::string&& value);
  #endif
  void set_cipher(const char* value);
  void set_cipher(const char* value, size_t size);
  ::std::string* mutable_cipher();
  ::std::string* release_cipher();
  void set_allocated_cipher(::std::string* cipher);

  // string UserFromMobile = 4;
  void clear_userfrommobile();
  static const int kUserFromMobileFieldNumber = 4;
  const ::std::string& userfrommobile() const;
  void set_userfrommobile(const ::std::string& value);
  #if LANG_CXX11
  void set_userfrommobile(::std::string&& value);
  #endif
  void set_userfrommobile(const char* value);
  void set_userfrommobile(const char* value, size_t size);
  ::std::string* mutable_userfrommobile();
  ::std::string* release_userfrommobile();
  void set_allocated_userfrommobile(::std::string* userfrommobile);

  // string UserNameFrom = 5;
  void clear_usernamefrom();
  static const int kUserNameFromFieldNumber = 5;
  const ::std::string& usernamefrom() const;
  void set_usernamefrom(const ::std::string& value);
  #if LANG_CXX11
  void set_usernamefrom(::std::string&& value);
  #endif
  void set_usernamefrom(const char* value);
  void set_usernamefrom(const char* value, size_t size);
  ::std::string* mutable_usernamefrom();
  ::std::string* release_usernamefrom();
  void set_allocated_usernamefrom(::std::string* usernamefrom);

  // string UserTo = 7;
  void clear_userto();
  static const int kUserToFieldNumber = 7;
  const ::std::string& userto() const;
  void set_userto(const ::std::string& value);
  #if LANG_CXX11
  void set_userto(::std::string&& value);
  #endif
  void set_userto(const char* value);
  void set_userto(const char* value, size_t size);
  ::std::string* mutable_userto();
  ::std::string* release_userto();
  void set_allocated_userto(::std::string* userto);

  // string UserNameTo = 8;
  void clear_usernameto();
  static const int kUserNameToFieldNumber = 8;
  const ::std::string& usernameto() const;
  void set_usernameto(const ::std::string& value);
  #if LANG_CXX11
  void set_usernameto(::std::string&& value);
  #endif
  void set_usernameto(const char* value);
  void set_usernameto(const char* value, size_t size);
  ::std::string* mutable_usernameto();
  ::std::string* release_usernameto();
  void set_allocated_usernameto(::std::string* usernameto);

  // string Alias = 9;
  void clear_alias();
  static const int kAliasFieldNumber = 9;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string LockCode = 15;
  void clear_lockcode();
  static const int kLockCodeFieldNumber = 15;
  const ::std::string& lockcode() const;
  void set_lockcode(const ::std::string& value);
  #if LANG_CXX11
  void set_lockcode(::std::string&& value);
  #endif
  void set_lockcode(const char* value);
  void set_lockcode(const char* value, size_t size);
  ::std::string* mutable_lockcode();
  ::std::string* release_lockcode();
  void set_allocated_lockcode(::std::string* lockcode);

  // string GroupName = 21;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 21;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 CountryCode = 6;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 6;
  ::google::protobuf::int32 countrycode() const;
  void set_countrycode(::google::protobuf::int32 value);

  // int32 Type = 10;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int64 StartTime = 12;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 12;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // int32 LockState = 11;
  void clear_lockstate();
  static const int kLockStateFieldNumber = 11;
  ::google::protobuf::int32 lockstate() const;
  void set_lockstate(::google::protobuf::int32 value);

  // int32 IsShareable = 14;
  void clear_isshareable();
  static const int kIsShareableFieldNumber = 14;
  ::google::protobuf::int32 isshareable() const;
  void set_isshareable(::google::protobuf::int32 value);

  // int64 EndTime = 13;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 13;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // int64 CreateTime = 16;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  ::google::protobuf::int64 createtime() const;
  void set_createtime(::google::protobuf::int64 value);

  // int32 IsShow = 17;
  void clear_isshow();
  static const int kIsShowFieldNumber = 17;
  ::google::protobuf::int32 isshow() const;
  void set_isshow(::google::protobuf::int32 value);

  // int32 Sort = 18;
  void clear_sort();
  static const int kSortFieldNumber = 18;
  ::google::protobuf::int32 sort() const;
  void set_sort(::google::protobuf::int32 value);

  // int64 GroupId = 20;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 20;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // int32 IsNeedCheckIn = 19;
  void clear_isneedcheckin();
  static const int kIsNeedCheckInFieldNumber = 19;
  ::google::protobuf::int32 isneedcheckin() const;
  void set_isneedcheckin(::google::protobuf::int32 value);

  // int32 AuthType = 22;
  void clear_authtype();
  static const int kAuthTypeFieldNumber = 22;
  ::google::protobuf::int32 authtype() const;
  void set_authtype(::google::protobuf::int32 value);

  // int32 State = 23;
  void clear_state();
  static const int kStateFieldNumber = 23;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.KeyShareRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr keyid_;
  ::google::protobuf::internal::ArenaStringPtr cipher_;
  ::google::protobuf::internal::ArenaStringPtr userfrommobile_;
  ::google::protobuf::internal::ArenaStringPtr usernamefrom_;
  ::google::protobuf::internal::ArenaStringPtr userto_;
  ::google::protobuf::internal::ArenaStringPtr usernameto_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr lockcode_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 countrycode_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 lockstate_;
  ::google::protobuf::int32 isshareable_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 isshow_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int64 groupid_;
  ::google::protobuf::int32 isneedcheckin_;
  ::google::protobuf::int32 authtype_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDevTypeCribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDevTypeCribe) */ {
 public:
  SFrameDevTypeCribe();
  virtual ~SFrameDevTypeCribe();

  SFrameDevTypeCribe(const SFrameDevTypeCribe& from);

  inline SFrameDevTypeCribe& operator=(const SFrameDevTypeCribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDevTypeCribe(SFrameDevTypeCribe&& from) noexcept
    : SFrameDevTypeCribe() {
    *this = ::std::move(from);
  }

  inline SFrameDevTypeCribe& operator=(SFrameDevTypeCribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDevTypeCribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDevTypeCribe* internal_default_instance() {
    return reinterpret_cast<const SFrameDevTypeCribe*>(
               &_SFrameDevTypeCribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(SFrameDevTypeCribe* other);
  friend void swap(SFrameDevTypeCribe& a, SFrameDevTypeCribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDevTypeCribe* New() const final {
    return CreateMaybeMessage<SFrameDevTypeCribe>(NULL);
  }

  SFrameDevTypeCribe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDevTypeCribe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDevTypeCribe& from);
  void MergeFrom(const SFrameDevTypeCribe& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDevTypeCribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DevTypeCribe DevTypeCribelist = 1;
  int devtypecribelist_size() const;
  void clear_devtypecribelist();
  static const int kDevTypeCribelistFieldNumber = 1;
  ::ServerProtocol::DevTypeCribe* mutable_devtypecribelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DevTypeCribe >*
      mutable_devtypecribelist();
  const ::ServerProtocol::DevTypeCribe& devtypecribelist(int index) const;
  ::ServerProtocol::DevTypeCribe* add_devtypecribelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DevTypeCribe >&
      devtypecribelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDevTypeCribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DevTypeCribe > devtypecribelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DevTypeCribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DevTypeCribe) */ {
 public:
  DevTypeCribe();
  virtual ~DevTypeCribe();

  DevTypeCribe(const DevTypeCribe& from);

  inline DevTypeCribe& operator=(const DevTypeCribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DevTypeCribe(DevTypeCribe&& from) noexcept
    : DevTypeCribe() {
    *this = ::std::move(from);
  }

  inline DevTypeCribe& operator=(DevTypeCribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DevTypeCribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevTypeCribe* internal_default_instance() {
    return reinterpret_cast<const DevTypeCribe*>(
               &_DevTypeCribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DevTypeCribe* other);
  friend void swap(DevTypeCribe& a, DevTypeCribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DevTypeCribe* New() const final {
    return CreateMaybeMessage<DevTypeCribe>(NULL);
  }

  DevTypeCribe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DevTypeCribe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DevTypeCribe& from);
  void MergeFrom(const DevTypeCribe& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevTypeCribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DevCribe = 2;
  void clear_devcribe();
  static const int kDevCribeFieldNumber = 2;
  const ::std::string& devcribe() const;
  void set_devcribe(const ::std::string& value);
  #if LANG_CXX11
  void set_devcribe(::std::string&& value);
  #endif
  void set_devcribe(const char* value);
  void set_devcribe(const char* value, size_t size);
  ::std::string* mutable_devcribe();
  ::std::string* release_devcribe();
  void set_allocated_devcribe(::std::string* devcribe);

  // string Chinese = 3;
  void clear_chinese();
  static const int kChineseFieldNumber = 3;
  const ::std::string& chinese() const;
  void set_chinese(const ::std::string& value);
  #if LANG_CXX11
  void set_chinese(::std::string&& value);
  #endif
  void set_chinese(const char* value);
  void set_chinese(const char* value, size_t size);
  ::std::string* mutable_chinese();
  ::std::string* release_chinese();
  void set_allocated_chinese(::std::string* chinese);

  // string English = 4;
  void clear_english();
  static const int kEnglishFieldNumber = 4;
  const ::std::string& english() const;
  void set_english(const ::std::string& value);
  #if LANG_CXX11
  void set_english(::std::string&& value);
  #endif
  void set_english(const char* value);
  void set_english(const char* value, size_t size);
  ::std::string* mutable_english();
  ::std::string* release_english();
  void set_allocated_english(::std::string* english);

  // string German = 5;
  void clear_german();
  static const int kGermanFieldNumber = 5;
  const ::std::string& german() const;
  void set_german(const ::std::string& value);
  #if LANG_CXX11
  void set_german(::std::string&& value);
  #endif
  void set_german(const char* value);
  void set_german(const char* value, size_t size);
  ::std::string* mutable_german();
  ::std::string* release_german();
  void set_allocated_german(::std::string* german);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 State = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DevTypeCribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devcribe_;
  ::google::protobuf::internal::ArenaStringPtr chinese_;
  ::google::protobuf::internal::ArenaStringPtr english_;
  ::google::protobuf::internal::ArenaStringPtr german_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameCountryCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameCountryCode) */ {
 public:
  SFrameCountryCode();
  virtual ~SFrameCountryCode();

  SFrameCountryCode(const SFrameCountryCode& from);

  inline SFrameCountryCode& operator=(const SFrameCountryCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameCountryCode(SFrameCountryCode&& from) noexcept
    : SFrameCountryCode() {
    *this = ::std::move(from);
  }

  inline SFrameCountryCode& operator=(SFrameCountryCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameCountryCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameCountryCode* internal_default_instance() {
    return reinterpret_cast<const SFrameCountryCode*>(
               &_SFrameCountryCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SFrameCountryCode* other);
  friend void swap(SFrameCountryCode& a, SFrameCountryCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameCountryCode* New() const final {
    return CreateMaybeMessage<SFrameCountryCode>(NULL);
  }

  SFrameCountryCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameCountryCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameCountryCode& from);
  void MergeFrom(const SFrameCountryCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameCountryCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.CountryCode CountryCodelist = 1;
  int countrycodelist_size() const;
  void clear_countrycodelist();
  static const int kCountryCodelistFieldNumber = 1;
  ::ServerProtocol::CountryCode* mutable_countrycodelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CountryCode >*
      mutable_countrycodelist();
  const ::ServerProtocol::CountryCode& countrycodelist(int index) const;
  ::ServerProtocol::CountryCode* add_countrycodelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CountryCode >&
      countrycodelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameCountryCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CountryCode > countrycodelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CountryCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.CountryCode) */ {
 public:
  CountryCode();
  virtual ~CountryCode();

  CountryCode(const CountryCode& from);

  inline CountryCode& operator=(const CountryCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountryCode(CountryCode&& from) noexcept
    : CountryCode() {
    *this = ::std::move(from);
  }

  inline CountryCode& operator=(CountryCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountryCode* internal_default_instance() {
    return reinterpret_cast<const CountryCode*>(
               &_CountryCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(CountryCode* other);
  friend void swap(CountryCode& a, CountryCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountryCode* New() const final {
    return CreateMaybeMessage<CountryCode>(NULL);
  }

  CountryCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CountryCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CountryCode& from);
  void MergeFrom(const CountryCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountryCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 Code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.CountryCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeveloper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeveloper) */ {
 public:
  SFrameDeveloper();
  virtual ~SFrameDeveloper();

  SFrameDeveloper(const SFrameDeveloper& from);

  inline SFrameDeveloper& operator=(const SFrameDeveloper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeveloper(SFrameDeveloper&& from) noexcept
    : SFrameDeveloper() {
    *this = ::std::move(from);
  }

  inline SFrameDeveloper& operator=(SFrameDeveloper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeveloper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeveloper* internal_default_instance() {
    return reinterpret_cast<const SFrameDeveloper*>(
               &_SFrameDeveloper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SFrameDeveloper* other);
  friend void swap(SFrameDeveloper& a, SFrameDeveloper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeveloper* New() const final {
    return CreateMaybeMessage<SFrameDeveloper>(NULL);
  }

  SFrameDeveloper* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeveloper>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeveloper& from);
  void MergeFrom(const SFrameDeveloper& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeveloper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.Developer Developerlist = 1;
  int developerlist_size() const;
  void clear_developerlist();
  static const int kDeveloperlistFieldNumber = 1;
  ::ServerProtocol::Developer* mutable_developerlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Developer >*
      mutable_developerlist();
  const ::ServerProtocol::Developer& developerlist(int index) const;
  ::ServerProtocol::Developer* add_developerlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Developer >&
      developerlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeveloper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Developer > developerlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Developer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.Developer) */ {
 public:
  Developer();
  virtual ~Developer();

  Developer(const Developer& from);

  inline Developer& operator=(const Developer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Developer(Developer&& from) noexcept
    : Developer() {
    *this = ::std::move(from);
  }

  inline Developer& operator=(Developer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Developer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Developer* internal_default_instance() {
    return reinterpret_cast<const Developer*>(
               &_Developer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Developer* other);
  friend void swap(Developer& a, Developer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Developer* New() const final {
    return CreateMaybeMessage<Developer>(NULL);
  }

  Developer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Developer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Developer& from);
  void MergeFrom(const Developer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Developer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Apikey = 3;
  void clear_apikey();
  static const int kApikeyFieldNumber = 3;
  const ::std::string& apikey() const;
  void set_apikey(const ::std::string& value);
  #if LANG_CXX11
  void set_apikey(::std::string&& value);
  #endif
  void set_apikey(const char* value);
  void set_apikey(const char* value, size_t size);
  ::std::string* mutable_apikey();
  ::std::string* release_apikey();
  void set_allocated_apikey(::std::string* apikey);

  // string SecretKey = 4;
  void clear_secretkey();
  static const int kSecretKeyFieldNumber = 4;
  const ::std::string& secretkey() const;
  void set_secretkey(const ::std::string& value);
  #if LANG_CXX11
  void set_secretkey(::std::string&& value);
  #endif
  void set_secretkey(const char* value);
  void set_secretkey(const char* value, size_t size);
  ::std::string* mutable_secretkey();
  ::std::string* release_secretkey();
  void set_allocated_secretkey(::std::string* secretkey);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 Range = 5;
  void clear_range();
  static const int kRangeFieldNumber = 5;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // int32 DeveloperType = 6;
  void clear_developertype();
  static const int kDeveloperTypeFieldNumber = 6;
  ::google::protobuf::int32 developertype() const;
  void set_developertype(::google::protobuf::int32 value);

  // uint64 CreateTime = 7;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  ::google::protobuf::uint64 createtime() const;
  void set_createtime(::google::protobuf::uint64 value);

  // uint64 LastTime = 8;
  void clear_lasttime();
  static const int kLastTimeFieldNumber = 8;
  ::google::protobuf::uint64 lasttime() const;
  void set_lasttime(::google::protobuf::uint64 value);

  // int32 State = 9;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.Developer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr apikey_;
  ::google::protobuf::internal::ArenaStringPtr secretkey_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 range_;
  ::google::protobuf::int32 developertype_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 lasttime_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameWebInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameWebInterface) */ {
 public:
  SFrameWebInterface();
  virtual ~SFrameWebInterface();

  SFrameWebInterface(const SFrameWebInterface& from);

  inline SFrameWebInterface& operator=(const SFrameWebInterface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameWebInterface(SFrameWebInterface&& from) noexcept
    : SFrameWebInterface() {
    *this = ::std::move(from);
  }

  inline SFrameWebInterface& operator=(SFrameWebInterface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameWebInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameWebInterface* internal_default_instance() {
    return reinterpret_cast<const SFrameWebInterface*>(
               &_SFrameWebInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SFrameWebInterface* other);
  friend void swap(SFrameWebInterface& a, SFrameWebInterface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameWebInterface* New() const final {
    return CreateMaybeMessage<SFrameWebInterface>(NULL);
  }

  SFrameWebInterface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameWebInterface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameWebInterface& from);
  void MergeFrom(const SFrameWebInterface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameWebInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.WebInterface WebInterfacelist = 1;
  int webinterfacelist_size() const;
  void clear_webinterfacelist();
  static const int kWebInterfacelistFieldNumber = 1;
  ::ServerProtocol::WebInterface* mutable_webinterfacelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::WebInterface >*
      mutable_webinterfacelist();
  const ::ServerProtocol::WebInterface& webinterfacelist(int index) const;
  ::ServerProtocol::WebInterface* add_webinterfacelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::WebInterface >&
      webinterfacelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameWebInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::WebInterface > webinterfacelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WebInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.WebInterface) */ {
 public:
  WebInterface();
  virtual ~WebInterface();

  WebInterface(const WebInterface& from);

  inline WebInterface& operator=(const WebInterface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebInterface(WebInterface&& from) noexcept
    : WebInterface() {
    *this = ::std::move(from);
  }

  inline WebInterface& operator=(WebInterface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebInterface* internal_default_instance() {
    return reinterpret_cast<const WebInterface*>(
               &_WebInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(WebInterface* other);
  friend void swap(WebInterface& a, WebInterface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebInterface* New() const final {
    return CreateMaybeMessage<WebInterface>(NULL);
  }

  WebInterface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WebInterface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WebInterface& from);
  void MergeFrom(const WebInterface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ApiUrl = 3;
  void clear_apiurl();
  static const int kApiUrlFieldNumber = 3;
  const ::std::string& apiurl() const;
  void set_apiurl(const ::std::string& value);
  #if LANG_CXX11
  void set_apiurl(::std::string&& value);
  #endif
  void set_apiurl(const char* value);
  void set_apiurl(const char* value, size_t size);
  ::std::string* mutable_apiurl();
  ::std::string* release_apiurl();
  void set_allocated_apiurl(::std::string* apiurl);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.WebInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr apiurl_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameTypeApiContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameTypeApiContrast) */ {
 public:
  SFrameTypeApiContrast();
  virtual ~SFrameTypeApiContrast();

  SFrameTypeApiContrast(const SFrameTypeApiContrast& from);

  inline SFrameTypeApiContrast& operator=(const SFrameTypeApiContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameTypeApiContrast(SFrameTypeApiContrast&& from) noexcept
    : SFrameTypeApiContrast() {
    *this = ::std::move(from);
  }

  inline SFrameTypeApiContrast& operator=(SFrameTypeApiContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameTypeApiContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameTypeApiContrast* internal_default_instance() {
    return reinterpret_cast<const SFrameTypeApiContrast*>(
               &_SFrameTypeApiContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SFrameTypeApiContrast* other);
  friend void swap(SFrameTypeApiContrast& a, SFrameTypeApiContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameTypeApiContrast* New() const final {
    return CreateMaybeMessage<SFrameTypeApiContrast>(NULL);
  }

  SFrameTypeApiContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameTypeApiContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameTypeApiContrast& from);
  void MergeFrom(const SFrameTypeApiContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameTypeApiContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.TypeApiContrast TypeApiContrastlist = 1;
  int typeapicontrastlist_size() const;
  void clear_typeapicontrastlist();
  static const int kTypeApiContrastlistFieldNumber = 1;
  ::ServerProtocol::TypeApiContrast* mutable_typeapicontrastlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::TypeApiContrast >*
      mutable_typeapicontrastlist();
  const ::ServerProtocol::TypeApiContrast& typeapicontrastlist(int index) const;
  ::ServerProtocol::TypeApiContrast* add_typeapicontrastlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::TypeApiContrast >&
      typeapicontrastlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameTypeApiContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::TypeApiContrast > typeapicontrastlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeApiContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.TypeApiContrast) */ {
 public:
  TypeApiContrast();
  virtual ~TypeApiContrast();

  TypeApiContrast(const TypeApiContrast& from);

  inline TypeApiContrast& operator=(const TypeApiContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeApiContrast(TypeApiContrast&& from) noexcept
    : TypeApiContrast() {
    *this = ::std::move(from);
  }

  inline TypeApiContrast& operator=(TypeApiContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeApiContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeApiContrast* internal_default_instance() {
    return reinterpret_cast<const TypeApiContrast*>(
               &_TypeApiContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(TypeApiContrast* other);
  friend void swap(TypeApiContrast& a, TypeApiContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeApiContrast* New() const final {
    return CreateMaybeMessage<TypeApiContrast>(NULL);
  }

  TypeApiContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeApiContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TypeApiContrast& from);
  void MergeFrom(const TypeApiContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeApiContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 ApiId = 3;
  void clear_apiid();
  static const int kApiIdFieldNumber = 3;
  ::google::protobuf::uint64 apiid() const;
  void set_apiid(::google::protobuf::uint64 value);

  // int32 DeveloperType = 2;
  void clear_developertype();
  static const int kDeveloperTypeFieldNumber = 2;
  ::google::protobuf::int32 developertype() const;
  void set_developertype(::google::protobuf::int32 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.TypeApiContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 apiid_;
  ::google::protobuf::int32 developertype_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameCardsAreaDeviceContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameCardsAreaDeviceContrast) */ {
 public:
  SFrameCardsAreaDeviceContrast();
  virtual ~SFrameCardsAreaDeviceContrast();

  SFrameCardsAreaDeviceContrast(const SFrameCardsAreaDeviceContrast& from);

  inline SFrameCardsAreaDeviceContrast& operator=(const SFrameCardsAreaDeviceContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameCardsAreaDeviceContrast(SFrameCardsAreaDeviceContrast&& from) noexcept
    : SFrameCardsAreaDeviceContrast() {
    *this = ::std::move(from);
  }

  inline SFrameCardsAreaDeviceContrast& operator=(SFrameCardsAreaDeviceContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameCardsAreaDeviceContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameCardsAreaDeviceContrast* internal_default_instance() {
    return reinterpret_cast<const SFrameCardsAreaDeviceContrast*>(
               &_SFrameCardsAreaDeviceContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(SFrameCardsAreaDeviceContrast* other);
  friend void swap(SFrameCardsAreaDeviceContrast& a, SFrameCardsAreaDeviceContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameCardsAreaDeviceContrast* New() const final {
    return CreateMaybeMessage<SFrameCardsAreaDeviceContrast>(NULL);
  }

  SFrameCardsAreaDeviceContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameCardsAreaDeviceContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameCardsAreaDeviceContrast& from);
  void MergeFrom(const SFrameCardsAreaDeviceContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameCardsAreaDeviceContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.CardsAreaDeviceContrast CardsAreaDeviceContrastlist = 1;
  int cardsareadevicecontrastlist_size() const;
  void clear_cardsareadevicecontrastlist();
  static const int kCardsAreaDeviceContrastlistFieldNumber = 1;
  ::ServerProtocol::CardsAreaDeviceContrast* mutable_cardsareadevicecontrastlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardsAreaDeviceContrast >*
      mutable_cardsareadevicecontrastlist();
  const ::ServerProtocol::CardsAreaDeviceContrast& cardsareadevicecontrastlist(int index) const;
  ::ServerProtocol::CardsAreaDeviceContrast* add_cardsareadevicecontrastlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardsAreaDeviceContrast >&
      cardsareadevicecontrastlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameCardsAreaDeviceContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardsAreaDeviceContrast > cardsareadevicecontrastlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CardsAreaDeviceContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.CardsAreaDeviceContrast) */ {
 public:
  CardsAreaDeviceContrast();
  virtual ~CardsAreaDeviceContrast();

  CardsAreaDeviceContrast(const CardsAreaDeviceContrast& from);

  inline CardsAreaDeviceContrast& operator=(const CardsAreaDeviceContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CardsAreaDeviceContrast(CardsAreaDeviceContrast&& from) noexcept
    : CardsAreaDeviceContrast() {
    *this = ::std::move(from);
  }

  inline CardsAreaDeviceContrast& operator=(CardsAreaDeviceContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardsAreaDeviceContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardsAreaDeviceContrast* internal_default_instance() {
    return reinterpret_cast<const CardsAreaDeviceContrast*>(
               &_CardsAreaDeviceContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CardsAreaDeviceContrast* other);
  friend void swap(CardsAreaDeviceContrast& a, CardsAreaDeviceContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CardsAreaDeviceContrast* New() const final {
    return CreateMaybeMessage<CardsAreaDeviceContrast>(NULL);
  }

  CardsAreaDeviceContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CardsAreaDeviceContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CardsAreaDeviceContrast& from);
  void MergeFrom(const CardsAreaDeviceContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardsAreaDeviceContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 CardsID = 2;
  void clear_cardsid();
  static const int kCardsIDFieldNumber = 2;
  ::google::protobuf::uint64 cardsid() const;
  void set_cardsid(::google::protobuf::uint64 value);

  // uint64 AreaDeviceID = 3;
  void clear_areadeviceid();
  static const int kAreaDeviceIDFieldNumber = 3;
  ::google::protobuf::uint64 areadeviceid() const;
  void set_areadeviceid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 CardSendState = 5;
  void clear_cardsendstate();
  static const int kCardSendStateFieldNumber = 5;
  ::google::protobuf::int32 cardsendstate() const;
  void set_cardsendstate(::google::protobuf::int32 value);

  // int32 CardSendCount = 6;
  void clear_cardsendcount();
  static const int kCardSendCountFieldNumber = 6;
  ::google::protobuf::int32 cardsendcount() const;
  void set_cardsendcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.CardsAreaDeviceContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 cardsid_;
  ::google::protobuf::uint64 areadeviceid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cardsendstate_;
  ::google::protobuf::int32 cardsendcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameCardRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameCardRecord) */ {
 public:
  SFrameCardRecord();
  virtual ~SFrameCardRecord();

  SFrameCardRecord(const SFrameCardRecord& from);

  inline SFrameCardRecord& operator=(const SFrameCardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameCardRecord(SFrameCardRecord&& from) noexcept
    : SFrameCardRecord() {
    *this = ::std::move(from);
  }

  inline SFrameCardRecord& operator=(SFrameCardRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameCardRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameCardRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameCardRecord*>(
               &_SFrameCardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(SFrameCardRecord* other);
  friend void swap(SFrameCardRecord& a, SFrameCardRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameCardRecord* New() const final {
    return CreateMaybeMessage<SFrameCardRecord>(NULL);
  }

  SFrameCardRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameCardRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameCardRecord& from);
  void MergeFrom(const SFrameCardRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameCardRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.CardRecord CardRecordlist = 1;
  int cardrecordlist_size() const;
  void clear_cardrecordlist();
  static const int kCardRecordlistFieldNumber = 1;
  ::ServerProtocol::CardRecord* mutable_cardrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardRecord >*
      mutable_cardrecordlist();
  const ::ServerProtocol::CardRecord& cardrecordlist(int index) const;
  ::ServerProtocol::CardRecord* add_cardrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardRecord >&
      cardrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameCardRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardRecord > cardrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CardRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.CardRecord) */ {
 public:
  CardRecord();
  virtual ~CardRecord();

  CardRecord(const CardRecord& from);

  inline CardRecord& operator=(const CardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CardRecord(CardRecord&& from) noexcept
    : CardRecord() {
    *this = ::std::move(from);
  }

  inline CardRecord& operator=(CardRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardRecord* internal_default_instance() {
    return reinterpret_cast<const CardRecord*>(
               &_CardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CardRecord* other);
  friend void swap(CardRecord& a, CardRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CardRecord* New() const final {
    return CreateMaybeMessage<CardRecord>(NULL);
  }

  CardRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CardRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CardRecord& from);
  void MergeFrom(const CardRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Card = 2;
  void clear_card();
  static const int kCardFieldNumber = 2;
  const ::std::string& card() const;
  void set_card(const ::std::string& value);
  #if LANG_CXX11
  void set_card(::std::string&& value);
  #endif
  void set_card(const char* value);
  void set_card(const char* value, size_t size);
  ::std::string* mutable_card();
  ::std::string* release_card();
  void set_allocated_card(::std::string* card);

  // string Phone = 13;
  void clear_phone();
  static const int kPhoneFieldNumber = 13;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 UserID = 3;
  void clear_userid();
  static const int kUserIDFieldNumber = 3;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // uint64 AreaID = 4;
  void clear_areaid();
  static const int kAreaIDFieldNumber = 4;
  ::google::protobuf::uint64 areaid() const;
  void set_areaid(::google::protobuf::uint64 value);

  // int64 BeginTime = 5;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 5;
  ::google::protobuf::int64 begintime() const;
  void set_begintime(::google::protobuf::int64 value);

  // int64 EndTime = 6;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // uint64 RoleID = 7;
  void clear_roleid();
  static const int kRoleIDFieldNumber = 7;
  ::google::protobuf::uint64 roleid() const;
  void set_roleid(::google::protobuf::uint64 value);

  // int64 Time = 8;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int32 State = 9;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 CardType = 10;
  void clear_cardtype();
  static const int kCardTypeFieldNumber = 10;
  ::google::protobuf::int32 cardtype() const;
  void set_cardtype(::google::protobuf::int32 value);

  // int32 ListType = 11;
  void clear_listtype();
  static const int kListTypeFieldNumber = 11;
  ::google::protobuf::int32 listtype() const;
  void set_listtype(::google::protobuf::int32 value);

  // int32 FunType = 12;
  void clear_funtype();
  static const int kFunTypeFieldNumber = 12;
  ::google::protobuf::int32 funtype() const;
  void set_funtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.CardRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr card_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint64 areaid_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 listtype_;
  ::google::protobuf::int32 funtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameManagersRoleContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameManagersRoleContrast) */ {
 public:
  SFrameManagersRoleContrast();
  virtual ~SFrameManagersRoleContrast();

  SFrameManagersRoleContrast(const SFrameManagersRoleContrast& from);

  inline SFrameManagersRoleContrast& operator=(const SFrameManagersRoleContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameManagersRoleContrast(SFrameManagersRoleContrast&& from) noexcept
    : SFrameManagersRoleContrast() {
    *this = ::std::move(from);
  }

  inline SFrameManagersRoleContrast& operator=(SFrameManagersRoleContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameManagersRoleContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameManagersRoleContrast* internal_default_instance() {
    return reinterpret_cast<const SFrameManagersRoleContrast*>(
               &_SFrameManagersRoleContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(SFrameManagersRoleContrast* other);
  friend void swap(SFrameManagersRoleContrast& a, SFrameManagersRoleContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameManagersRoleContrast* New() const final {
    return CreateMaybeMessage<SFrameManagersRoleContrast>(NULL);
  }

  SFrameManagersRoleContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameManagersRoleContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameManagersRoleContrast& from);
  void MergeFrom(const SFrameManagersRoleContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameManagersRoleContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.ManagersRoleContrast ManagersRoleContrastlist = 1;
  int managersrolecontrastlist_size() const;
  void clear_managersrolecontrastlist();
  static const int kManagersRoleContrastlistFieldNumber = 1;
  ::ServerProtocol::ManagersRoleContrast* mutable_managersrolecontrastlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::ManagersRoleContrast >*
      mutable_managersrolecontrastlist();
  const ::ServerProtocol::ManagersRoleContrast& managersrolecontrastlist(int index) const;
  ::ServerProtocol::ManagersRoleContrast* add_managersrolecontrastlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::ManagersRoleContrast >&
      managersrolecontrastlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameManagersRoleContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::ManagersRoleContrast > managersrolecontrastlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagersRoleContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.ManagersRoleContrast) */ {
 public:
  ManagersRoleContrast();
  virtual ~ManagersRoleContrast();

  ManagersRoleContrast(const ManagersRoleContrast& from);

  inline ManagersRoleContrast& operator=(const ManagersRoleContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagersRoleContrast(ManagersRoleContrast&& from) noexcept
    : ManagersRoleContrast() {
    *this = ::std::move(from);
  }

  inline ManagersRoleContrast& operator=(ManagersRoleContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagersRoleContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagersRoleContrast* internal_default_instance() {
    return reinterpret_cast<const ManagersRoleContrast*>(
               &_ManagersRoleContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ManagersRoleContrast* other);
  friend void swap(ManagersRoleContrast& a, ManagersRoleContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagersRoleContrast* New() const final {
    return CreateMaybeMessage<ManagersRoleContrast>(NULL);
  }

  ManagersRoleContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManagersRoleContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManagersRoleContrast& from);
  void MergeFrom(const ManagersRoleContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagersRoleContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 RoleTypeID = 2;
  void clear_roletypeid();
  static const int kRoleTypeIDFieldNumber = 2;
  ::google::protobuf::uint64 roletypeid() const;
  void set_roletypeid(::google::protobuf::uint64 value);

  // uint64 ManagersID = 3;
  void clear_managersid();
  static const int kManagersIDFieldNumber = 3;
  ::google::protobuf::uint64 managersid() const;
  void set_managersid(::google::protobuf::uint64 value);

  // uint64 MechID = 5;
  void clear_mechid();
  static const int kMechIDFieldNumber = 5;
  ::google::protobuf::uint64 mechid() const;
  void set_mechid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.ManagersRoleContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 roletypeid_;
  ::google::protobuf::uint64 managersid_;
  ::google::protobuf::uint64 mechid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFolderUpRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFolderUpRecord) */ {
 public:
  SFrameFolderUpRecord();
  virtual ~SFrameFolderUpRecord();

  SFrameFolderUpRecord(const SFrameFolderUpRecord& from);

  inline SFrameFolderUpRecord& operator=(const SFrameFolderUpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFolderUpRecord(SFrameFolderUpRecord&& from) noexcept
    : SFrameFolderUpRecord() {
    *this = ::std::move(from);
  }

  inline SFrameFolderUpRecord& operator=(SFrameFolderUpRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFolderUpRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFolderUpRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameFolderUpRecord*>(
               &_SFrameFolderUpRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(SFrameFolderUpRecord* other);
  friend void swap(SFrameFolderUpRecord& a, SFrameFolderUpRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFolderUpRecord* New() const final {
    return CreateMaybeMessage<SFrameFolderUpRecord>(NULL);
  }

  SFrameFolderUpRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFolderUpRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFolderUpRecord& from);
  void MergeFrom(const SFrameFolderUpRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFolderUpRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.FolderUpRecord FolderUpRecordlist = 1;
  int folderuprecordlist_size() const;
  void clear_folderuprecordlist();
  static const int kFolderUpRecordlistFieldNumber = 1;
  ::ServerProtocol::FolderUpRecord* mutable_folderuprecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderUpRecord >*
      mutable_folderuprecordlist();
  const ::ServerProtocol::FolderUpRecord& folderuprecordlist(int index) const;
  ::ServerProtocol::FolderUpRecord* add_folderuprecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderUpRecord >&
      folderuprecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFolderUpRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderUpRecord > folderuprecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FolderUpRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FolderUpRecord) */ {
 public:
  FolderUpRecord();
  virtual ~FolderUpRecord();

  FolderUpRecord(const FolderUpRecord& from);

  inline FolderUpRecord& operator=(const FolderUpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FolderUpRecord(FolderUpRecord&& from) noexcept
    : FolderUpRecord() {
    *this = ::std::move(from);
  }

  inline FolderUpRecord& operator=(FolderUpRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FolderUpRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FolderUpRecord* internal_default_instance() {
    return reinterpret_cast<const FolderUpRecord*>(
               &_FolderUpRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(FolderUpRecord* other);
  friend void swap(FolderUpRecord& a, FolderUpRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FolderUpRecord* New() const final {
    return CreateMaybeMessage<FolderUpRecord>(NULL);
  }

  FolderUpRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FolderUpRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FolderUpRecord& from);
  void MergeFrom(const FolderUpRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderUpRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string Upusername = 7;
  void clear_upusername();
  static const int kUpusernameFieldNumber = 7;
  const ::std::string& upusername() const;
  void set_upusername(const ::std::string& value);
  #if LANG_CXX11
  void set_upusername(::std::string&& value);
  #endif
  void set_upusername(const char* value);
  void set_upusername(const char* value, size_t size);
  ::std::string* mutable_upusername();
  ::std::string* release_upusername();
  void set_allocated_upusername(::std::string* upusername);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 Size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // int32 Update = 5;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  ::google::protobuf::int32 update() const;
  void set_update(::google::protobuf::int32 value);

  // uint64 UpuserID = 6;
  void clear_upuserid();
  static const int kUpuserIDFieldNumber = 6;
  ::google::protobuf::uint64 upuserid() const;
  void set_upuserid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FolderUpRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr upusername_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 update_;
  ::google::protobuf::uint64 upuserid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameFolderTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameFolderTree) */ {
 public:
  SFrameFolderTree();
  virtual ~SFrameFolderTree();

  SFrameFolderTree(const SFrameFolderTree& from);

  inline SFrameFolderTree& operator=(const SFrameFolderTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameFolderTree(SFrameFolderTree&& from) noexcept
    : SFrameFolderTree() {
    *this = ::std::move(from);
  }

  inline SFrameFolderTree& operator=(SFrameFolderTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameFolderTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameFolderTree* internal_default_instance() {
    return reinterpret_cast<const SFrameFolderTree*>(
               &_SFrameFolderTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(SFrameFolderTree* other);
  friend void swap(SFrameFolderTree& a, SFrameFolderTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameFolderTree* New() const final {
    return CreateMaybeMessage<SFrameFolderTree>(NULL);
  }

  SFrameFolderTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameFolderTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameFolderTree& from);
  void MergeFrom(const SFrameFolderTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameFolderTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.FolderTree FolderTreelist = 1;
  int foldertreelist_size() const;
  void clear_foldertreelist();
  static const int kFolderTreelistFieldNumber = 1;
  ::ServerProtocol::FolderTree* mutable_foldertreelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderTree >*
      mutable_foldertreelist();
  const ::ServerProtocol::FolderTree& foldertreelist(int index) const;
  ::ServerProtocol::FolderTree* add_foldertreelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderTree >&
      foldertreelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameFolderTree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderTree > foldertreelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FolderTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FolderTree) */ {
 public:
  FolderTree();
  virtual ~FolderTree();

  FolderTree(const FolderTree& from);

  inline FolderTree& operator=(const FolderTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FolderTree(FolderTree&& from) noexcept
    : FolderTree() {
    *this = ::std::move(from);
  }

  inline FolderTree& operator=(FolderTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FolderTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FolderTree* internal_default_instance() {
    return reinterpret_cast<const FolderTree*>(
               &_FolderTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(FolderTree* other);
  friend void swap(FolderTree& a, FolderTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FolderTree* New() const final {
    return CreateMaybeMessage<FolderTree>(NULL);
  }

  FolderTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FolderTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FolderTree& from);
  void MergeFrom(const FolderTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FolderTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string FileUrl = 4;
  void clear_fileurl();
  static const int kFileUrlFieldNumber = 4;
  const ::std::string& fileurl() const;
  void set_fileurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fileurl(::std::string&& value);
  #endif
  void set_fileurl(const char* value);
  void set_fileurl(const char* value, size_t size);
  ::std::string* mutable_fileurl();
  ::std::string* release_fileurl();
  void set_allocated_fileurl(::std::string* fileurl);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 Pid = 3;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint64 pid() const;
  void set_pid(::google::protobuf::uint64 value);

  // uint64 Userid = 5;
  void clear_userid();
  static const int kUseridFieldNumber = 5;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FolderTree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr fileurl_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 pid_;
  ::google::protobuf::uint64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceAlarm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceAlarm) */ {
 public:
  SFrameDeviceAlarm();
  virtual ~SFrameDeviceAlarm();

  SFrameDeviceAlarm(const SFrameDeviceAlarm& from);

  inline SFrameDeviceAlarm& operator=(const SFrameDeviceAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceAlarm(SFrameDeviceAlarm&& from) noexcept
    : SFrameDeviceAlarm() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceAlarm& operator=(SFrameDeviceAlarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceAlarm* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceAlarm*>(
               &_SFrameDeviceAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(SFrameDeviceAlarm* other);
  friend void swap(SFrameDeviceAlarm& a, SFrameDeviceAlarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceAlarm* New() const final {
    return CreateMaybeMessage<SFrameDeviceAlarm>(NULL);
  }

  SFrameDeviceAlarm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceAlarm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceAlarm& from);
  void MergeFrom(const SFrameDeviceAlarm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceAlarm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DeviceAlarm DeviceAlarmlist = 1;
  int devicealarmlist_size() const;
  void clear_devicealarmlist();
  static const int kDeviceAlarmlistFieldNumber = 1;
  ::ServerProtocol::DeviceAlarm* mutable_devicealarmlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarm >*
      mutable_devicealarmlist();
  const ::ServerProtocol::DeviceAlarm& devicealarmlist(int index) const;
  ::ServerProtocol::DeviceAlarm* add_devicealarmlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarm >&
      devicealarmlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceAlarm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarm > devicealarmlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceAlarm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceAlarm) */ {
 public:
  DeviceAlarm();
  virtual ~DeviceAlarm();

  DeviceAlarm(const DeviceAlarm& from);

  inline DeviceAlarm& operator=(const DeviceAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceAlarm(DeviceAlarm&& from) noexcept
    : DeviceAlarm() {
    *this = ::std::move(from);
  }

  inline DeviceAlarm& operator=(DeviceAlarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAlarm* internal_default_instance() {
    return reinterpret_cast<const DeviceAlarm*>(
               &_DeviceAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(DeviceAlarm* other);
  friend void swap(DeviceAlarm& a, DeviceAlarm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceAlarm* New() const final {
    return CreateMaybeMessage<DeviceAlarm>(NULL);
  }

  DeviceAlarm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAlarm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceAlarm& from);
  void MergeFrom(const DeviceAlarm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAlarm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DeviceMac = 5;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 5;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // string DevState = 7;
  void clear_devstate();
  static const int kDevStateFieldNumber = 7;
  const ::std::string& devstate() const;
  void set_devstate(const ::std::string& value);
  #if LANG_CXX11
  void set_devstate(::std::string&& value);
  #endif
  void set_devstate(const char* value);
  void set_devstate(const char* value, size_t size);
  ::std::string* mutable_devstate();
  ::std::string* release_devstate();
  void set_allocated_devstate(::std::string* devstate);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 CurTime = 2;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 2;
  ::google::protobuf::int64 curtime() const;
  void set_curtime(::google::protobuf::int64 value);

  // int64 HeppenTime = 3;
  void clear_heppentime();
  static const int kHeppenTimeFieldNumber = 3;
  ::google::protobuf::int64 heppentime() const;
  void set_heppentime(::google::protobuf::int64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 DevSort = 6;
  void clear_devsort();
  static const int kDevSortFieldNumber = 6;
  ::google::protobuf::int32 devsort() const;
  void set_devsort(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceAlarm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr devstate_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 curtime_;
  ::google::protobuf::int64 heppentime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 devsort_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceAlarmProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceAlarmProperty) */ {
 public:
  SFrameDeviceAlarmProperty();
  virtual ~SFrameDeviceAlarmProperty();

  SFrameDeviceAlarmProperty(const SFrameDeviceAlarmProperty& from);

  inline SFrameDeviceAlarmProperty& operator=(const SFrameDeviceAlarmProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceAlarmProperty(SFrameDeviceAlarmProperty&& from) noexcept
    : SFrameDeviceAlarmProperty() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceAlarmProperty& operator=(SFrameDeviceAlarmProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceAlarmProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceAlarmProperty* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceAlarmProperty*>(
               &_SFrameDeviceAlarmProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(SFrameDeviceAlarmProperty* other);
  friend void swap(SFrameDeviceAlarmProperty& a, SFrameDeviceAlarmProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceAlarmProperty* New() const final {
    return CreateMaybeMessage<SFrameDeviceAlarmProperty>(NULL);
  }

  SFrameDeviceAlarmProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceAlarmProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceAlarmProperty& from);
  void MergeFrom(const SFrameDeviceAlarmProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceAlarmProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DeviceAlarmProperty DeviceAlarmPropertylist = 1;
  int devicealarmpropertylist_size() const;
  void clear_devicealarmpropertylist();
  static const int kDeviceAlarmPropertylistFieldNumber = 1;
  ::ServerProtocol::DeviceAlarmProperty* mutable_devicealarmpropertylist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarmProperty >*
      mutable_devicealarmpropertylist();
  const ::ServerProtocol::DeviceAlarmProperty& devicealarmpropertylist(int index) const;
  ::ServerProtocol::DeviceAlarmProperty* add_devicealarmpropertylist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarmProperty >&
      devicealarmpropertylist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceAlarmProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarmProperty > devicealarmpropertylist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceAlarmProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceAlarmProperty) */ {
 public:
  DeviceAlarmProperty();
  virtual ~DeviceAlarmProperty();

  DeviceAlarmProperty(const DeviceAlarmProperty& from);

  inline DeviceAlarmProperty& operator=(const DeviceAlarmProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceAlarmProperty(DeviceAlarmProperty&& from) noexcept
    : DeviceAlarmProperty() {
    *this = ::std::move(from);
  }

  inline DeviceAlarmProperty& operator=(DeviceAlarmProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAlarmProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAlarmProperty* internal_default_instance() {
    return reinterpret_cast<const DeviceAlarmProperty*>(
               &_DeviceAlarmProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(DeviceAlarmProperty* other);
  friend void swap(DeviceAlarmProperty& a, DeviceAlarmProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceAlarmProperty* New() const final {
    return CreateMaybeMessage<DeviceAlarmProperty>(NULL);
  }

  DeviceAlarmProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAlarmProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceAlarmProperty& from);
  void MergeFrom(const DeviceAlarmProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceAlarmProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 DeviceAlarmId = 2;
  void clear_devicealarmid();
  static const int kDeviceAlarmIdFieldNumber = 2;
  ::google::protobuf::uint64 devicealarmid() const;
  void set_devicealarmid(::google::protobuf::uint64 value);

  // int32 AlarmType = 3;
  void clear_alarmtype();
  static const int kAlarmTypeFieldNumber = 3;
  ::google::protobuf::int32 alarmtype() const;
  void set_alarmtype(::google::protobuf::int32 value);

  // int32 AlarmValue = 4;
  void clear_alarmvalue();
  static const int kAlarmValueFieldNumber = 4;
  ::google::protobuf::int32 alarmvalue() const;
  void set_alarmvalue(::google::protobuf::int32 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceAlarmProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 devicealarmid_;
  ::google::protobuf::int32 alarmtype_;
  ::google::protobuf::int32 alarmvalue_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameGwDeviceBindTemp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameGwDeviceBindTemp) */ {
 public:
  SFrameGwDeviceBindTemp();
  virtual ~SFrameGwDeviceBindTemp();

  SFrameGwDeviceBindTemp(const SFrameGwDeviceBindTemp& from);

  inline SFrameGwDeviceBindTemp& operator=(const SFrameGwDeviceBindTemp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameGwDeviceBindTemp(SFrameGwDeviceBindTemp&& from) noexcept
    : SFrameGwDeviceBindTemp() {
    *this = ::std::move(from);
  }

  inline SFrameGwDeviceBindTemp& operator=(SFrameGwDeviceBindTemp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameGwDeviceBindTemp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameGwDeviceBindTemp* internal_default_instance() {
    return reinterpret_cast<const SFrameGwDeviceBindTemp*>(
               &_SFrameGwDeviceBindTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(SFrameGwDeviceBindTemp* other);
  friend void swap(SFrameGwDeviceBindTemp& a, SFrameGwDeviceBindTemp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameGwDeviceBindTemp* New() const final {
    return CreateMaybeMessage<SFrameGwDeviceBindTemp>(NULL);
  }

  SFrameGwDeviceBindTemp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameGwDeviceBindTemp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameGwDeviceBindTemp& from);
  void MergeFrom(const SFrameGwDeviceBindTemp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameGwDeviceBindTemp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.GwDeviceBindTemp GwDeviceBindTemplist = 1;
  int gwdevicebindtemplist_size() const;
  void clear_gwdevicebindtemplist();
  static const int kGwDeviceBindTemplistFieldNumber = 1;
  ::ServerProtocol::GwDeviceBindTemp* mutable_gwdevicebindtemplist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GwDeviceBindTemp >*
      mutable_gwdevicebindtemplist();
  const ::ServerProtocol::GwDeviceBindTemp& gwdevicebindtemplist(int index) const;
  ::ServerProtocol::GwDeviceBindTemp* add_gwdevicebindtemplist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GwDeviceBindTemp >&
      gwdevicebindtemplist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameGwDeviceBindTemp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GwDeviceBindTemp > gwdevicebindtemplist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GwDeviceBindTemp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.GwDeviceBindTemp) */ {
 public:
  GwDeviceBindTemp();
  virtual ~GwDeviceBindTemp();

  GwDeviceBindTemp(const GwDeviceBindTemp& from);

  inline GwDeviceBindTemp& operator=(const GwDeviceBindTemp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GwDeviceBindTemp(GwDeviceBindTemp&& from) noexcept
    : GwDeviceBindTemp() {
    *this = ::std::move(from);
  }

  inline GwDeviceBindTemp& operator=(GwDeviceBindTemp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GwDeviceBindTemp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GwDeviceBindTemp* internal_default_instance() {
    return reinterpret_cast<const GwDeviceBindTemp*>(
               &_GwDeviceBindTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(GwDeviceBindTemp* other);
  friend void swap(GwDeviceBindTemp& a, GwDeviceBindTemp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GwDeviceBindTemp* New() const final {
    return CreateMaybeMessage<GwDeviceBindTemp>(NULL);
  }

  GwDeviceBindTemp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GwDeviceBindTemp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GwDeviceBindTemp& from);
  void MergeFrom(const GwDeviceBindTemp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GwDeviceBindTemp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GwMac = 2;
  void clear_gwmac();
  static const int kGwMacFieldNumber = 2;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const char* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // string DeviceMac = 3;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 3;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.GwDeviceBindTemp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceDescribeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceDescribeInfo) */ {
 public:
  SFrameDeviceDescribeInfo();
  virtual ~SFrameDeviceDescribeInfo();

  SFrameDeviceDescribeInfo(const SFrameDeviceDescribeInfo& from);

  inline SFrameDeviceDescribeInfo& operator=(const SFrameDeviceDescribeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceDescribeInfo(SFrameDeviceDescribeInfo&& from) noexcept
    : SFrameDeviceDescribeInfo() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceDescribeInfo& operator=(SFrameDeviceDescribeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceDescribeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceDescribeInfo* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceDescribeInfo*>(
               &_SFrameDeviceDescribeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(SFrameDeviceDescribeInfo* other);
  friend void swap(SFrameDeviceDescribeInfo& a, SFrameDeviceDescribeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceDescribeInfo* New() const final {
    return CreateMaybeMessage<SFrameDeviceDescribeInfo>(NULL);
  }

  SFrameDeviceDescribeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceDescribeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceDescribeInfo& from);
  void MergeFrom(const SFrameDeviceDescribeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceDescribeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DeviceDescribeInfo DeviceDescribeInfotlist = 1;
  int devicedescribeinfotlist_size() const;
  void clear_devicedescribeinfotlist();
  static const int kDeviceDescribeInfotlistFieldNumber = 1;
  ::ServerProtocol::DeviceDescribeInfo* mutable_devicedescribeinfotlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceDescribeInfo >*
      mutable_devicedescribeinfotlist();
  const ::ServerProtocol::DeviceDescribeInfo& devicedescribeinfotlist(int index) const;
  ::ServerProtocol::DeviceDescribeInfo* add_devicedescribeinfotlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceDescribeInfo >&
      devicedescribeinfotlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceDescribeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceDescribeInfo > devicedescribeinfotlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceDescribeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceDescribeInfo) */ {
 public:
  DeviceDescribeInfo();
  virtual ~DeviceDescribeInfo();

  DeviceDescribeInfo(const DeviceDescribeInfo& from);

  inline DeviceDescribeInfo& operator=(const DeviceDescribeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceDescribeInfo(DeviceDescribeInfo&& from) noexcept
    : DeviceDescribeInfo() {
    *this = ::std::move(from);
  }

  inline DeviceDescribeInfo& operator=(DeviceDescribeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDescribeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDescribeInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceDescribeInfo*>(
               &_DeviceDescribeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(DeviceDescribeInfo* other);
  friend void swap(DeviceDescribeInfo& a, DeviceDescribeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceDescribeInfo* New() const final {
    return CreateMaybeMessage<DeviceDescribeInfo>(NULL);
  }

  DeviceDescribeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDescribeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceDescribeInfo& from);
  void MergeFrom(const DeviceDescribeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDescribeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Desribe = 2;
  void clear_desribe();
  static const int kDesribeFieldNumber = 2;
  const ::std::string& desribe() const;
  void set_desribe(const ::std::string& value);
  #if LANG_CXX11
  void set_desribe(::std::string&& value);
  #endif
  void set_desribe(const char* value);
  void set_desribe(const char* value, size_t size);
  ::std::string* mutable_desribe();
  ::std::string* release_desribe();
  void set_allocated_desribe(::std::string* desribe);

  // string BigDesribe = 5;
  void clear_bigdesribe();
  static const int kBigDesribeFieldNumber = 5;
  const ::std::string& bigdesribe() const;
  void set_bigdesribe(const ::std::string& value);
  #if LANG_CXX11
  void set_bigdesribe(::std::string&& value);
  #endif
  void set_bigdesribe(const char* value);
  void set_bigdesribe(const char* value, size_t size);
  ::std::string* mutable_bigdesribe();
  ::std::string* release_bigdesribe();
  void set_allocated_bigdesribe(::std::string* bigdesribe);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 TypeValue = 3;
  void clear_typevalue();
  static const int kTypeValueFieldNumber = 3;
  ::google::protobuf::int32 typevalue() const;
  void set_typevalue(::google::protobuf::int32 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // uint64 DevTypeCribeID = 6;
  void clear_devtypecribeid();
  static const int kDevTypeCribeIDFieldNumber = 6;
  ::google::protobuf::uint64 devtypecribeid() const;
  void set_devtypecribeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceDescribeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desribe_;
  ::google::protobuf::internal::ArenaStringPtr bigdesribe_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 typevalue_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint64 devtypecribeid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemJGPush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SystemJGPush) */ {
 public:
  SystemJGPush();
  virtual ~SystemJGPush();

  SystemJGPush(const SystemJGPush& from);

  inline SystemJGPush& operator=(const SystemJGPush& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemJGPush(SystemJGPush&& from) noexcept
    : SystemJGPush() {
    *this = ::std::move(from);
  }

  inline SystemJGPush& operator=(SystemJGPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemJGPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemJGPush* internal_default_instance() {
    return reinterpret_cast<const SystemJGPush*>(
               &_SystemJGPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(SystemJGPush* other);
  friend void swap(SystemJGPush& a, SystemJGPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemJGPush* New() const final {
    return CreateMaybeMessage<SystemJGPush>(NULL);
  }

  SystemJGPush* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemJGPush>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemJGPush& from);
  void MergeFrom(const SystemJGPush& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemJGPush* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PushTagOrAlias = 3;
  void clear_pushtagoralias();
  static const int kPushTagOrAliasFieldNumber = 3;
  const ::std::string& pushtagoralias() const;
  void set_pushtagoralias(const ::std::string& value);
  #if LANG_CXX11
  void set_pushtagoralias(::std::string&& value);
  #endif
  void set_pushtagoralias(const char* value);
  void set_pushtagoralias(const char* value, size_t size);
  ::std::string* mutable_pushtagoralias();
  ::std::string* release_pushtagoralias();
  void set_allocated_pushtagoralias(::std::string* pushtagoralias);

  // string Alert = 4;
  void clear_alert();
  static const int kAlertFieldNumber = 4;
  const ::std::string& alert() const;
  void set_alert(const ::std::string& value);
  #if LANG_CXX11
  void set_alert(::std::string&& value);
  #endif
  void set_alert(const char* value);
  void set_alert(const char* value, size_t size);
  ::std::string* mutable_alert();
  ::std::string* release_alert();
  void set_allocated_alert(::std::string* alert);

  // string Title = 5;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string Content = 6;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string MsgTitle = 7;
  void clear_msgtitle();
  static const int kMsgTitleFieldNumber = 7;
  const ::std::string& msgtitle() const;
  void set_msgtitle(const ::std::string& value);
  #if LANG_CXX11
  void set_msgtitle(::std::string&& value);
  #endif
  void set_msgtitle(const char* value);
  void set_msgtitle(const char* value, size_t size);
  ::std::string* mutable_msgtitle();
  ::std::string* release_msgtitle();
  void set_allocated_msgtitle(::std::string* msgtitle);

  // int32 PushType = 1;
  void clear_pushtype();
  static const int kPushTypeFieldNumber = 1;
  ::google::protobuf::int32 pushtype() const;
  void set_pushtype(::google::protobuf::int32 value);

  // int32 ActionType = 2;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 2;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // int32 PushAppType = 8;
  void clear_pushapptype();
  static const int kPushAppTypeFieldNumber = 8;
  ::google::protobuf::int32 pushapptype() const;
  void set_pushapptype(::google::protobuf::int32 value);

  // int32 PushTempType = 9;
  void clear_pushtemptype();
  static const int kPushTempTypeFieldNumber = 9;
  ::google::protobuf::int32 pushtemptype() const;
  void set_pushtemptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SystemJGPush)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pushtagoralias_;
  ::google::protobuf::internal::ArenaStringPtr alert_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr msgtitle_;
  ::google::protobuf::int32 pushtype_;
  ::google::protobuf::int32 actiontype_;
  ::google::protobuf::int32 pushapptype_;
  ::google::protobuf::int32 pushtemptype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameRegisterServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FrameRegisterServer) */ {
 public:
  FrameRegisterServer();
  virtual ~FrameRegisterServer();

  FrameRegisterServer(const FrameRegisterServer& from);

  inline FrameRegisterServer& operator=(const FrameRegisterServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameRegisterServer(FrameRegisterServer&& from) noexcept
    : FrameRegisterServer() {
    *this = ::std::move(from);
  }

  inline FrameRegisterServer& operator=(FrameRegisterServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameRegisterServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameRegisterServer* internal_default_instance() {
    return reinterpret_cast<const FrameRegisterServer*>(
               &_FrameRegisterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(FrameRegisterServer* other);
  friend void swap(FrameRegisterServer& a, FrameRegisterServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameRegisterServer* New() const final {
    return CreateMaybeMessage<FrameRegisterServer>(NULL);
  }

  FrameRegisterServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameRegisterServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameRegisterServer& from);
  void MergeFrom(const FrameRegisterServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameRegisterServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 CmdList = 4;
  int cmdlist_size() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 4;
  ::google::protobuf::int32 cmdlist(int index) const;
  void set_cmdlist(int index, ::google::protobuf::int32 value);
  void add_cmdlist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cmdlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cmdlist();

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 MaxLink = 3;
  void clear_maxlink();
  static const int kMaxLinkFieldNumber = 3;
  ::google::protobuf::int32 maxlink() const;
  void set_maxlink(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FrameRegisterServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cmdlist_;
  mutable int _cmdlist_cached_byte_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 maxlink_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameRegisterServerAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FrameRegisterServerAnswer) */ {
 public:
  FrameRegisterServerAnswer();
  virtual ~FrameRegisterServerAnswer();

  FrameRegisterServerAnswer(const FrameRegisterServerAnswer& from);

  inline FrameRegisterServerAnswer& operator=(const FrameRegisterServerAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameRegisterServerAnswer(FrameRegisterServerAnswer&& from) noexcept
    : FrameRegisterServerAnswer() {
    *this = ::std::move(from);
  }

  inline FrameRegisterServerAnswer& operator=(FrameRegisterServerAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameRegisterServerAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameRegisterServerAnswer* internal_default_instance() {
    return reinterpret_cast<const FrameRegisterServerAnswer*>(
               &_FrameRegisterServerAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(FrameRegisterServerAnswer* other);
  friend void swap(FrameRegisterServerAnswer& a, FrameRegisterServerAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameRegisterServerAnswer* New() const final {
    return CreateMaybeMessage<FrameRegisterServerAnswer>(NULL);
  }

  FrameRegisterServerAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameRegisterServerAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameRegisterServerAnswer& from);
  void MergeFrom(const FrameRegisterServerAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameRegisterServerAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.FrameUserInfo FrameUserInfoList = 3;
  int frameuserinfolist_size() const;
  void clear_frameuserinfolist();
  static const int kFrameUserInfoListFieldNumber = 3;
  ::ServerProtocol::FrameUserInfo* mutable_frameuserinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FrameUserInfo >*
      mutable_frameuserinfolist();
  const ::ServerProtocol::FrameUserInfo& frameuserinfolist(int index) const;
  ::ServerProtocol::FrameUserInfo* add_frameuserinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FrameUserInfo >&
      frameuserinfolist() const;

  // int32 state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FrameRegisterServerAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FrameUserInfo > frameuserinfolist_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FrameUserInfo) */ {
 public:
  FrameUserInfo();
  virtual ~FrameUserInfo();

  FrameUserInfo(const FrameUserInfo& from);

  inline FrameUserInfo& operator=(const FrameUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameUserInfo(FrameUserInfo&& from) noexcept
    : FrameUserInfo() {
    *this = ::std::move(from);
  }

  inline FrameUserInfo& operator=(FrameUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameUserInfo* internal_default_instance() {
    return reinterpret_cast<const FrameUserInfo*>(
               &_FrameUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(FrameUserInfo* other);
  friend void swap(FrameUserInfo& a, FrameUserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameUserInfo* New() const final {
    return CreateMaybeMessage<FrameUserInfo>(NULL);
  }

  FrameUserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameUserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameUserInfo& from);
  void MergeFrom(const FrameUserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FrameUserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameGWDeviceContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameGWDeviceContrast) */ {
 public:
  SFrameGWDeviceContrast();
  virtual ~SFrameGWDeviceContrast();

  SFrameGWDeviceContrast(const SFrameGWDeviceContrast& from);

  inline SFrameGWDeviceContrast& operator=(const SFrameGWDeviceContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameGWDeviceContrast(SFrameGWDeviceContrast&& from) noexcept
    : SFrameGWDeviceContrast() {
    *this = ::std::move(from);
  }

  inline SFrameGWDeviceContrast& operator=(SFrameGWDeviceContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameGWDeviceContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameGWDeviceContrast* internal_default_instance() {
    return reinterpret_cast<const SFrameGWDeviceContrast*>(
               &_SFrameGWDeviceContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(SFrameGWDeviceContrast* other);
  friend void swap(SFrameGWDeviceContrast& a, SFrameGWDeviceContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameGWDeviceContrast* New() const final {
    return CreateMaybeMessage<SFrameGWDeviceContrast>(NULL);
  }

  SFrameGWDeviceContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameGWDeviceContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameGWDeviceContrast& from);
  void MergeFrom(const SFrameGWDeviceContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameGWDeviceContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SGWDeviceContrast SGWDeviceContrastlist = 1;
  int sgwdevicecontrastlist_size() const;
  void clear_sgwdevicecontrastlist();
  static const int kSGWDeviceContrastlistFieldNumber = 1;
  ::ServerProtocol::SGWDeviceContrast* mutable_sgwdevicecontrastlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SGWDeviceContrast >*
      mutable_sgwdevicecontrastlist();
  const ::ServerProtocol::SGWDeviceContrast& sgwdevicecontrastlist(int index) const;
  ::ServerProtocol::SGWDeviceContrast* add_sgwdevicecontrastlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SGWDeviceContrast >&
      sgwdevicecontrastlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameGWDeviceContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SGWDeviceContrast > sgwdevicecontrastlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SGWDeviceContrast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SGWDeviceContrast) */ {
 public:
  SGWDeviceContrast();
  virtual ~SGWDeviceContrast();

  SGWDeviceContrast(const SGWDeviceContrast& from);

  inline SGWDeviceContrast& operator=(const SGWDeviceContrast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SGWDeviceContrast(SGWDeviceContrast&& from) noexcept
    : SGWDeviceContrast() {
    *this = ::std::move(from);
  }

  inline SGWDeviceContrast& operator=(SGWDeviceContrast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SGWDeviceContrast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGWDeviceContrast* internal_default_instance() {
    return reinterpret_cast<const SGWDeviceContrast*>(
               &_SGWDeviceContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(SGWDeviceContrast* other);
  friend void swap(SGWDeviceContrast& a, SGWDeviceContrast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SGWDeviceContrast* New() const final {
    return CreateMaybeMessage<SGWDeviceContrast>(NULL);
  }

  SGWDeviceContrast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SGWDeviceContrast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SGWDeviceContrast& from);
  void MergeFrom(const SGWDeviceContrast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGWDeviceContrast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 GWId = 2;
  void clear_gwid();
  static const int kGWIdFieldNumber = 2;
  ::google::protobuf::uint64 gwid() const;
  void set_gwid(::google::protobuf::uint64 value);

  // uint64 DeviceId = 3;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SGWDeviceContrast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 gwid_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceFetNickName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceFetNickName) */ {
 public:
  SFrameDeviceFetNickName();
  virtual ~SFrameDeviceFetNickName();

  SFrameDeviceFetNickName(const SFrameDeviceFetNickName& from);

  inline SFrameDeviceFetNickName& operator=(const SFrameDeviceFetNickName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceFetNickName(SFrameDeviceFetNickName&& from) noexcept
    : SFrameDeviceFetNickName() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceFetNickName& operator=(SFrameDeviceFetNickName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceFetNickName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceFetNickName* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceFetNickName*>(
               &_SFrameDeviceFetNickName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(SFrameDeviceFetNickName* other);
  friend void swap(SFrameDeviceFetNickName& a, SFrameDeviceFetNickName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceFetNickName* New() const final {
    return CreateMaybeMessage<SFrameDeviceFetNickName>(NULL);
  }

  SFrameDeviceFetNickName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceFetNickName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceFetNickName& from);
  void MergeFrom(const SFrameDeviceFetNickName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceFetNickName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDevFetNickName SDevFetNickNamelist = 1;
  int sdevfetnicknamelist_size() const;
  void clear_sdevfetnicknamelist();
  static const int kSDevFetNickNamelistFieldNumber = 1;
  ::ServerProtocol::SDevFetNickName* mutable_sdevfetnicknamelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevFetNickName >*
      mutable_sdevfetnicknamelist();
  const ::ServerProtocol::SDevFetNickName& sdevfetnicknamelist(int index) const;
  ::ServerProtocol::SDevFetNickName* add_sdevfetnicknamelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevFetNickName >&
      sdevfetnicknamelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceFetNickName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevFetNickName > sdevfetnicknamelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDevFetNickName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDevFetNickName) */ {
 public:
  SDevFetNickName();
  virtual ~SDevFetNickName();

  SDevFetNickName(const SDevFetNickName& from);

  inline SDevFetNickName& operator=(const SDevFetNickName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDevFetNickName(SDevFetNickName&& from) noexcept
    : SDevFetNickName() {
    *this = ::std::move(from);
  }

  inline SDevFetNickName& operator=(SDevFetNickName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDevFetNickName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDevFetNickName* internal_default_instance() {
    return reinterpret_cast<const SDevFetNickName*>(
               &_SDevFetNickName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(SDevFetNickName* other);
  friend void swap(SDevFetNickName& a, SDevFetNickName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDevFetNickName* New() const final {
    return CreateMaybeMessage<SDevFetNickName>(NULL);
  }

  SDevFetNickName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDevFetNickName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDevFetNickName& from);
  void MergeFrom(const SDevFetNickName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDevFetNickName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string NickName = 4;
  void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 FetSort = 3;
  void clear_fetsort();
  static const int kFetSortFieldNumber = 3;
  ::google::protobuf::int32 fetsort() const;
  void set_fetsort(::google::protobuf::int32 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDevFetNickName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 fetsort_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceFet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceFet) */ {
 public:
  SFrameDeviceFet();
  virtual ~SFrameDeviceFet();

  SFrameDeviceFet(const SFrameDeviceFet& from);

  inline SFrameDeviceFet& operator=(const SFrameDeviceFet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceFet(SFrameDeviceFet&& from) noexcept
    : SFrameDeviceFet() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceFet& operator=(SFrameDeviceFet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceFet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceFet* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceFet*>(
               &_SFrameDeviceFet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(SFrameDeviceFet* other);
  friend void swap(SFrameDeviceFet& a, SFrameDeviceFet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceFet* New() const final {
    return CreateMaybeMessage<SFrameDeviceFet>(NULL);
  }

  SFrameDeviceFet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceFet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceFet& from);
  void MergeFrom(const SFrameDeviceFet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceFet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDeviceFet SDeviceFetlist = 1;
  int sdevicefetlist_size() const;
  void clear_sdevicefetlist();
  static const int kSDeviceFetlistFieldNumber = 1;
  ::ServerProtocol::SDeviceFet* mutable_sdevicefetlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceFet >*
      mutable_sdevicefetlist();
  const ::ServerProtocol::SDeviceFet& sdevicefetlist(int index) const;
  ::ServerProtocol::SDeviceFet* add_sdevicefetlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceFet >&
      sdevicefetlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceFet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceFet > sdevicefetlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDeviceFet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDeviceFet) */ {
 public:
  SDeviceFet();
  virtual ~SDeviceFet();

  SDeviceFet(const SDeviceFet& from);

  inline SDeviceFet& operator=(const SDeviceFet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDeviceFet(SDeviceFet&& from) noexcept
    : SDeviceFet() {
    *this = ::std::move(from);
  }

  inline SDeviceFet& operator=(SDeviceFet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDeviceFet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDeviceFet* internal_default_instance() {
    return reinterpret_cast<const SDeviceFet*>(
               &_SDeviceFet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(SDeviceFet* other);
  friend void swap(SDeviceFet& a, SDeviceFet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDeviceFet* New() const final {
    return CreateMaybeMessage<SDeviceFet>(NULL);
  }

  SDeviceFet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDeviceFet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDeviceFet& from);
  void MergeFrom(const SDeviceFet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeviceFet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string DivMac = 8;
  void clear_divmac();
  static const int kDivMacFieldNumber = 8;
  const ::std::string& divmac() const;
  void set_divmac(const ::std::string& value);
  #if LANG_CXX11
  void set_divmac(::std::string&& value);
  #endif
  void set_divmac(const char* value);
  void set_divmac(const char* value, size_t size);
  ::std::string* mutable_divmac();
  ::std::string* release_divmac();
  void set_allocated_divmac(::std::string* divmac);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 Level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 FetNumber = 3;
  void clear_fetnumber();
  static const int kFetNumberFieldNumber = 3;
  ::google::protobuf::int32 fetnumber() const;
  void set_fetnumber(::google::protobuf::int32 value);

  // int32 RootIdx = 4;
  void clear_rootidx();
  static const int kRootIdxFieldNumber = 4;
  ::google::protobuf::int32 rootidx() const;
  void set_rootidx(::google::protobuf::int32 value);

  // int32 DevSort = 5;
  void clear_devsort();
  static const int kDevSortFieldNumber = 5;
  ::google::protobuf::int32 devsort() const;
  void set_devsort(::google::protobuf::int32 value);

  // int32 SortNumber = 6;
  void clear_sortnumber();
  static const int kSortNumberFieldNumber = 6;
  ::google::protobuf::int32 sortnumber() const;
  void set_sortnumber(::google::protobuf::int32 value);

  // int32 State = 7;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 DBState = 9;
  void clear_dbstate();
  static const int kDBStateFieldNumber = 9;
  ::google::protobuf::int32 dbstate() const;
  void set_dbstate(::google::protobuf::int32 value);

  // uint32 Crc = 10;
  void clear_crc();
  static const int kCrcFieldNumber = 10;
  ::google::protobuf::uint32 crc() const;
  void set_crc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDeviceFet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr divmac_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fetnumber_;
  ::google::protobuf::int32 rootidx_;
  ::google::protobuf::int32 devsort_;
  ::google::protobuf::int32 sortnumber_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 dbstate_;
  ::google::protobuf::uint32 crc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceProperty) */ {
 public:
  SFrameDeviceProperty();
  virtual ~SFrameDeviceProperty();

  SFrameDeviceProperty(const SFrameDeviceProperty& from);

  inline SFrameDeviceProperty& operator=(const SFrameDeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceProperty(SFrameDeviceProperty&& from) noexcept
    : SFrameDeviceProperty() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceProperty& operator=(SFrameDeviceProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceProperty* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceProperty*>(
               &_SFrameDeviceProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(SFrameDeviceProperty* other);
  friend void swap(SFrameDeviceProperty& a, SFrameDeviceProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceProperty* New() const final {
    return CreateMaybeMessage<SFrameDeviceProperty>(NULL);
  }

  SFrameDeviceProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceProperty& from);
  void MergeFrom(const SFrameDeviceProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDeviceProperty SDevicePropertylist = 1;
  int sdevicepropertylist_size() const;
  void clear_sdevicepropertylist();
  static const int kSDevicePropertylistFieldNumber = 1;
  ::ServerProtocol::SDeviceProperty* mutable_sdevicepropertylist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceProperty >*
      mutable_sdevicepropertylist();
  const ::ServerProtocol::SDeviceProperty& sdevicepropertylist(int index) const;
  ::ServerProtocol::SDeviceProperty* add_sdevicepropertylist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceProperty >&
      sdevicepropertylist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceProperty > sdevicepropertylist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDeviceProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDeviceProperty) */ {
 public:
  SDeviceProperty();
  virtual ~SDeviceProperty();

  SDeviceProperty(const SDeviceProperty& from);

  inline SDeviceProperty& operator=(const SDeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDeviceProperty(SDeviceProperty&& from) noexcept
    : SDeviceProperty() {
    *this = ::std::move(from);
  }

  inline SDeviceProperty& operator=(SDeviceProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDeviceProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDeviceProperty* internal_default_instance() {
    return reinterpret_cast<const SDeviceProperty*>(
               &_SDeviceProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(SDeviceProperty* other);
  friend void swap(SDeviceProperty& a, SDeviceProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDeviceProperty* New() const final {
    return CreateMaybeMessage<SDeviceProperty>(NULL);
  }

  SDeviceProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDeviceProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDeviceProperty& from);
  void MergeFrom(const SDeviceProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeviceProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 DeviceID = 2;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // int32 RootFetIdx = 3;
  void clear_rootfetidx();
  static const int kRootFetIdxFieldNumber = 3;
  ::google::protobuf::int32 rootfetidx() const;
  void set_rootfetidx(::google::protobuf::int32 value);

  // int32 DevID = 4;
  void clear_devid();
  static const int kDevIDFieldNumber = 4;
  ::google::protobuf::int32 devid() const;
  void set_devid(::google::protobuf::int32 value);

  // int32 DrvIdx = 5;
  void clear_drvidx();
  static const int kDrvIdxFieldNumber = 5;
  ::google::protobuf::int32 drvidx() const;
  void set_drvidx(::google::protobuf::int32 value);

  // int32 PowerLevel = 6;
  void clear_powerlevel();
  static const int kPowerLevelFieldNumber = 6;
  ::google::protobuf::int32 powerlevel() const;
  void set_powerlevel(::google::protobuf::int32 value);

  // int32 Online = 7;
  void clear_online();
  static const int kOnlineFieldNumber = 7;
  ::google::protobuf::int32 online() const;
  void set_online(::google::protobuf::int32 value);

  // int32 FetCRC = 8;
  void clear_fetcrc();
  static const int kFetCRCFieldNumber = 8;
  ::google::protobuf::int32 fetcrc() const;
  void set_fetcrc(::google::protobuf::int32 value);

  // int32 GrpFet = 9;
  void clear_grpfet();
  static const int kGrpFetFieldNumber = 9;
  ::google::protobuf::int32 grpfet() const;
  void set_grpfet(::google::protobuf::int32 value);

  // int32 State = 10;
  void clear_state();
  static const int kStateFieldNumber = 10;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDeviceProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::int32 rootfetidx_;
  ::google::protobuf::int32 devid_;
  ::google::protobuf::int32 drvidx_;
  ::google::protobuf::int32 powerlevel_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::int32 fetcrc_;
  ::google::protobuf::int32 grpfet_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAppRoleContrastInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAppRoleContrastInfo) */ {
 public:
  SFrameAppRoleContrastInfo();
  virtual ~SFrameAppRoleContrastInfo();

  SFrameAppRoleContrastInfo(const SFrameAppRoleContrastInfo& from);

  inline SFrameAppRoleContrastInfo& operator=(const SFrameAppRoleContrastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAppRoleContrastInfo(SFrameAppRoleContrastInfo&& from) noexcept
    : SFrameAppRoleContrastInfo() {
    *this = ::std::move(from);
  }

  inline SFrameAppRoleContrastInfo& operator=(SFrameAppRoleContrastInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAppRoleContrastInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAppRoleContrastInfo* internal_default_instance() {
    return reinterpret_cast<const SFrameAppRoleContrastInfo*>(
               &_SFrameAppRoleContrastInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(SFrameAppRoleContrastInfo* other);
  friend void swap(SFrameAppRoleContrastInfo& a, SFrameAppRoleContrastInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAppRoleContrastInfo* New() const final {
    return CreateMaybeMessage<SFrameAppRoleContrastInfo>(NULL);
  }

  SFrameAppRoleContrastInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAppRoleContrastInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAppRoleContrastInfo& from);
  void MergeFrom(const SFrameAppRoleContrastInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAppRoleContrastInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAppRoleContrastInfo SAppRoleContrastInfolist = 1;
  int sapprolecontrastinfolist_size() const;
  void clear_sapprolecontrastinfolist();
  static const int kSAppRoleContrastInfolistFieldNumber = 1;
  ::ServerProtocol::SAppRoleContrastInfo* mutable_sapprolecontrastinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleContrastInfo >*
      mutable_sapprolecontrastinfolist();
  const ::ServerProtocol::SAppRoleContrastInfo& sapprolecontrastinfolist(int index) const;
  ::ServerProtocol::SAppRoleContrastInfo* add_sapprolecontrastinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleContrastInfo >&
      sapprolecontrastinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAppRoleContrastInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleContrastInfo > sapprolecontrastinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAppRoleContrastInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAppRoleContrastInfo) */ {
 public:
  SAppRoleContrastInfo();
  virtual ~SAppRoleContrastInfo();

  SAppRoleContrastInfo(const SAppRoleContrastInfo& from);

  inline SAppRoleContrastInfo& operator=(const SAppRoleContrastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAppRoleContrastInfo(SAppRoleContrastInfo&& from) noexcept
    : SAppRoleContrastInfo() {
    *this = ::std::move(from);
  }

  inline SAppRoleContrastInfo& operator=(SAppRoleContrastInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAppRoleContrastInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAppRoleContrastInfo* internal_default_instance() {
    return reinterpret_cast<const SAppRoleContrastInfo*>(
               &_SAppRoleContrastInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(SAppRoleContrastInfo* other);
  friend void swap(SAppRoleContrastInfo& a, SAppRoleContrastInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAppRoleContrastInfo* New() const final {
    return CreateMaybeMessage<SAppRoleContrastInfo>(NULL);
  }

  SAppRoleContrastInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAppRoleContrastInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAppRoleContrastInfo& from);
  void MergeFrom(const SAppRoleContrastInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAppRoleContrastInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 RoleTypeID = 2;
  void clear_roletypeid();
  static const int kRoleTypeIDFieldNumber = 2;
  ::google::protobuf::uint64 roletypeid() const;
  void set_roletypeid(::google::protobuf::uint64 value);

  // uint64 RoleID = 3;
  void clear_roleid();
  static const int kRoleIDFieldNumber = 3;
  ::google::protobuf::uint64 roleid() const;
  void set_roleid(::google::protobuf::uint64 value);

  // int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAppRoleContrastInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 roletypeid_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAppRoleFunBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAppRoleFunBaseInfo) */ {
 public:
  SFrameAppRoleFunBaseInfo();
  virtual ~SFrameAppRoleFunBaseInfo();

  SFrameAppRoleFunBaseInfo(const SFrameAppRoleFunBaseInfo& from);

  inline SFrameAppRoleFunBaseInfo& operator=(const SFrameAppRoleFunBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAppRoleFunBaseInfo(SFrameAppRoleFunBaseInfo&& from) noexcept
    : SFrameAppRoleFunBaseInfo() {
    *this = ::std::move(from);
  }

  inline SFrameAppRoleFunBaseInfo& operator=(SFrameAppRoleFunBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAppRoleFunBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAppRoleFunBaseInfo* internal_default_instance() {
    return reinterpret_cast<const SFrameAppRoleFunBaseInfo*>(
               &_SFrameAppRoleFunBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(SFrameAppRoleFunBaseInfo* other);
  friend void swap(SFrameAppRoleFunBaseInfo& a, SFrameAppRoleFunBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAppRoleFunBaseInfo* New() const final {
    return CreateMaybeMessage<SFrameAppRoleFunBaseInfo>(NULL);
  }

  SFrameAppRoleFunBaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAppRoleFunBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAppRoleFunBaseInfo& from);
  void MergeFrom(const SFrameAppRoleFunBaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAppRoleFunBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAppRoleFunBaseInfo SAppRoleFunBaseInfolist = 1;
  int sapprolefunbaseinfolist_size() const;
  void clear_sapprolefunbaseinfolist();
  static const int kSAppRoleFunBaseInfolistFieldNumber = 1;
  ::ServerProtocol::SAppRoleFunBaseInfo* mutable_sapprolefunbaseinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFunBaseInfo >*
      mutable_sapprolefunbaseinfolist();
  const ::ServerProtocol::SAppRoleFunBaseInfo& sapprolefunbaseinfolist(int index) const;
  ::ServerProtocol::SAppRoleFunBaseInfo* add_sapprolefunbaseinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFunBaseInfo >&
      sapprolefunbaseinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAppRoleFunBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFunBaseInfo > sapprolefunbaseinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAppRoleFunBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAppRoleFunBaseInfo) */ {
 public:
  SAppRoleFunBaseInfo();
  virtual ~SAppRoleFunBaseInfo();

  SAppRoleFunBaseInfo(const SAppRoleFunBaseInfo& from);

  inline SAppRoleFunBaseInfo& operator=(const SAppRoleFunBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAppRoleFunBaseInfo(SAppRoleFunBaseInfo&& from) noexcept
    : SAppRoleFunBaseInfo() {
    *this = ::std::move(from);
  }

  inline SAppRoleFunBaseInfo& operator=(SAppRoleFunBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAppRoleFunBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAppRoleFunBaseInfo* internal_default_instance() {
    return reinterpret_cast<const SAppRoleFunBaseInfo*>(
               &_SAppRoleFunBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(SAppRoleFunBaseInfo* other);
  friend void swap(SAppRoleFunBaseInfo& a, SAppRoleFunBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAppRoleFunBaseInfo* New() const final {
    return CreateMaybeMessage<SAppRoleFunBaseInfo>(NULL);
  }

  SAppRoleFunBaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAppRoleFunBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAppRoleFunBaseInfo& from);
  void MergeFrom(const SAppRoleFunBaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAppRoleFunBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 number = 3;
  void clear_number();
  static const int kNumberFieldNumber = 3;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAppRoleFunBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameRoleDeviceRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameRoleDeviceRecord) */ {
 public:
  SFrameRoleDeviceRecord();
  virtual ~SFrameRoleDeviceRecord();

  SFrameRoleDeviceRecord(const SFrameRoleDeviceRecord& from);

  inline SFrameRoleDeviceRecord& operator=(const SFrameRoleDeviceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameRoleDeviceRecord(SFrameRoleDeviceRecord&& from) noexcept
    : SFrameRoleDeviceRecord() {
    *this = ::std::move(from);
  }

  inline SFrameRoleDeviceRecord& operator=(SFrameRoleDeviceRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameRoleDeviceRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameRoleDeviceRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameRoleDeviceRecord*>(
               &_SFrameRoleDeviceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(SFrameRoleDeviceRecord* other);
  friend void swap(SFrameRoleDeviceRecord& a, SFrameRoleDeviceRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameRoleDeviceRecord* New() const final {
    return CreateMaybeMessage<SFrameRoleDeviceRecord>(NULL);
  }

  SFrameRoleDeviceRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameRoleDeviceRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameRoleDeviceRecord& from);
  void MergeFrom(const SFrameRoleDeviceRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameRoleDeviceRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SRoleDeviceRecord SRoleDeviceRecordlist = 1;
  int sroledevicerecordlist_size() const;
  void clear_sroledevicerecordlist();
  static const int kSRoleDeviceRecordlistFieldNumber = 1;
  ::ServerProtocol::SRoleDeviceRecord* mutable_sroledevicerecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleDeviceRecord >*
      mutable_sroledevicerecordlist();
  const ::ServerProtocol::SRoleDeviceRecord& sroledevicerecordlist(int index) const;
  ::ServerProtocol::SRoleDeviceRecord* add_sroledevicerecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleDeviceRecord >&
      sroledevicerecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameRoleDeviceRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleDeviceRecord > sroledevicerecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SRoleDeviceRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SRoleDeviceRecord) */ {
 public:
  SRoleDeviceRecord();
  virtual ~SRoleDeviceRecord();

  SRoleDeviceRecord(const SRoleDeviceRecord& from);

  inline SRoleDeviceRecord& operator=(const SRoleDeviceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SRoleDeviceRecord(SRoleDeviceRecord&& from) noexcept
    : SRoleDeviceRecord() {
    *this = ::std::move(from);
  }

  inline SRoleDeviceRecord& operator=(SRoleDeviceRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SRoleDeviceRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRoleDeviceRecord* internal_default_instance() {
    return reinterpret_cast<const SRoleDeviceRecord*>(
               &_SRoleDeviceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(SRoleDeviceRecord* other);
  friend void swap(SRoleDeviceRecord& a, SRoleDeviceRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SRoleDeviceRecord* New() const final {
    return CreateMaybeMessage<SRoleDeviceRecord>(NULL);
  }

  SRoleDeviceRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SRoleDeviceRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SRoleDeviceRecord& from);
  void MergeFrom(const SRoleDeviceRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRoleDeviceRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 RoleTypeId = 2;
  void clear_roletypeid();
  static const int kRoleTypeIdFieldNumber = 2;
  ::google::protobuf::uint64 roletypeid() const;
  void set_roletypeid(::google::protobuf::uint64 value);

  // uint64 DeviceId = 3;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SRoleDeviceRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 roletypeid_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameItem) */ {
 public:
  SFrameItem();
  virtual ~SFrameItem();

  SFrameItem(const SFrameItem& from);

  inline SFrameItem& operator=(const SFrameItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameItem(SFrameItem&& from) noexcept
    : SFrameItem() {
    *this = ::std::move(from);
  }

  inline SFrameItem& operator=(SFrameItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameItem* internal_default_instance() {
    return reinterpret_cast<const SFrameItem*>(
               &_SFrameItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(SFrameItem* other);
  friend void swap(SFrameItem& a, SFrameItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameItem* New() const final {
    return CreateMaybeMessage<SFrameItem>(NULL);
  }

  SFrameItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameItem& from);
  void MergeFrom(const SFrameItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SItemInfo SItemInfolist = 1;
  int siteminfolist_size() const;
  void clear_siteminfolist();
  static const int kSItemInfolistFieldNumber = 1;
  ::ServerProtocol::SItemInfo* mutable_siteminfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SItemInfo >*
      mutable_siteminfolist();
  const ::ServerProtocol::SItemInfo& siteminfolist(int index) const;
  ::ServerProtocol::SItemInfo* add_siteminfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SItemInfo >&
      siteminfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SItemInfo > siteminfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SItemInfo) */ {
 public:
  SItemInfo();
  virtual ~SItemInfo();

  SItemInfo(const SItemInfo& from);

  inline SItemInfo& operator=(const SItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SItemInfo(SItemInfo&& from) noexcept
    : SItemInfo() {
    *this = ::std::move(from);
  }

  inline SItemInfo& operator=(SItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SItemInfo* internal_default_instance() {
    return reinterpret_cast<const SItemInfo*>(
               &_SItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(SItemInfo* other);
  friend void swap(SItemInfo& a, SItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SItemInfo* New() const final {
    return CreateMaybeMessage<SItemInfo>(NULL);
  }

  SItemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SItemInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SItemInfo& from);
  void MergeFrom(const SItemInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string MechName = 4;
  void clear_mechname();
  static const int kMechNameFieldNumber = 4;
  const ::std::string& mechname() const;
  void set_mechname(const ::std::string& value);
  #if LANG_CXX11
  void set_mechname(::std::string&& value);
  #endif
  void set_mechname(const char* value);
  void set_mechname(const char* value, size_t size);
  ::std::string* mutable_mechname();
  ::std::string* release_mechname();
  void set_allocated_mechname(::std::string* mechname);

  // string Address = 5;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string phone = 7;
  void clear_phone();
  static const int kPhoneFieldNumber = 7;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string Provincial = 10;
  void clear_provincial();
  static const int kProvincialFieldNumber = 10;
  const ::std::string& provincial() const;
  void set_provincial(const ::std::string& value);
  #if LANG_CXX11
  void set_provincial(::std::string&& value);
  #endif
  void set_provincial(const char* value);
  void set_provincial(const char* value, size_t size);
  ::std::string* mutable_provincial();
  ::std::string* release_provincial();
  void set_allocated_provincial(::std::string* provincial);

  // string Urban = 11;
  void clear_urban();
  static const int kUrbanFieldNumber = 11;
  const ::std::string& urban() const;
  void set_urban(const ::std::string& value);
  #if LANG_CXX11
  void set_urban(::std::string&& value);
  #endif
  void set_urban(const char* value);
  void set_urban(const char* value, size_t size);
  ::std::string* mutable_urban();
  ::std::string* release_urban();
  void set_allocated_urban(::std::string* urban);

  // string Area = 12;
  void clear_area();
  static const int kAreaFieldNumber = 12;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  #if LANG_CXX11
  void set_area(::std::string&& value);
  #endif
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // uint64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 MechId = 3;
  void clear_mechid();
  static const int kMechIdFieldNumber = 3;
  ::google::protobuf::uint64 mechid() const;
  void set_mechid(::google::protobuf::uint64 value);

  // int32 State = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 RoomCount = 8;
  void clear_roomcount();
  static const int kRoomCountFieldNumber = 8;
  ::google::protobuf::int32 roomcount() const;
  void set_roomcount(::google::protobuf::int32 value);

  // int32 FloorCount = 9;
  void clear_floorcount();
  static const int kFloorCountFieldNumber = 9;
  ::google::protobuf::int32 floorcount() const;
  void set_floorcount(::google::protobuf::int32 value);

  // int32 ItemType = 13;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 13;
  ::google::protobuf::int32 itemtype() const;
  void set_itemtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mechname_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr provincial_;
  ::google::protobuf::internal::ArenaStringPtr urban_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 mechid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 roomcount_;
  ::google::protobuf::int32 floorcount_;
  ::google::protobuf::int32 itemtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAppRoleType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAppRoleType) */ {
 public:
  SFrameAppRoleType();
  virtual ~SFrameAppRoleType();

  SFrameAppRoleType(const SFrameAppRoleType& from);

  inline SFrameAppRoleType& operator=(const SFrameAppRoleType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAppRoleType(SFrameAppRoleType&& from) noexcept
    : SFrameAppRoleType() {
    *this = ::std::move(from);
  }

  inline SFrameAppRoleType& operator=(SFrameAppRoleType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAppRoleType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAppRoleType* internal_default_instance() {
    return reinterpret_cast<const SFrameAppRoleType*>(
               &_SFrameAppRoleType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(SFrameAppRoleType* other);
  friend void swap(SFrameAppRoleType& a, SFrameAppRoleType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAppRoleType* New() const final {
    return CreateMaybeMessage<SFrameAppRoleType>(NULL);
  }

  SFrameAppRoleType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAppRoleType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAppRoleType& from);
  void MergeFrom(const SFrameAppRoleType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAppRoleType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAppRoleType AppRoleTypelist = 1;
  int approletypelist_size() const;
  void clear_approletypelist();
  static const int kAppRoleTypelistFieldNumber = 1;
  ::ServerProtocol::SAppRoleType* mutable_approletypelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleType >*
      mutable_approletypelist();
  const ::ServerProtocol::SAppRoleType& approletypelist(int index) const;
  ::ServerProtocol::SAppRoleType* add_approletypelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleType >&
      approletypelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAppRoleType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleType > approletypelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAppRoleType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAppRoleType) */ {
 public:
  SAppRoleType();
  virtual ~SAppRoleType();

  SAppRoleType(const SAppRoleType& from);

  inline SAppRoleType& operator=(const SAppRoleType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAppRoleType(SAppRoleType&& from) noexcept
    : SAppRoleType() {
    *this = ::std::move(from);
  }

  inline SAppRoleType& operator=(SAppRoleType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAppRoleType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAppRoleType* internal_default_instance() {
    return reinterpret_cast<const SAppRoleType*>(
               &_SAppRoleType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(SAppRoleType* other);
  friend void swap(SAppRoleType& a, SAppRoleType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAppRoleType* New() const final {
    return CreateMaybeMessage<SAppRoleType>(NULL);
  }

  SAppRoleType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAppRoleType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAppRoleType& from);
  void MergeFrom(const SAppRoleType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAppRoleType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 MechId = 3;
  void clear_mechid();
  static const int kMechIdFieldNumber = 3;
  ::google::protobuf::uint64 mechid() const;
  void set_mechid(::google::protobuf::uint64 value);

  // int32 Type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAppRoleType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 mechid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAppRoleFun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAppRoleFun) */ {
 public:
  SFrameAppRoleFun();
  virtual ~SFrameAppRoleFun();

  SFrameAppRoleFun(const SFrameAppRoleFun& from);

  inline SFrameAppRoleFun& operator=(const SFrameAppRoleFun& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAppRoleFun(SFrameAppRoleFun&& from) noexcept
    : SFrameAppRoleFun() {
    *this = ::std::move(from);
  }

  inline SFrameAppRoleFun& operator=(SFrameAppRoleFun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAppRoleFun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAppRoleFun* internal_default_instance() {
    return reinterpret_cast<const SFrameAppRoleFun*>(
               &_SFrameAppRoleFun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(SFrameAppRoleFun* other);
  friend void swap(SFrameAppRoleFun& a, SFrameAppRoleFun& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAppRoleFun* New() const final {
    return CreateMaybeMessage<SFrameAppRoleFun>(NULL);
  }

  SFrameAppRoleFun* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAppRoleFun>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAppRoleFun& from);
  void MergeFrom(const SFrameAppRoleFun& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAppRoleFun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAppRoleFun AppRoleFunlist = 1;
  int approlefunlist_size() const;
  void clear_approlefunlist();
  static const int kAppRoleFunlistFieldNumber = 1;
  ::ServerProtocol::SAppRoleFun* mutable_approlefunlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFun >*
      mutable_approlefunlist();
  const ::ServerProtocol::SAppRoleFun& approlefunlist(int index) const;
  ::ServerProtocol::SAppRoleFun* add_approlefunlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFun >&
      approlefunlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAppRoleFun)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFun > approlefunlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAppRoleFun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAppRoleFun) */ {
 public:
  SAppRoleFun();
  virtual ~SAppRoleFun();

  SAppRoleFun(const SAppRoleFun& from);

  inline SAppRoleFun& operator=(const SAppRoleFun& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAppRoleFun(SAppRoleFun&& from) noexcept
    : SAppRoleFun() {
    *this = ::std::move(from);
  }

  inline SAppRoleFun& operator=(SAppRoleFun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAppRoleFun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAppRoleFun* internal_default_instance() {
    return reinterpret_cast<const SAppRoleFun*>(
               &_SAppRoleFun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(SAppRoleFun* other);
  friend void swap(SAppRoleFun& a, SAppRoleFun& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAppRoleFun* New() const final {
    return CreateMaybeMessage<SAppRoleFun>(NULL);
  }

  SAppRoleFun* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAppRoleFun>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAppRoleFun& from);
  void MergeFrom(const SAppRoleFun& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAppRoleFun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 RoleId = 2;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  ::google::protobuf::uint64 roleid() const;
  void set_roleid(::google::protobuf::uint64 value);

  // uint64 FunID = 3;
  void clear_funid();
  static const int kFunIDFieldNumber = 3;
  ::google::protobuf::uint64 funid() const;
  void set_funid(::google::protobuf::uint64 value);

  // int32 Type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAppRoleFun)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 roleid_;
  ::google::protobuf::uint64 funid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceGroup) */ {
 public:
  SFrameDeviceGroup();
  virtual ~SFrameDeviceGroup();

  SFrameDeviceGroup(const SFrameDeviceGroup& from);

  inline SFrameDeviceGroup& operator=(const SFrameDeviceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceGroup(SFrameDeviceGroup&& from) noexcept
    : SFrameDeviceGroup() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceGroup& operator=(SFrameDeviceGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceGroup* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceGroup*>(
               &_SFrameDeviceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(SFrameDeviceGroup* other);
  friend void swap(SFrameDeviceGroup& a, SFrameDeviceGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceGroup* New() const final {
    return CreateMaybeMessage<SFrameDeviceGroup>(NULL);
  }

  SFrameDeviceGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceGroup& from);
  void MergeFrom(const SFrameDeviceGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDeviceGroup DeviceGrouplist = 1;
  int devicegrouplist_size() const;
  void clear_devicegrouplist();
  static const int kDeviceGrouplistFieldNumber = 1;
  ::ServerProtocol::SDeviceGroup* mutable_devicegrouplist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceGroup >*
      mutable_devicegrouplist();
  const ::ServerProtocol::SDeviceGroup& devicegrouplist(int index) const;
  ::ServerProtocol::SDeviceGroup* add_devicegrouplist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceGroup >&
      devicegrouplist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceGroup > devicegrouplist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDeviceGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDeviceGroup) */ {
 public:
  SDeviceGroup();
  virtual ~SDeviceGroup();

  SDeviceGroup(const SDeviceGroup& from);

  inline SDeviceGroup& operator=(const SDeviceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDeviceGroup(SDeviceGroup&& from) noexcept
    : SDeviceGroup() {
    *this = ::std::move(from);
  }

  inline SDeviceGroup& operator=(SDeviceGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDeviceGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDeviceGroup* internal_default_instance() {
    return reinterpret_cast<const SDeviceGroup*>(
               &_SDeviceGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(SDeviceGroup* other);
  friend void swap(SDeviceGroup& a, SDeviceGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDeviceGroup* New() const final {
    return CreateMaybeMessage<SDeviceGroup>(NULL);
  }

  SDeviceGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDeviceGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDeviceGroup& from);
  void MergeFrom(const SDeviceGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeviceGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 MechID = 2;
  void clear_mechid();
  static const int kMechIDFieldNumber = 2;
  ::google::protobuf::uint64 mechid() const;
  void set_mechid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDeviceGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 mechid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAreabase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAreabase) */ {
 public:
  SFrameAreabase();
  virtual ~SFrameAreabase();

  SFrameAreabase(const SFrameAreabase& from);

  inline SFrameAreabase& operator=(const SFrameAreabase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAreabase(SFrameAreabase&& from) noexcept
    : SFrameAreabase() {
    *this = ::std::move(from);
  }

  inline SFrameAreabase& operator=(SFrameAreabase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAreabase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAreabase* internal_default_instance() {
    return reinterpret_cast<const SFrameAreabase*>(
               &_SFrameAreabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(SFrameAreabase* other);
  friend void swap(SFrameAreabase& a, SFrameAreabase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAreabase* New() const final {
    return CreateMaybeMessage<SFrameAreabase>(NULL);
  }

  SFrameAreabase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAreabase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAreabase& from);
  void MergeFrom(const SFrameAreabase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAreabase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAreabaseinfo SAreabaseinfolist = 1;
  int sareabaseinfolist_size() const;
  void clear_sareabaseinfolist();
  static const int kSAreabaseinfolistFieldNumber = 1;
  ::ServerProtocol::SAreabaseinfo* mutable_sareabaseinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreabaseinfo >*
      mutable_sareabaseinfolist();
  const ::ServerProtocol::SAreabaseinfo& sareabaseinfolist(int index) const;
  ::ServerProtocol::SAreabaseinfo* add_sareabaseinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreabaseinfo >&
      sareabaseinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAreabase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreabaseinfo > sareabaseinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAreabaseinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAreabaseinfo) */ {
 public:
  SAreabaseinfo();
  virtual ~SAreabaseinfo();

  SAreabaseinfo(const SAreabaseinfo& from);

  inline SAreabaseinfo& operator=(const SAreabaseinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAreabaseinfo(SAreabaseinfo&& from) noexcept
    : SAreabaseinfo() {
    *this = ::std::move(from);
  }

  inline SAreabaseinfo& operator=(SAreabaseinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAreabaseinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAreabaseinfo* internal_default_instance() {
    return reinterpret_cast<const SAreabaseinfo*>(
               &_SAreabaseinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(SAreabaseinfo* other);
  friend void swap(SAreabaseinfo& a, SAreabaseinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAreabaseinfo* New() const final {
    return CreateMaybeMessage<SAreabaseinfo>(NULL);
  }

  SAreabaseinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAreabaseinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAreabaseinfo& from);
  void MergeFrom(const SAreabaseinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAreabaseinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string remark = 7;
  void clear_remark();
  static const int kRemarkFieldNumber = 7;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 itemid = 2;
  void clear_itemid();
  static const int kItemidFieldNumber = 2;
  ::google::protobuf::uint64 itemid() const;
  void set_itemid(::google::protobuf::uint64 value);

  // uint64 CreateUserID = 3;
  void clear_createuserid();
  static const int kCreateUserIDFieldNumber = 3;
  ::google::protobuf::uint64 createuserid() const;
  void set_createuserid(::google::protobuf::uint64 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAreabaseinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 itemid_;
  ::google::protobuf::uint64 createuserid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAreaDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAreaDevice) */ {
 public:
  SFrameAreaDevice();
  virtual ~SFrameAreaDevice();

  SFrameAreaDevice(const SFrameAreaDevice& from);

  inline SFrameAreaDevice& operator=(const SFrameAreaDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAreaDevice(SFrameAreaDevice&& from) noexcept
    : SFrameAreaDevice() {
    *this = ::std::move(from);
  }

  inline SFrameAreaDevice& operator=(SFrameAreaDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAreaDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAreaDevice* internal_default_instance() {
    return reinterpret_cast<const SFrameAreaDevice*>(
               &_SFrameAreaDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(SFrameAreaDevice* other);
  friend void swap(SFrameAreaDevice& a, SFrameAreaDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAreaDevice* New() const final {
    return CreateMaybeMessage<SFrameAreaDevice>(NULL);
  }

  SFrameAreaDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAreaDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAreaDevice& from);
  void MergeFrom(const SFrameAreaDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAreaDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAreaDeviceinfo SAreaDeviceinfolist = 1;
  int sareadeviceinfolist_size() const;
  void clear_sareadeviceinfolist();
  static const int kSAreaDeviceinfolistFieldNumber = 1;
  ::ServerProtocol::SAreaDeviceinfo* mutable_sareadeviceinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaDeviceinfo >*
      mutable_sareadeviceinfolist();
  const ::ServerProtocol::SAreaDeviceinfo& sareadeviceinfolist(int index) const;
  ::ServerProtocol::SAreaDeviceinfo* add_sareadeviceinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaDeviceinfo >&
      sareadeviceinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAreaDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaDeviceinfo > sareadeviceinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAreaDeviceinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAreaDeviceinfo) */ {
 public:
  SAreaDeviceinfo();
  virtual ~SAreaDeviceinfo();

  SAreaDeviceinfo(const SAreaDeviceinfo& from);

  inline SAreaDeviceinfo& operator=(const SAreaDeviceinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAreaDeviceinfo(SAreaDeviceinfo&& from) noexcept
    : SAreaDeviceinfo() {
    *this = ::std::move(from);
  }

  inline SAreaDeviceinfo& operator=(SAreaDeviceinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAreaDeviceinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAreaDeviceinfo* internal_default_instance() {
    return reinterpret_cast<const SAreaDeviceinfo*>(
               &_SAreaDeviceinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(SAreaDeviceinfo* other);
  friend void swap(SAreaDeviceinfo& a, SAreaDeviceinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAreaDeviceinfo* New() const final {
    return CreateMaybeMessage<SAreaDeviceinfo>(NULL);
  }

  SAreaDeviceinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAreaDeviceinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAreaDeviceinfo& from);
  void MergeFrom(const SAreaDeviceinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAreaDeviceinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remark = 7;
  void clear_remark();
  static const int kRemarkFieldNumber = 7;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string NickName = 10;
  void clear_nickname();
  static const int kNickNameFieldNumber = 10;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 deviceid = 2;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // uint64 areaid = 3;
  void clear_areaid();
  static const int kAreaidFieldNumber = 3;
  ::google::protobuf::uint64 areaid() const;
  void set_areaid(::google::protobuf::uint64 value);

  // int64 InstallTime = 5;
  void clear_installtime();
  static const int kInstallTimeFieldNumber = 5;
  ::google::protobuf::int64 installtime() const;
  void set_installtime(::google::protobuf::int64 value);

  // int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 Electricity = 6;
  void clear_electricity();
  static const int kElectricityFieldNumber = 6;
  ::google::protobuf::int32 electricity() const;
  void set_electricity(::google::protobuf::int32 value);

  // uint64 InstallUserID = 8;
  void clear_installuserid();
  static const int kInstallUserIDFieldNumber = 8;
  ::google::protobuf::uint64 installuserid() const;
  void set_installuserid(::google::protobuf::uint64 value);

  // uint64 ManagerUserID = 9;
  void clear_manageruserid();
  static const int kManagerUserIDFieldNumber = 9;
  ::google::protobuf::uint64 manageruserid() const;
  void set_manageruserid(::google::protobuf::uint64 value);

  // int32 LockPush = 11;
  void clear_lockpush();
  static const int kLockPushFieldNumber = 11;
  ::google::protobuf::int32 lockpush() const;
  void set_lockpush(::google::protobuf::int32 value);

  // int32 AlarmPush = 12;
  void clear_alarmpush();
  static const int kAlarmPushFieldNumber = 12;
  ::google::protobuf::int32 alarmpush() const;
  void set_alarmpush(::google::protobuf::int32 value);

  // int32 InstallUserType = 13;
  void clear_installusertype();
  static const int kInstallUserTypeFieldNumber = 13;
  ::google::protobuf::int32 installusertype() const;
  void set_installusertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAreaDeviceinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 areaid_;
  ::google::protobuf::int64 installtime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 electricity_;
  ::google::protobuf::uint64 installuserid_;
  ::google::protobuf::uint64 manageruserid_;
  ::google::protobuf::int32 lockpush_;
  ::google::protobuf::int32 alarmpush_;
  ::google::protobuf::int32 installusertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameAreaUseRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameAreaUseRecord) */ {
 public:
  SFrameAreaUseRecord();
  virtual ~SFrameAreaUseRecord();

  SFrameAreaUseRecord(const SFrameAreaUseRecord& from);

  inline SFrameAreaUseRecord& operator=(const SFrameAreaUseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameAreaUseRecord(SFrameAreaUseRecord&& from) noexcept
    : SFrameAreaUseRecord() {
    *this = ::std::move(from);
  }

  inline SFrameAreaUseRecord& operator=(SFrameAreaUseRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameAreaUseRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameAreaUseRecord* internal_default_instance() {
    return reinterpret_cast<const SFrameAreaUseRecord*>(
               &_SFrameAreaUseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(SFrameAreaUseRecord* other);
  friend void swap(SFrameAreaUseRecord& a, SFrameAreaUseRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameAreaUseRecord* New() const final {
    return CreateMaybeMessage<SFrameAreaUseRecord>(NULL);
  }

  SFrameAreaUseRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameAreaUseRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameAreaUseRecord& from);
  void MergeFrom(const SFrameAreaUseRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameAreaUseRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SAreaUseRecord SAreaUseRecordlist = 1;
  int sareauserecordlist_size() const;
  void clear_sareauserecordlist();
  static const int kSAreaUseRecordlistFieldNumber = 1;
  ::ServerProtocol::SAreaUseRecord* mutable_sareauserecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaUseRecord >*
      mutable_sareauserecordlist();
  const ::ServerProtocol::SAreaUseRecord& sareauserecordlist(int index) const;
  ::ServerProtocol::SAreaUseRecord* add_sareauserecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaUseRecord >&
      sareauserecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameAreaUseRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaUseRecord > sareauserecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SAreaUseRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SAreaUseRecord) */ {
 public:
  SAreaUseRecord();
  virtual ~SAreaUseRecord();

  SAreaUseRecord(const SAreaUseRecord& from);

  inline SAreaUseRecord& operator=(const SAreaUseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SAreaUseRecord(SAreaUseRecord&& from) noexcept
    : SAreaUseRecord() {
    *this = ::std::move(from);
  }

  inline SAreaUseRecord& operator=(SAreaUseRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SAreaUseRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAreaUseRecord* internal_default_instance() {
    return reinterpret_cast<const SAreaUseRecord*>(
               &_SAreaUseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(SAreaUseRecord* other);
  friend void swap(SAreaUseRecord& a, SAreaUseRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SAreaUseRecord* New() const final {
    return CreateMaybeMessage<SAreaUseRecord>(NULL);
  }

  SAreaUseRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SAreaUseRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SAreaUseRecord& from);
  void MergeFrom(const SAreaUseRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAreaUseRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string remark = 7;
  void clear_remark();
  static const int kRemarkFieldNumber = 7;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 AreaID = 2;
  void clear_areaid();
  static const int kAreaIDFieldNumber = 2;
  ::google::protobuf::uint64 areaid() const;
  void set_areaid(::google::protobuf::uint64 value);

  // int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int64 timestep = 4;
  void clear_timestep();
  static const int kTimestepFieldNumber = 4;
  ::google::protobuf::int64 timestep() const;
  void set_timestep(::google::protobuf::int64 value);

  // uint64 userID = 5;
  void clear_userid();
  static const int kUserIDFieldNumber = 5;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int32 state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SAreaUseRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 areaid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 timestep_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameBuildPsw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameBuildPsw) */ {
 public:
  SFrameBuildPsw();
  virtual ~SFrameBuildPsw();

  SFrameBuildPsw(const SFrameBuildPsw& from);

  inline SFrameBuildPsw& operator=(const SFrameBuildPsw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameBuildPsw(SFrameBuildPsw&& from) noexcept
    : SFrameBuildPsw() {
    *this = ::std::move(from);
  }

  inline SFrameBuildPsw& operator=(SFrameBuildPsw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameBuildPsw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameBuildPsw* internal_default_instance() {
    return reinterpret_cast<const SFrameBuildPsw*>(
               &_SFrameBuildPsw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(SFrameBuildPsw* other);
  friend void swap(SFrameBuildPsw& a, SFrameBuildPsw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameBuildPsw* New() const final {
    return CreateMaybeMessage<SFrameBuildPsw>(NULL);
  }

  SFrameBuildPsw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameBuildPsw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameBuildPsw& from);
  void MergeFrom(const SFrameBuildPsw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameBuildPsw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SBuildPsw SBuildPswlist = 1;
  int sbuildpswlist_size() const;
  void clear_sbuildpswlist();
  static const int kSBuildPswlistFieldNumber = 1;
  ::ServerProtocol::SBuildPsw* mutable_sbuildpswlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SBuildPsw >*
      mutable_sbuildpswlist();
  const ::ServerProtocol::SBuildPsw& sbuildpswlist(int index) const;
  ::ServerProtocol::SBuildPsw* add_sbuildpswlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SBuildPsw >&
      sbuildpswlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameBuildPsw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SBuildPsw > sbuildpswlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SBuildPsw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SBuildPsw) */ {
 public:
  SBuildPsw();
  virtual ~SBuildPsw();

  SBuildPsw(const SBuildPsw& from);

  inline SBuildPsw& operator=(const SBuildPsw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SBuildPsw(SBuildPsw&& from) noexcept
    : SBuildPsw() {
    *this = ::std::move(from);
  }

  inline SBuildPsw& operator=(SBuildPsw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SBuildPsw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SBuildPsw* internal_default_instance() {
    return reinterpret_cast<const SBuildPsw*>(
               &_SBuildPsw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(SBuildPsw* other);
  friend void swap(SBuildPsw& a, SBuildPsw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SBuildPsw* New() const final {
    return CreateMaybeMessage<SBuildPsw>(NULL);
  }

  SBuildPsw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SBuildPsw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SBuildPsw& from);
  void MergeFrom(const SBuildPsw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SBuildPsw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // uint64 deviceid = 3;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 3;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // uint64 userid = 4;
  void clear_userid();
  static const int kUseridFieldNumber = 4;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SBuildPsw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDeviceBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDeviceBase) */ {
 public:
  SFrameDeviceBase();
  virtual ~SFrameDeviceBase();

  SFrameDeviceBase(const SFrameDeviceBase& from);

  inline SFrameDeviceBase& operator=(const SFrameDeviceBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDeviceBase(SFrameDeviceBase&& from) noexcept
    : SFrameDeviceBase() {
    *this = ::std::move(from);
  }

  inline SFrameDeviceBase& operator=(SFrameDeviceBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDeviceBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDeviceBase* internal_default_instance() {
    return reinterpret_cast<const SFrameDeviceBase*>(
               &_SFrameDeviceBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(SFrameDeviceBase* other);
  friend void swap(SFrameDeviceBase& a, SFrameDeviceBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDeviceBase* New() const final {
    return CreateMaybeMessage<SFrameDeviceBase>(NULL);
  }

  SFrameDeviceBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDeviceBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDeviceBase& from);
  void MergeFrom(const SFrameDeviceBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDeviceBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDeviceBaseinfo SDeviceBaseinfolist = 1;
  int sdevicebaseinfolist_size() const;
  void clear_sdevicebaseinfolist();
  static const int kSDeviceBaseinfolistFieldNumber = 1;
  ::ServerProtocol::SDeviceBaseinfo* mutable_sdevicebaseinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceBaseinfo >*
      mutable_sdevicebaseinfolist();
  const ::ServerProtocol::SDeviceBaseinfo& sdevicebaseinfolist(int index) const;
  ::ServerProtocol::SDeviceBaseinfo* add_sdevicebaseinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceBaseinfo >&
      sdevicebaseinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDeviceBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceBaseinfo > sdevicebaseinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDeviceBaseinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDeviceBaseinfo) */ {
 public:
  SDeviceBaseinfo();
  virtual ~SDeviceBaseinfo();

  SDeviceBaseinfo(const SDeviceBaseinfo& from);

  inline SDeviceBaseinfo& operator=(const SDeviceBaseinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDeviceBaseinfo(SDeviceBaseinfo&& from) noexcept
    : SDeviceBaseinfo() {
    *this = ::std::move(from);
  }

  inline SDeviceBaseinfo& operator=(SDeviceBaseinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDeviceBaseinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDeviceBaseinfo* internal_default_instance() {
    return reinterpret_cast<const SDeviceBaseinfo*>(
               &_SDeviceBaseinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(SDeviceBaseinfo* other);
  friend void swap(SDeviceBaseinfo& a, SDeviceBaseinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDeviceBaseinfo* New() const final {
    return CreateMaybeMessage<SDeviceBaseinfo>(NULL);
  }

  SDeviceBaseinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDeviceBaseinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDeviceBaseinfo& from);
  void MergeFrom(const SDeviceBaseinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDeviceBaseinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Mac = 3;
  void clear_mac();
  static const int kMacFieldNumber = 3;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string Electronickey = 8;
  void clear_electronickey();
  static const int kElectronickeyFieldNumber = 8;
  const ::std::string& electronickey() const;
  void set_electronickey(const ::std::string& value);
  #if LANG_CXX11
  void set_electronickey(::std::string&& value);
  #endif
  void set_electronickey(const char* value);
  void set_electronickey(const char* value, size_t size);
  ::std::string* mutable_electronickey();
  ::std::string* release_electronickey();
  void set_allocated_electronickey(::std::string* electronickey);

  // bytes DevModel = 10;
  void clear_devmodel();
  static const int kDevModelFieldNumber = 10;
  const ::std::string& devmodel() const;
  void set_devmodel(const ::std::string& value);
  #if LANG_CXX11
  void set_devmodel(::std::string&& value);
  #endif
  void set_devmodel(const char* value);
  void set_devmodel(const void* value, size_t size);
  ::std::string* mutable_devmodel();
  ::std::string* release_devmodel();
  void set_allocated_devmodel(::std::string* devmodel);

  // bytes Message = 19;
  void clear_message();
  static const int kMessageFieldNumber = 19;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string remark = 20;
  void clear_remark();
  static const int kRemarkFieldNumber = 20;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string NBDeviceID = 21;
  void clear_nbdeviceid();
  static const int kNBDeviceIDFieldNumber = 21;
  const ::std::string& nbdeviceid() const;
  void set_nbdeviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_nbdeviceid(::std::string&& value);
  #endif
  void set_nbdeviceid(const char* value);
  void set_nbdeviceid(const char* value, size_t size);
  ::std::string* mutable_nbdeviceid();
  ::std::string* release_nbdeviceid();
  void set_allocated_nbdeviceid(::std::string* nbdeviceid);

  // string Imei = 24;
  void clear_imei();
  static const int kImeiFieldNumber = 24;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int32 Type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 key = 6;
  void clear_key();
  static const int kKeyFieldNumber = 6;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // int32 Curkey = 7;
  void clear_curkey();
  static const int kCurkeyFieldNumber = 7;
  ::google::protobuf::int32 curkey() const;
  void set_curkey(::google::protobuf::int32 value);

  // int32 state = 9;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 FwVer = 11;
  void clear_fwver();
  static const int kFwVerFieldNumber = 11;
  ::google::protobuf::int32 fwver() const;
  void set_fwver(::google::protobuf::int32 value);

  // int32 Hwver = 12;
  void clear_hwver();
  static const int kHwverFieldNumber = 12;
  ::google::protobuf::int32 hwver() const;
  void set_hwver(::google::protobuf::int32 value);

  // int32 SysVer = 13;
  void clear_sysver();
  static const int kSysVerFieldNumber = 13;
  ::google::protobuf::int32 sysver() const;
  void set_sysver(::google::protobuf::int32 value);

  // int32 OtherVer = 14;
  void clear_otherver();
  static const int kOtherVerFieldNumber = 14;
  ::google::protobuf::int32 otherver() const;
  void set_otherver(::google::protobuf::int32 value);

  // int32 Tvoice = 15;
  void clear_tvoice();
  static const int kTvoiceFieldNumber = 15;
  ::google::protobuf::int32 tvoice() const;
  void set_tvoice(::google::protobuf::int32 value);

  // int32 Temperature = 16;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 16;
  ::google::protobuf::int32 temperature() const;
  void set_temperature(::google::protobuf::int32 value);

  // int64 CurTime = 18;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 18;
  ::google::protobuf::int64 curtime() const;
  void set_curtime(::google::protobuf::int64 value);

  // int32 Tvoltage = 17;
  void clear_tvoltage();
  static const int kTvoltageFieldNumber = 17;
  ::google::protobuf::int32 tvoltage() const;
  void set_tvoltage(::google::protobuf::int32 value);

  // int32 IdentyCodeKey = 22;
  void clear_identycodekey();
  static const int kIdentyCodeKeyFieldNumber = 22;
  ::google::protobuf::int32 identycodekey() const;
  void set_identycodekey(::google::protobuf::int32 value);

  // uint64 IdentyCode = 23;
  void clear_identycode();
  static const int kIdentyCodeFieldNumber = 23;
  ::google::protobuf::uint64 identycode() const;
  void set_identycode(::google::protobuf::uint64 value);

  // int32 DeviceCrc = 25;
  void clear_devicecrc();
  static const int kDeviceCrcFieldNumber = 25;
  ::google::protobuf::int32 devicecrc() const;
  void set_devicecrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDeviceBaseinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr electronickey_;
  ::google::protobuf::internal::ArenaStringPtr devmodel_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr nbdeviceid_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 curkey_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 fwver_;
  ::google::protobuf::int32 hwver_;
  ::google::protobuf::int32 sysver_;
  ::google::protobuf::int32 otherver_;
  ::google::protobuf::int32 tvoice_;
  ::google::protobuf::int32 temperature_;
  ::google::protobuf::int64 curtime_;
  ::google::protobuf::int32 tvoltage_;
  ::google::protobuf::int32 identycodekey_;
  ::google::protobuf::uint64 identycode_;
  ::google::protobuf::int32 devicecrc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFrameDevicePassword : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFrameDevicePassword) */ {
 public:
  SFrameDevicePassword();
  virtual ~SFrameDevicePassword();

  SFrameDevicePassword(const SFrameDevicePassword& from);

  inline SFrameDevicePassword& operator=(const SFrameDevicePassword& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFrameDevicePassword(SFrameDevicePassword&& from) noexcept
    : SFrameDevicePassword() {
    *this = ::std::move(from);
  }

  inline SFrameDevicePassword& operator=(SFrameDevicePassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFrameDevicePassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFrameDevicePassword* internal_default_instance() {
    return reinterpret_cast<const SFrameDevicePassword*>(
               &_SFrameDevicePassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(SFrameDevicePassword* other);
  friend void swap(SFrameDevicePassword& a, SFrameDevicePassword& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFrameDevicePassword* New() const final {
    return CreateMaybeMessage<SFrameDevicePassword>(NULL);
  }

  SFrameDevicePassword* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFrameDevicePassword>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFrameDevicePassword& from);
  void MergeFrom(const SFrameDevicePassword& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFrameDevicePassword* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SDevicePassword SDevicePasswordlist = 1;
  int sdevicepasswordlist_size() const;
  void clear_sdevicepasswordlist();
  static const int kSDevicePasswordlistFieldNumber = 1;
  ::ServerProtocol::SDevicePassword* mutable_sdevicepasswordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevicePassword >*
      mutable_sdevicepasswordlist();
  const ::ServerProtocol::SDevicePassword& sdevicepasswordlist(int index) const;
  ::ServerProtocol::SDevicePassword* add_sdevicepasswordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevicePassword >&
      sdevicepasswordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFrameDevicePassword)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevicePassword > sdevicepasswordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SDevicePassword : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SDevicePassword) */ {
 public:
  SDevicePassword();
  virtual ~SDevicePassword();

  SDevicePassword(const SDevicePassword& from);

  inline SDevicePassword& operator=(const SDevicePassword& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDevicePassword(SDevicePassword&& from) noexcept
    : SDevicePassword() {
    *this = ::std::move(from);
  }

  inline SDevicePassword& operator=(SDevicePassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SDevicePassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDevicePassword* internal_default_instance() {
    return reinterpret_cast<const SDevicePassword*>(
               &_SDevicePassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(SDevicePassword* other);
  friend void swap(SDevicePassword& a, SDevicePassword& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDevicePassword* New() const final {
    return CreateMaybeMessage<SDevicePassword>(NULL);
  }

  SDevicePassword* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDevicePassword>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDevicePassword& from);
  void MergeFrom(const SDevicePassword& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDevicePassword* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 bid = 3;
  void clear_bid();
  static const int kBidFieldNumber = 3;
  ::google::protobuf::uint64 bid() const;
  void set_bid(::google::protobuf::uint64 value);

  // int32 psw = 2;
  void clear_psw();
  static const int kPswFieldNumber = 2;
  ::google::protobuf::int32 psw() const;
  void set_psw(::google::protobuf::int32 value);

  // int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int64 Starttime = 5;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 5;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // int64 timestep = 6;
  void clear_timestep();
  static const int kTimestepFieldNumber = 6;
  ::google::protobuf::int64 timestep() const;
  void set_timestep(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SDevicePassword)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 bid_;
  ::google::protobuf::int32 psw_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 timestep_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramEleSendRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramEleSendRecord) */ {
 public:
  SFramEleSendRecord();
  virtual ~SFramEleSendRecord();

  SFramEleSendRecord(const SFramEleSendRecord& from);

  inline SFramEleSendRecord& operator=(const SFramEleSendRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramEleSendRecord(SFramEleSendRecord&& from) noexcept
    : SFramEleSendRecord() {
    *this = ::std::move(from);
  }

  inline SFramEleSendRecord& operator=(SFramEleSendRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramEleSendRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramEleSendRecord* internal_default_instance() {
    return reinterpret_cast<const SFramEleSendRecord*>(
               &_SFramEleSendRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(SFramEleSendRecord* other);
  friend void swap(SFramEleSendRecord& a, SFramEleSendRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramEleSendRecord* New() const final {
    return CreateMaybeMessage<SFramEleSendRecord>(NULL);
  }

  SFramEleSendRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramEleSendRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramEleSendRecord& from);
  void MergeFrom(const SFramEleSendRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramEleSendRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SEleSendRecord SEleSendRecordlist = 1;
  int selesendrecordlist_size() const;
  void clear_selesendrecordlist();
  static const int kSEleSendRecordlistFieldNumber = 1;
  ::ServerProtocol::SEleSendRecord* mutable_selesendrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SEleSendRecord >*
      mutable_selesendrecordlist();
  const ::ServerProtocol::SEleSendRecord& selesendrecordlist(int index) const;
  ::ServerProtocol::SEleSendRecord* add_selesendrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SEleSendRecord >&
      selesendrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramEleSendRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SEleSendRecord > selesendrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SEleSendRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SEleSendRecord) */ {
 public:
  SEleSendRecord();
  virtual ~SEleSendRecord();

  SEleSendRecord(const SEleSendRecord& from);

  inline SEleSendRecord& operator=(const SEleSendRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SEleSendRecord(SEleSendRecord&& from) noexcept
    : SEleSendRecord() {
    *this = ::std::move(from);
  }

  inline SEleSendRecord& operator=(SEleSendRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SEleSendRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SEleSendRecord* internal_default_instance() {
    return reinterpret_cast<const SEleSendRecord*>(
               &_SEleSendRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(SEleSendRecord* other);
  friend void swap(SEleSendRecord& a, SEleSendRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SEleSendRecord* New() const final {
    return CreateMaybeMessage<SEleSendRecord>(NULL);
  }

  SEleSendRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SEleSendRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SEleSendRecord& from);
  void MergeFrom(const SEleSendRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEleSendRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 DeviceID = 2;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // uint64 UserID = 4;
  void clear_userid();
  static const int kUserIDFieldNumber = 4;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 StateTime = 6;
  void clear_statetime();
  static const int kStateTimeFieldNumber = 6;
  ::google::protobuf::int64 statetime() const;
  void set_statetime(::google::protobuf::int64 value);

  // int64 EndTime = 7;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // uint64 SRoleId = 8;
  void clear_sroleid();
  static const int kSRoleIdFieldNumber = 8;
  ::google::protobuf::uint64 sroleid() const;
  void set_sroleid(::google::protobuf::uint64 value);

  // int32 State = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SEleSendRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 statetime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::uint64 sroleid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramMechanism : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramMechanism) */ {
 public:
  SFramMechanism();
  virtual ~SFramMechanism();

  SFramMechanism(const SFramMechanism& from);

  inline SFramMechanism& operator=(const SFramMechanism& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramMechanism(SFramMechanism&& from) noexcept
    : SFramMechanism() {
    *this = ::std::move(from);
  }

  inline SFramMechanism& operator=(SFramMechanism&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramMechanism& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramMechanism* internal_default_instance() {
    return reinterpret_cast<const SFramMechanism*>(
               &_SFramMechanism_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(SFramMechanism* other);
  friend void swap(SFramMechanism& a, SFramMechanism& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramMechanism* New() const final {
    return CreateMaybeMessage<SFramMechanism>(NULL);
  }

  SFramMechanism* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramMechanism>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramMechanism& from);
  void MergeFrom(const SFramMechanism& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramMechanism* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SMechanism SMechanismlist = 1;
  int smechanismlist_size() const;
  void clear_smechanismlist();
  static const int kSMechanismlistFieldNumber = 1;
  ::ServerProtocol::SMechanism* mutable_smechanismlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SMechanism >*
      mutable_smechanismlist();
  const ::ServerProtocol::SMechanism& smechanismlist(int index) const;
  ::ServerProtocol::SMechanism* add_smechanismlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SMechanism >&
      smechanismlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramMechanism)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SMechanism > smechanismlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMechanism : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SMechanism) */ {
 public:
  SMechanism();
  virtual ~SMechanism();

  SMechanism(const SMechanism& from);

  inline SMechanism& operator=(const SMechanism& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMechanism(SMechanism&& from) noexcept
    : SMechanism() {
    *this = ::std::move(from);
  }

  inline SMechanism& operator=(SMechanism&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMechanism& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMechanism* internal_default_instance() {
    return reinterpret_cast<const SMechanism*>(
               &_SMechanism_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(SMechanism* other);
  friend void swap(SMechanism& a, SMechanism& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMechanism* New() const final {
    return CreateMaybeMessage<SMechanism>(NULL);
  }

  SMechanism* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMechanism>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMechanism& from);
  void MergeFrom(const SMechanism& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMechanism* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string userName = 9;
  void clear_username();
  static const int kUserNameFieldNumber = 9;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string phone = 10;
  void clear_phone();
  static const int kPhoneFieldNumber = 10;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string address = 11;
  void clear_address();
  static const int kAddressFieldNumber = 11;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string remark = 12;
  void clear_remark();
  static const int kRemarkFieldNumber = 12;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string PictureUrl = 13;
  void clear_pictureurl();
  static const int kPictureUrlFieldNumber = 13;
  const ::std::string& pictureurl() const;
  void set_pictureurl(const ::std::string& value);
  #if LANG_CXX11
  void set_pictureurl(::std::string&& value);
  #endif
  void set_pictureurl(const char* value);
  void set_pictureurl(const char* value, size_t size);
  ::std::string* mutable_pictureurl();
  ::std::string* release_pictureurl();
  void set_allocated_pictureurl(::std::string* pictureurl);

  // string CallUrl = 14;
  void clear_callurl();
  static const int kCallUrlFieldNumber = 14;
  const ::std::string& callurl() const;
  void set_callurl(const ::std::string& value);
  #if LANG_CXX11
  void set_callurl(::std::string&& value);
  #endif
  void set_callurl(const char* value);
  void set_callurl(const char* value, size_t size);
  ::std::string* mutable_callurl();
  ::std::string* release_callurl();
  void set_allocated_callurl(::std::string* callurl);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 Number = 2;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // int32 lvl = 5;
  void clear_lvl();
  static const int kLvlFieldNumber = 5;
  ::google::protobuf::int32 lvl() const;
  void set_lvl(::google::protobuf::int32 value);

  // uint64 fmech = 4;
  void clear_fmech();
  static const int kFmechFieldNumber = 4;
  ::google::protobuf::uint64 fmech() const;
  void set_fmech(::google::protobuf::uint64 value);

  // int32 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 State = 7;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 config = 8;
  void clear_config();
  static const int kConfigFieldNumber = 8;
  ::google::protobuf::int32 config() const;
  void set_config(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SMechanism)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr pictureurl_;
  ::google::protobuf::internal::ArenaStringPtr callurl_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 lvl_;
  ::google::protobuf::uint64 fmech_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramPswKeyRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramPswKeyRecord) */ {
 public:
  SFramPswKeyRecord();
  virtual ~SFramPswKeyRecord();

  SFramPswKeyRecord(const SFramPswKeyRecord& from);

  inline SFramPswKeyRecord& operator=(const SFramPswKeyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramPswKeyRecord(SFramPswKeyRecord&& from) noexcept
    : SFramPswKeyRecord() {
    *this = ::std::move(from);
  }

  inline SFramPswKeyRecord& operator=(SFramPswKeyRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramPswKeyRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramPswKeyRecord* internal_default_instance() {
    return reinterpret_cast<const SFramPswKeyRecord*>(
               &_SFramPswKeyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(SFramPswKeyRecord* other);
  friend void swap(SFramPswKeyRecord& a, SFramPswKeyRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramPswKeyRecord* New() const final {
    return CreateMaybeMessage<SFramPswKeyRecord>(NULL);
  }

  SFramPswKeyRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramPswKeyRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramPswKeyRecord& from);
  void MergeFrom(const SFramPswKeyRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramPswKeyRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SPswKeyRecord SPswKeyRecordlist = 1;
  int spswkeyrecordlist_size() const;
  void clear_spswkeyrecordlist();
  static const int kSPswKeyRecordlistFieldNumber = 1;
  ::ServerProtocol::SPswKeyRecord* mutable_spswkeyrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswKeyRecord >*
      mutable_spswkeyrecordlist();
  const ::ServerProtocol::SPswKeyRecord& spswkeyrecordlist(int index) const;
  ::ServerProtocol::SPswKeyRecord* add_spswkeyrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswKeyRecord >&
      spswkeyrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramPswKeyRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswKeyRecord > spswkeyrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SPswKeyRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SPswKeyRecord) */ {
 public:
  SPswKeyRecord();
  virtual ~SPswKeyRecord();

  SPswKeyRecord(const SPswKeyRecord& from);

  inline SPswKeyRecord& operator=(const SPswKeyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SPswKeyRecord(SPswKeyRecord&& from) noexcept
    : SPswKeyRecord() {
    *this = ::std::move(from);
  }

  inline SPswKeyRecord& operator=(SPswKeyRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SPswKeyRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPswKeyRecord* internal_default_instance() {
    return reinterpret_cast<const SPswKeyRecord*>(
               &_SPswKeyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(SPswKeyRecord* other);
  friend void swap(SPswKeyRecord& a, SPswKeyRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SPswKeyRecord* New() const final {
    return CreateMaybeMessage<SPswKeyRecord>(NULL);
  }

  SPswKeyRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SPswKeyRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SPswKeyRecord& from);
  void MergeFrom(const SPswKeyRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPswKeyRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::uint64 userid() const;
  void set_userid(::google::protobuf::uint64 value);

  // int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // uint64 deviceID = 4;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 4;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SPswKeyRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::uint64 deviceid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramPswSendRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramPswSendRecord) */ {
 public:
  SFramPswSendRecord();
  virtual ~SFramPswSendRecord();

  SFramPswSendRecord(const SFramPswSendRecord& from);

  inline SFramPswSendRecord& operator=(const SFramPswSendRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramPswSendRecord(SFramPswSendRecord&& from) noexcept
    : SFramPswSendRecord() {
    *this = ::std::move(from);
  }

  inline SFramPswSendRecord& operator=(SFramPswSendRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramPswSendRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramPswSendRecord* internal_default_instance() {
    return reinterpret_cast<const SFramPswSendRecord*>(
               &_SFramPswSendRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(SFramPswSendRecord* other);
  friend void swap(SFramPswSendRecord& a, SFramPswSendRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramPswSendRecord* New() const final {
    return CreateMaybeMessage<SFramPswSendRecord>(NULL);
  }

  SFramPswSendRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramPswSendRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramPswSendRecord& from);
  void MergeFrom(const SFramPswSendRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramPswSendRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SPswSendRecord SPswSendRecordlist = 1;
  int spswsendrecordlist_size() const;
  void clear_spswsendrecordlist();
  static const int kSPswSendRecordlistFieldNumber = 1;
  ::ServerProtocol::SPswSendRecord* mutable_spswsendrecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswSendRecord >*
      mutable_spswsendrecordlist();
  const ::ServerProtocol::SPswSendRecord& spswsendrecordlist(int index) const;
  ::ServerProtocol::SPswSendRecord* add_spswsendrecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswSendRecord >&
      spswsendrecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramPswSendRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswSendRecord > spswsendrecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SPswSendRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SPswSendRecord) */ {
 public:
  SPswSendRecord();
  virtual ~SPswSendRecord();

  SPswSendRecord(const SPswSendRecord& from);

  inline SPswSendRecord& operator=(const SPswSendRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SPswSendRecord(SPswSendRecord&& from) noexcept
    : SPswSendRecord() {
    *this = ::std::move(from);
  }

  inline SPswSendRecord& operator=(SPswSendRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SPswSendRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPswSendRecord* internal_default_instance() {
    return reinterpret_cast<const SPswSendRecord*>(
               &_SPswSendRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(SPswSendRecord* other);
  friend void swap(SPswSendRecord& a, SPswSendRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SPswSendRecord* New() const final {
    return CreateMaybeMessage<SPswSendRecord>(NULL);
  }

  SPswSendRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SPswSendRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SPswSendRecord& from);
  void MergeFrom(const SPswSendRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPswSendRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone = 5;
  void clear_phone();
  static const int kPhoneFieldNumber = 5;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 pswID = 2;
  void clear_pswid();
  static const int kPswIDFieldNumber = 2;
  ::google::protobuf::uint64 pswid() const;
  void set_pswid(::google::protobuf::uint64 value);

  // int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // uint64 SRoleId = 6;
  void clear_sroleid();
  static const int kSRoleIdFieldNumber = 6;
  ::google::protobuf::uint64 sroleid() const;
  void set_sroleid(::google::protobuf::uint64 value);

  // int32 State = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SPswSendRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 pswid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::uint64 sroleid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramRoleinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramRoleinfo) */ {
 public:
  SFramRoleinfo();
  virtual ~SFramRoleinfo();

  SFramRoleinfo(const SFramRoleinfo& from);

  inline SFramRoleinfo& operator=(const SFramRoleinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramRoleinfo(SFramRoleinfo&& from) noexcept
    : SFramRoleinfo() {
    *this = ::std::move(from);
  }

  inline SFramRoleinfo& operator=(SFramRoleinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramRoleinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramRoleinfo* internal_default_instance() {
    return reinterpret_cast<const SFramRoleinfo*>(
               &_SFramRoleinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(SFramRoleinfo* other);
  friend void swap(SFramRoleinfo& a, SFramRoleinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramRoleinfo* New() const final {
    return CreateMaybeMessage<SFramRoleinfo>(NULL);
  }

  SFramRoleinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramRoleinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramRoleinfo& from);
  void MergeFrom(const SFramRoleinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramRoleinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SRoleinfo SRoleinfolist = 1;
  int sroleinfolist_size() const;
  void clear_sroleinfolist();
  static const int kSRoleinfolistFieldNumber = 1;
  ::ServerProtocol::SRoleinfo* mutable_sroleinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleinfo >*
      mutable_sroleinfolist();
  const ::ServerProtocol::SRoleinfo& sroleinfolist(int index) const;
  ::ServerProtocol::SRoleinfo* add_sroleinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleinfo >&
      sroleinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramRoleinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleinfo > sroleinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SRoleinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SRoleinfo) */ {
 public:
  SRoleinfo();
  virtual ~SRoleinfo();

  SRoleinfo(const SRoleinfo& from);

  inline SRoleinfo& operator=(const SRoleinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SRoleinfo(SRoleinfo&& from) noexcept
    : SRoleinfo() {
    *this = ::std::move(from);
  }

  inline SRoleinfo& operator=(SRoleinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SRoleinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRoleinfo* internal_default_instance() {
    return reinterpret_cast<const SRoleinfo*>(
               &_SRoleinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(SRoleinfo* other);
  friend void swap(SRoleinfo& a, SRoleinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SRoleinfo* New() const final {
    return CreateMaybeMessage<SRoleinfo>(NULL);
  }

  SRoleinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SRoleinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SRoleinfo& from);
  void MergeFrom(const SRoleinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRoleinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string CardID = 3;
  void clear_cardid();
  static const int kCardIDFieldNumber = 3;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const char* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // string phone = 4;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string pwd = 12;
  void clear_pwd();
  static const int kPwdFieldNumber = 12;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string RegisTration = 14;
  void clear_registration();
  static const int kRegisTrationFieldNumber = 14;
  const ::std::string& registration() const;
  void set_registration(const ::std::string& value);
  #if LANG_CXX11
  void set_registration(::std::string&& value);
  #endif
  void set_registration(const char* value);
  void set_registration(const char* value, size_t size);
  ::std::string* mutable_registration();
  ::std::string* release_registration();
  void set_allocated_registration(::std::string* registration);

  // string Email = 15;
  void clear_email();
  static const int kEmailFieldNumber = 15;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string remark = 16;
  void clear_remark();
  static const int kRemarkFieldNumber = 16;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 Birthday = 7;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 7;
  ::google::protobuf::int32 birthday() const;
  void set_birthday(::google::protobuf::int32 value);

  // int64 LoginTime = 8;
  void clear_logintime();
  static const int kLoginTimeFieldNumber = 8;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // int64 Regtime = 9;
  void clear_regtime();
  static const int kRegtimeFieldNumber = 9;
  ::google::protobuf::int64 regtime() const;
  void set_regtime(::google::protobuf::int64 value);

  // uint64 CreateUserID = 10;
  void clear_createuserid();
  static const int kCreateUserIDFieldNumber = 10;
  ::google::protobuf::uint64 createuserid() const;
  void set_createuserid(::google::protobuf::uint64 value);

  // uint64 CountryCode = 13;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 13;
  ::google::protobuf::uint64 countrycode() const;
  void set_countrycode(::google::protobuf::uint64 value);

  // int32 state = 11;
  void clear_state();
  static const int kStateFieldNumber = 11;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 AppType = 18;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 18;
  ::google::protobuf::int32 apptype() const;
  void set_apptype(::google::protobuf::int32 value);

  // uint64 Identycode = 17;
  void clear_identycode();
  static const int kIdentycodeFieldNumber = 17;
  ::google::protobuf::uint64 identycode() const;
  void set_identycode(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SRoleinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr registration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 birthday_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int64 regtime_;
  ::google::protobuf::uint64 createuserid_;
  ::google::protobuf::uint64 countrycode_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 apptype_;
  ::google::protobuf::uint64 identycode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramRoleType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramRoleType) */ {
 public:
  SFramRoleType();
  virtual ~SFramRoleType();

  SFramRoleType(const SFramRoleType& from);

  inline SFramRoleType& operator=(const SFramRoleType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramRoleType(SFramRoleType&& from) noexcept
    : SFramRoleType() {
    *this = ::std::move(from);
  }

  inline SFramRoleType& operator=(SFramRoleType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramRoleType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramRoleType* internal_default_instance() {
    return reinterpret_cast<const SFramRoleType*>(
               &_SFramRoleType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(SFramRoleType* other);
  friend void swap(SFramRoleType& a, SFramRoleType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramRoleType* New() const final {
    return CreateMaybeMessage<SFramRoleType>(NULL);
  }

  SFramRoleType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramRoleType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramRoleType& from);
  void MergeFrom(const SFramRoleType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramRoleType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SRoleType SRoleTypelist = 1;
  int sroletypelist_size() const;
  void clear_sroletypelist();
  static const int kSRoleTypelistFieldNumber = 1;
  ::ServerProtocol::SRoleType* mutable_sroletypelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleType >*
      mutable_sroletypelist();
  const ::ServerProtocol::SRoleType& sroletypelist(int index) const;
  ::ServerProtocol::SRoleType* add_sroletypelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleType >&
      sroletypelist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramRoleType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleType > sroletypelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SRoleType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SRoleType) */ {
 public:
  SRoleType();
  virtual ~SRoleType();

  SRoleType(const SRoleType& from);

  inline SRoleType& operator=(const SRoleType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SRoleType(SRoleType&& from) noexcept
    : SRoleType() {
    *this = ::std::move(from);
  }

  inline SRoleType& operator=(SRoleType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SRoleType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRoleType* internal_default_instance() {
    return reinterpret_cast<const SRoleType*>(
               &_SRoleType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(SRoleType* other);
  friend void swap(SRoleType& a, SRoleType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SRoleType* New() const final {
    return CreateMaybeMessage<SRoleType>(NULL);
  }

  SRoleType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SRoleType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SRoleType& from);
  void MergeFrom(const SRoleType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRoleType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 authority = 3;
  void clear_authority();
  static const int kAuthorityFieldNumber = 3;
  ::google::protobuf::uint64 authority() const;
  void set_authority(::google::protobuf::uint64 value);

  // int32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SRoleType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 authority_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramToolAuthority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramToolAuthority) */ {
 public:
  SFramToolAuthority();
  virtual ~SFramToolAuthority();

  SFramToolAuthority(const SFramToolAuthority& from);

  inline SFramToolAuthority& operator=(const SFramToolAuthority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramToolAuthority(SFramToolAuthority&& from) noexcept
    : SFramToolAuthority() {
    *this = ::std::move(from);
  }

  inline SFramToolAuthority& operator=(SFramToolAuthority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramToolAuthority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramToolAuthority* internal_default_instance() {
    return reinterpret_cast<const SFramToolAuthority*>(
               &_SFramToolAuthority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(SFramToolAuthority* other);
  friend void swap(SFramToolAuthority& a, SFramToolAuthority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramToolAuthority* New() const final {
    return CreateMaybeMessage<SFramToolAuthority>(NULL);
  }

  SFramToolAuthority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramToolAuthority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramToolAuthority& from);
  void MergeFrom(const SFramToolAuthority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramToolAuthority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SToolAuthority SToolAuthoritylist = 1;
  int stoolauthoritylist_size() const;
  void clear_stoolauthoritylist();
  static const int kSToolAuthoritylistFieldNumber = 1;
  ::ServerProtocol::SToolAuthority* mutable_stoolauthoritylist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SToolAuthority >*
      mutable_stoolauthoritylist();
  const ::ServerProtocol::SToolAuthority& stoolauthoritylist(int index) const;
  ::ServerProtocol::SToolAuthority* add_stoolauthoritylist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SToolAuthority >&
      stoolauthoritylist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramToolAuthority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SToolAuthority > stoolauthoritylist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SToolAuthority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SToolAuthority) */ {
 public:
  SToolAuthority();
  virtual ~SToolAuthority();

  SToolAuthority(const SToolAuthority& from);

  inline SToolAuthority& operator=(const SToolAuthority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SToolAuthority(SToolAuthority&& from) noexcept
    : SToolAuthority() {
    *this = ::std::move(from);
  }

  inline SToolAuthority& operator=(SToolAuthority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SToolAuthority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SToolAuthority* internal_default_instance() {
    return reinterpret_cast<const SToolAuthority*>(
               &_SToolAuthority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(SToolAuthority* other);
  friend void swap(SToolAuthority& a, SToolAuthority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SToolAuthority* New() const final {
    return CreateMaybeMessage<SToolAuthority>(NULL);
  }

  SToolAuthority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SToolAuthority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SToolAuthority& from);
  void MergeFrom(const SToolAuthority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SToolAuthority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Url = 6;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // uint64 FID = 5;
  void clear_fid();
  static const int kFIDFieldNumber = 5;
  ::google::protobuf::uint64 fid() const;
  void set_fid(::google::protobuf::uint64 value);

  // int32 ToolType = 4;
  void clear_tooltype();
  static const int kToolTypeFieldNumber = 4;
  ::google::protobuf::int32 tooltype() const;
  void set_tooltype(::google::protobuf::int32 value);

  // int32 sort = 7;
  void clear_sort();
  static const int kSortFieldNumber = 7;
  ::google::protobuf::int32 sort() const;
  void set_sort(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SToolAuthority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint64 fid_;
  ::google::protobuf::int32 tooltype_;
  ::google::protobuf::int32 sort_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramUseRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramUseRecord) */ {
 public:
  SFramUseRecord();
  virtual ~SFramUseRecord();

  SFramUseRecord(const SFramUseRecord& from);

  inline SFramUseRecord& operator=(const SFramUseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramUseRecord(SFramUseRecord&& from) noexcept
    : SFramUseRecord() {
    *this = ::std::move(from);
  }

  inline SFramUseRecord& operator=(SFramUseRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramUseRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramUseRecord* internal_default_instance() {
    return reinterpret_cast<const SFramUseRecord*>(
               &_SFramUseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(SFramUseRecord* other);
  friend void swap(SFramUseRecord& a, SFramUseRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramUseRecord* New() const final {
    return CreateMaybeMessage<SFramUseRecord>(NULL);
  }

  SFramUseRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramUseRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramUseRecord& from);
  void MergeFrom(const SFramUseRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramUseRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SUseRecord SUseRecordlist = 1;
  int suserecordlist_size() const;
  void clear_suserecordlist();
  static const int kSUseRecordlistFieldNumber = 1;
  ::ServerProtocol::SUseRecord* mutable_suserecordlist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUseRecord >*
      mutable_suserecordlist();
  const ::ServerProtocol::SUseRecord& suserecordlist(int index) const;
  ::ServerProtocol::SUseRecord* add_suserecordlist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUseRecord >&
      suserecordlist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramUseRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUseRecord > suserecordlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUseRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SUseRecord) */ {
 public:
  SUseRecord();
  virtual ~SUseRecord();

  SUseRecord(const SUseRecord& from);

  inline SUseRecord& operator=(const SUseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUseRecord(SUseRecord&& from) noexcept
    : SUseRecord() {
    *this = ::std::move(from);
  }

  inline SUseRecord& operator=(SUseRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUseRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUseRecord* internal_default_instance() {
    return reinterpret_cast<const SUseRecord*>(
               &_SUseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(SUseRecord* other);
  friend void swap(SUseRecord& a, SUseRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUseRecord* New() const final {
    return CreateMaybeMessage<SUseRecord>(NULL);
  }

  SUseRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUseRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUseRecord& from);
  void MergeFrom(const SUseRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUseRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string User = 2;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string Mac = 3;
  void clear_mac();
  static const int kMacFieldNumber = 3;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string remark = 9;
  void clear_remark();
  static const int kRemarkFieldNumber = 9;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string GwMac = 10;
  void clear_gwmac();
  static const int kGwMacFieldNumber = 10;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const char* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 usertime = 5;
  void clear_usertime();
  static const int kUsertimeFieldNumber = 5;
  ::google::protobuf::int64 usertime() const;
  void set_usertime(::google::protobuf::int64 value);

  // int32 usetype = 4;
  void clear_usetype();
  static const int kUsetypeFieldNumber = 4;
  ::google::protobuf::int32 usetype() const;
  void set_usetype(::google::protobuf::int32 value);

  // int32 LogType = 7;
  void clear_logtype();
  static const int kLogTypeFieldNumber = 7;
  ::google::protobuf::int32 logtype() const;
  void set_logtype(::google::protobuf::int32 value);

  // int64 uptime = 6;
  void clear_uptime();
  static const int kUptimeFieldNumber = 6;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // uint64 AreaDeviceID = 11;
  void clear_areadeviceid();
  static const int kAreaDeviceIDFieldNumber = 11;
  ::google::protobuf::uint64 areadeviceid() const;
  void set_areadeviceid(::google::protobuf::uint64 value);

  // int32 CarType = 8;
  void clear_cartype();
  static const int kCarTypeFieldNumber = 8;
  ::google::protobuf::int32 cartype() const;
  void set_cartype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SUseRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 usertime_;
  ::google::protobuf::int32 usetype_;
  ::google::protobuf::int32 logtype_;
  ::google::protobuf::int64 uptime_;
  ::google::protobuf::uint64 areadeviceid_;
  ::google::protobuf::int32 cartype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramUserinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramUserinfo) */ {
 public:
  SFramUserinfo();
  virtual ~SFramUserinfo();

  SFramUserinfo(const SFramUserinfo& from);

  inline SFramUserinfo& operator=(const SFramUserinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramUserinfo(SFramUserinfo&& from) noexcept
    : SFramUserinfo() {
    *this = ::std::move(from);
  }

  inline SFramUserinfo& operator=(SFramUserinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramUserinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramUserinfo* internal_default_instance() {
    return reinterpret_cast<const SFramUserinfo*>(
               &_SFramUserinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(SFramUserinfo* other);
  friend void swap(SFramUserinfo& a, SFramUserinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramUserinfo* New() const final {
    return CreateMaybeMessage<SFramUserinfo>(NULL);
  }

  SFramUserinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramUserinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramUserinfo& from);
  void MergeFrom(const SFramUserinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramUserinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SUserinfo SUserinfolist = 1;
  int suserinfolist_size() const;
  void clear_suserinfolist();
  static const int kSUserinfolistFieldNumber = 1;
  ::ServerProtocol::SUserinfo* mutable_suserinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUserinfo >*
      mutable_suserinfolist();
  const ::ServerProtocol::SUserinfo& suserinfolist(int index) const;
  ::ServerProtocol::SUserinfo* add_suserinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUserinfo >&
      suserinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramUserinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUserinfo > suserinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SUserinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SUserinfo) */ {
 public:
  SUserinfo();
  virtual ~SUserinfo();

  SUserinfo(const SUserinfo& from);

  inline SUserinfo& operator=(const SUserinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SUserinfo(SUserinfo&& from) noexcept
    : SUserinfo() {
    *this = ::std::move(from);
  }

  inline SUserinfo& operator=(SUserinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SUserinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SUserinfo* internal_default_instance() {
    return reinterpret_cast<const SUserinfo*>(
               &_SUserinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(SUserinfo* other);
  friend void swap(SUserinfo& a, SUserinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SUserinfo* New() const final {
    return CreateMaybeMessage<SUserinfo>(NULL);
  }

  SUserinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SUserinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SUserinfo& from);
  void MergeFrom(const SUserinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUserinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string CardID = 3;
  void clear_cardid();
  static const int kCardIDFieldNumber = 3;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const char* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // string phone = 4;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string pwd = 11;
  void clear_pwd();
  static const int kPwdFieldNumber = 11;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string Ico = 12;
  void clear_ico();
  static const int kIcoFieldNumber = 12;
  const ::std::string& ico() const;
  void set_ico(const ::std::string& value);
  #if LANG_CXX11
  void set_ico(::std::string&& value);
  #endif
  void set_ico(const char* value);
  void set_ico(const char* value, size_t size);
  ::std::string* mutable_ico();
  ::std::string* release_ico();
  void set_allocated_ico(::std::string* ico);

  // string remark = 13;
  void clear_remark();
  static const int kRemarkFieldNumber = 13;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string RegisTration = 15;
  void clear_registration();
  static const int kRegisTrationFieldNumber = 15;
  const ::std::string& registration() const;
  void set_registration(const ::std::string& value);
  #if LANG_CXX11
  void set_registration(::std::string&& value);
  #endif
  void set_registration(const char* value);
  void set_registration(const char* value, size_t size);
  ::std::string* mutable_registration();
  ::std::string* release_registration();
  void set_allocated_registration(::std::string* registration);

  // string Email = 16;
  void clear_email();
  static const int kEmailFieldNumber = 16;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string Token = 18;
  void clear_token();
  static const int kTokenFieldNumber = 18;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string LoginEquip = 20;
  void clear_loginequip();
  static const int kLoginEquipFieldNumber = 20;
  const ::std::string& loginequip() const;
  void set_loginequip(const ::std::string& value);
  #if LANG_CXX11
  void set_loginequip(::std::string&& value);
  #endif
  void set_loginequip(const char* value);
  void set_loginequip(const char* value, size_t size);
  ::std::string* mutable_loginequip();
  ::std::string* release_loginequip();
  void set_allocated_loginequip(::std::string* loginequip);

  // string FaceUrl = 21;
  void clear_faceurl();
  static const int kFaceUrlFieldNumber = 21;
  const ::std::string& faceurl() const;
  void set_faceurl(const ::std::string& value);
  #if LANG_CXX11
  void set_faceurl(::std::string&& value);
  #endif
  void set_faceurl(const char* value);
  void set_faceurl(const char* value, size_t size);
  ::std::string* mutable_faceurl();
  ::std::string* release_faceurl();
  void set_allocated_faceurl(::std::string* faceurl);

  // string FaceConditionUrl = 22;
  void clear_faceconditionurl();
  static const int kFaceConditionUrlFieldNumber = 22;
  const ::std::string& faceconditionurl() const;
  void set_faceconditionurl(const ::std::string& value);
  #if LANG_CXX11
  void set_faceconditionurl(::std::string&& value);
  #endif
  void set_faceconditionurl(const char* value);
  void set_faceconditionurl(const char* value, size_t size);
  ::std::string* mutable_faceconditionurl();
  ::std::string* release_faceconditionurl();
  void set_allocated_faceconditionurl(::std::string* faceconditionurl);

  // string HMCondition = 24;
  void clear_hmcondition();
  static const int kHMConditionFieldNumber = 24;
  const ::std::string& hmcondition() const;
  void set_hmcondition(const ::std::string& value);
  #if LANG_CXX11
  void set_hmcondition(::std::string&& value);
  #endif
  void set_hmcondition(const char* value);
  void set_hmcondition(const char* value, size_t size);
  ::std::string* mutable_hmcondition();
  ::std::string* release_hmcondition();
  void set_allocated_hmcondition(::std::string* hmcondition);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // int32 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int64 LoginTime = 8;
  void clear_logintime();
  static const int kLoginTimeFieldNumber = 8;
  ::google::protobuf::int64 logintime() const;
  void set_logintime(::google::protobuf::int64 value);

  // int32 Birthday = 7;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 7;
  ::google::protobuf::int32 birthday() const;
  void set_birthday(::google::protobuf::int32 value);

  // int32 State = 10;
  void clear_state();
  static const int kStateFieldNumber = 10;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int64 Regtime = 9;
  void clear_regtime();
  static const int kRegtimeFieldNumber = 9;
  ::google::protobuf::int64 regtime() const;
  void set_regtime(::google::protobuf::int64 value);

  // uint64 CountryCode = 14;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 14;
  ::google::protobuf::uint64 countrycode() const;
  void set_countrycode(::google::protobuf::uint64 value);

  // int64 TokenTime = 19;
  void clear_tokentime();
  static const int kTokenTimeFieldNumber = 19;
  ::google::protobuf::int64 tokentime() const;
  void set_tokentime(::google::protobuf::int64 value);

  // int32 UpdateState = 17;
  void clear_updatestate();
  static const int kUpdateStateFieldNumber = 17;
  ::google::protobuf::int32 updatestate() const;
  void set_updatestate(::google::protobuf::int32 value);

  // int32 AppType = 25;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 25;
  ::google::protobuf::int32 apptype() const;
  void set_apptype(::google::protobuf::int32 value);

  // int64 UpFaceImageTime = 23;
  void clear_upfaceimagetime();
  static const int kUpFaceImageTimeFieldNumber = 23;
  ::google::protobuf::int64 upfaceimagetime() const;
  void set_upfaceimagetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SUserinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr ico_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr registration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr loginequip_;
  ::google::protobuf::internal::ArenaStringPtr faceurl_;
  ::google::protobuf::internal::ArenaStringPtr faceconditionurl_;
  ::google::protobuf::internal::ArenaStringPtr hmcondition_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int32 birthday_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 regtime_;
  ::google::protobuf::uint64 countrycode_;
  ::google::protobuf::int64 tokentime_;
  ::google::protobuf::int32 updatestate_;
  ::google::protobuf::int32 apptype_;
  ::google::protobuf::int64 upfaceimagetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SFramShareKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SFramShareKey) */ {
 public:
  SFramShareKey();
  virtual ~SFramShareKey();

  SFramShareKey(const SFramShareKey& from);

  inline SFramShareKey& operator=(const SFramShareKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SFramShareKey(SFramShareKey&& from) noexcept
    : SFramShareKey() {
    *this = ::std::move(from);
  }

  inline SFramShareKey& operator=(SFramShareKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SFramShareKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFramShareKey* internal_default_instance() {
    return reinterpret_cast<const SFramShareKey*>(
               &_SFramShareKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(SFramShareKey* other);
  friend void swap(SFramShareKey& a, SFramShareKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SFramShareKey* New() const final {
    return CreateMaybeMessage<SFramShareKey>(NULL);
  }

  SFramShareKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SFramShareKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SFramShareKey& from);
  void MergeFrom(const SFramShareKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFramShareKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ShareContext = 1;
  void clear_sharecontext();
  static const int kShareContextFieldNumber = 1;
  const ::std::string& sharecontext() const;
  void set_sharecontext(const ::std::string& value);
  #if LANG_CXX11
  void set_sharecontext(::std::string&& value);
  #endif
  void set_sharecontext(const char* value);
  void set_sharecontext(const char* value, size_t size);
  ::std::string* mutable_sharecontext();
  ::std::string* release_sharecontext();
  void set_allocated_sharecontext(::std::string* sharecontext);

  // string Phone = 2;
  void clear_phone();
  static const int kPhoneFieldNumber = 2;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SFramShareKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sharecontext_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerProtocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemCode

// int32 state = 1;
inline void SystemCode::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SystemCode::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemCode.state)
  return state_;
}
inline void SystemCode::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemCode.state)
}

// -------------------------------------------------------------------

// H2SRequeseData

// int32 ActionType = 1;
inline void H2SRequeseData::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 H2SRequeseData::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.H2SRequeseData.ActionType)
  return actiontype_;
}
inline void H2SRequeseData::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.H2SRequeseData.ActionType)
}

// uint64 DBId = 2;
inline void H2SRequeseData::clear_dbid() {
  dbid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 H2SRequeseData::dbid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.H2SRequeseData.DBId)
  return dbid_;
}
inline void H2SRequeseData::set_dbid(::google::protobuf::uint64 value) {
  
  dbid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.H2SRequeseData.DBId)
}

// -------------------------------------------------------------------

// SFrameDeviceHeartRecord

// repeated .ServerProtocol.DeviceHeartRecord DeviceHeartRecordlist = 1;
inline int SFrameDeviceHeartRecord::deviceheartrecordlist_size() const {
  return deviceheartrecordlist_.size();
}
inline void SFrameDeviceHeartRecord::clear_deviceheartrecordlist() {
  deviceheartrecordlist_.Clear();
}
inline ::ServerProtocol::DeviceHeartRecord* SFrameDeviceHeartRecord::mutable_deviceheartrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceHeartRecord.DeviceHeartRecordlist)
  return deviceheartrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceHeartRecord >*
SFrameDeviceHeartRecord::mutable_deviceheartrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceHeartRecord.DeviceHeartRecordlist)
  return &deviceheartrecordlist_;
}
inline const ::ServerProtocol::DeviceHeartRecord& SFrameDeviceHeartRecord::deviceheartrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceHeartRecord.DeviceHeartRecordlist)
  return deviceheartrecordlist_.Get(index);
}
inline ::ServerProtocol::DeviceHeartRecord* SFrameDeviceHeartRecord::add_deviceheartrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceHeartRecord.DeviceHeartRecordlist)
  return deviceheartrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceHeartRecord >&
SFrameDeviceHeartRecord::deviceheartrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceHeartRecord.DeviceHeartRecordlist)
  return deviceheartrecordlist_;
}

// -------------------------------------------------------------------

// DeviceHeartRecord

// uint64 Id = 1;
inline void DeviceHeartRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceHeartRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceHeartRecord.Id)
  return id_;
}
inline void DeviceHeartRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceHeartRecord.Id)
}

// string Mac = 2;
inline void DeviceHeartRecord::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceHeartRecord::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceHeartRecord.Mac)
  return mac_.GetNoArena();
}
inline void DeviceHeartRecord::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceHeartRecord.Mac)
}
#if LANG_CXX11
inline void DeviceHeartRecord::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceHeartRecord.Mac)
}
#endif
inline void DeviceHeartRecord::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceHeartRecord.Mac)
}
inline void DeviceHeartRecord::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceHeartRecord.Mac)
}
inline ::std::string* DeviceHeartRecord::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceHeartRecord.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceHeartRecord::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceHeartRecord.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceHeartRecord::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceHeartRecord.Mac)
}

// uint64 ModifyTime = 3;
inline void DeviceHeartRecord::clear_modifytime() {
  modifytime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceHeartRecord::modifytime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceHeartRecord.ModifyTime)
  return modifytime_;
}
inline void DeviceHeartRecord::set_modifytime(::google::protobuf::uint64 value) {
  
  modifytime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceHeartRecord.ModifyTime)
}

// int32 Value = 4;
inline void DeviceHeartRecord::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 DeviceHeartRecord::value() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceHeartRecord.Value)
  return value_;
}
inline void DeviceHeartRecord::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceHeartRecord.Value)
}

// int32 ActionType = 5;
inline void DeviceHeartRecord::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 DeviceHeartRecord::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceHeartRecord.ActionType)
  return actiontype_;
}
inline void DeviceHeartRecord::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceHeartRecord.ActionType)
}

// -------------------------------------------------------------------

// SFrameHmRecord

// repeated .ServerProtocol.HmRecord HmRecordlist = 1;
inline int SFrameHmRecord::hmrecordlist_size() const {
  return hmrecordlist_.size();
}
inline void SFrameHmRecord::clear_hmrecordlist() {
  hmrecordlist_.Clear();
}
inline ::ServerProtocol::HmRecord* SFrameHmRecord::mutable_hmrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameHmRecord.HmRecordlist)
  return hmrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::HmRecord >*
SFrameHmRecord::mutable_hmrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameHmRecord.HmRecordlist)
  return &hmrecordlist_;
}
inline const ::ServerProtocol::HmRecord& SFrameHmRecord::hmrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameHmRecord.HmRecordlist)
  return hmrecordlist_.Get(index);
}
inline ::ServerProtocol::HmRecord* SFrameHmRecord::add_hmrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameHmRecord.HmRecordlist)
  return hmrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::HmRecord >&
SFrameHmRecord::hmrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameHmRecord.HmRecordlist)
  return hmrecordlist_;
}

// -------------------------------------------------------------------

// HmRecord

// uint64 Id = 1;
inline void HmRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HmRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.Id)
  return id_;
}
inline void HmRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.Id)
}

// string Mac = 2;
inline void HmRecord::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmRecord::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.Mac)
  return mac_.GetNoArena();
}
inline void HmRecord::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.Mac)
}
#if LANG_CXX11
inline void HmRecord::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.HmRecord.Mac)
}
#endif
inline void HmRecord::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.HmRecord.Mac)
}
inline void HmRecord::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.HmRecord.Mac)
}
inline ::std::string* HmRecord::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.HmRecord.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmRecord::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.HmRecord.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmRecord::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.HmRecord.Mac)
}

// string GwMac = 3;
inline void HmRecord::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmRecord::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.GwMac)
  return gwmac_.GetNoArena();
}
inline void HmRecord::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.GwMac)
}
#if LANG_CXX11
inline void HmRecord::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.HmRecord.GwMac)
}
#endif
inline void HmRecord::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.HmRecord.GwMac)
}
inline void HmRecord::set_gwmac(const char* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.HmRecord.GwMac)
}
inline ::std::string* HmRecord::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.HmRecord.GwMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmRecord::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.HmRecord.GwMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmRecord::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.HmRecord.GwMac)
}

// uint64 UserId = 4;
inline void HmRecord::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HmRecord::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.UserId)
  return userid_;
}
inline void HmRecord::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.UserId)
}

// int64 Time = 5;
inline void HmRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.Time)
  return time_;
}
inline void HmRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.Time)
}

// int32 State = 6;
inline void HmRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 HmRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.State)
  return state_;
}
inline void HmRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.State)
}

// int64 BeginTime = 7;
inline void HmRecord::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmRecord::begintime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.BeginTime)
  return begintime_;
}
inline void HmRecord::set_begintime(::google::protobuf::int64 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.BeginTime)
}

// int64 EndTime = 8;
inline void HmRecord::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmRecord::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.EndTime)
  return endtime_;
}
inline void HmRecord::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.EndTime)
}

// int32 ActionType = 9;
inline void HmRecord::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 HmRecord::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmRecord.ActionType)
  return actiontype_;
}
inline void HmRecord::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmRecord.ActionType)
}

// -------------------------------------------------------------------

// SFrameFirmwareVersion

// string DownUrl = 1;
inline void SFrameFirmwareVersion::clear_downurl() {
  downurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersion::downurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersion.DownUrl)
  return downurl_.GetNoArena();
}
inline void SFrameFirmwareVersion::set_downurl(const ::std::string& value) {
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersion.DownUrl)
}
#if LANG_CXX11
inline void SFrameFirmwareVersion::set_downurl(::std::string&& value) {
  
  downurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersion.DownUrl)
}
#endif
inline void SFrameFirmwareVersion::set_downurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersion.DownUrl)
}
inline void SFrameFirmwareVersion::set_downurl(const char* value, size_t size) {
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersion.DownUrl)
}
inline ::std::string* SFrameFirmwareVersion::mutable_downurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersion.DownUrl)
  return downurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersion::release_downurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersion.DownUrl)
  
  return downurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersion::set_allocated_downurl(::std::string* downurl) {
  if (downurl != NULL) {
    
  } else {
    
  }
  downurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersion.DownUrl)
}

// uint64 VersionID = 2;
inline void SFrameFirmwareVersion::clear_versionid() {
  versionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameFirmwareVersion::versionid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersion.VersionID)
  return versionid_;
}
inline void SFrameFirmwareVersion::set_versionid(::google::protobuf::uint64 value) {
  
  versionid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersion.VersionID)
}

// -------------------------------------------------------------------

// SFrameFirmwareVersionAnswer

// uint64 VersionID = 1;
inline void SFrameFirmwareVersionAnswer::clear_versionid() {
  versionid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameFirmwareVersionAnswer::versionid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.VersionID)
  return versionid_;
}
inline void SFrameFirmwareVersionAnswer::set_versionid(::google::protobuf::uint64 value) {
  
  versionid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.VersionID)
}

// string ProductName = 2;
inline void SFrameFirmwareVersionAnswer::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersionAnswer::productname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
  return productname_.GetNoArena();
}
inline void SFrameFirmwareVersionAnswer::set_productname(const ::std::string& value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
}
#if LANG_CXX11
inline void SFrameFirmwareVersionAnswer::set_productname(::std::string&& value) {
  
  productname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
}
#endif
inline void SFrameFirmwareVersionAnswer::set_productname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
}
inline void SFrameFirmwareVersionAnswer::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
}
inline ::std::string* SFrameFirmwareVersionAnswer::mutable_productname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersionAnswer::release_productname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
  
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersionAnswer::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersionAnswer.ProductName)
}

// string Model = 3;
inline void SFrameFirmwareVersionAnswer::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersionAnswer::model() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
  return model_.GetNoArena();
}
inline void SFrameFirmwareVersionAnswer::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
}
#if LANG_CXX11
inline void SFrameFirmwareVersionAnswer::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
}
#endif
inline void SFrameFirmwareVersionAnswer::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
}
inline void SFrameFirmwareVersionAnswer::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
}
inline ::std::string* SFrameFirmwareVersionAnswer::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersionAnswer::release_model() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersionAnswer::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersionAnswer.Model)
}

// string Manufactory = 4;
inline void SFrameFirmwareVersionAnswer::clear_manufactory() {
  manufactory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersionAnswer::manufactory() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
  return manufactory_.GetNoArena();
}
inline void SFrameFirmwareVersionAnswer::set_manufactory(const ::std::string& value) {
  
  manufactory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
}
#if LANG_CXX11
inline void SFrameFirmwareVersionAnswer::set_manufactory(::std::string&& value) {
  
  manufactory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
}
#endif
inline void SFrameFirmwareVersionAnswer::set_manufactory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufactory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
}
inline void SFrameFirmwareVersionAnswer::set_manufactory(const char* value, size_t size) {
  
  manufactory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
}
inline ::std::string* SFrameFirmwareVersionAnswer::mutable_manufactory() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
  return manufactory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersionAnswer::release_manufactory() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
  
  return manufactory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersionAnswer::set_allocated_manufactory(::std::string* manufactory) {
  if (manufactory != NULL) {
    
  } else {
    
  }
  manufactory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufactory);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersionAnswer.Manufactory)
}

// string DeviceType = 5;
inline void SFrameFirmwareVersionAnswer::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersionAnswer::devicetype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
  return devicetype_.GetNoArena();
}
inline void SFrameFirmwareVersionAnswer::set_devicetype(const ::std::string& value) {
  
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
}
#if LANG_CXX11
inline void SFrameFirmwareVersionAnswer::set_devicetype(::std::string&& value) {
  
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
}
#endif
inline void SFrameFirmwareVersionAnswer::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
}
inline void SFrameFirmwareVersionAnswer::set_devicetype(const char* value, size_t size) {
  
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
}
inline ::std::string* SFrameFirmwareVersionAnswer::mutable_devicetype() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersionAnswer::release_devicetype() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
  
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersionAnswer::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    
  } else {
    
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersionAnswer.DeviceType)
}

// string DevicePn = 6;
inline void SFrameFirmwareVersionAnswer::clear_devicepn() {
  devicepn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFirmwareVersionAnswer::devicepn() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
  return devicepn_.GetNoArena();
}
inline void SFrameFirmwareVersionAnswer::set_devicepn(const ::std::string& value) {
  
  devicepn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
}
#if LANG_CXX11
inline void SFrameFirmwareVersionAnswer::set_devicepn(::std::string&& value) {
  
  devicepn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
}
#endif
inline void SFrameFirmwareVersionAnswer::set_devicepn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicepn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
}
inline void SFrameFirmwareVersionAnswer::set_devicepn(const char* value, size_t size) {
  
  devicepn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
}
inline ::std::string* SFrameFirmwareVersionAnswer::mutable_devicepn() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
  return devicepn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFirmwareVersionAnswer::release_devicepn() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
  
  return devicepn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFirmwareVersionAnswer::set_allocated_devicepn(::std::string* devicepn) {
  if (devicepn != NULL) {
    
  } else {
    
  }
  devicepn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicepn);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFirmwareVersionAnswer.DevicePn)
}

// -------------------------------------------------------------------

// SFrameNBAIOT

// uint64 CardsAreaDeviceID = 1;
inline void SFrameNBAIOT::clear_cardsareadeviceid() {
  cardsareadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameNBAIOT::cardsareadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOT.CardsAreaDeviceID)
  return cardsareadeviceid_;
}
inline void SFrameNBAIOT::set_cardsareadeviceid(::google::protobuf::uint64 value) {
  
  cardsareadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOT.CardsAreaDeviceID)
}

// string Data = 2;
inline void SFrameNBAIOT::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBAIOT::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOT.Data)
  return data_.GetNoArena();
}
inline void SFrameNBAIOT::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOT.Data)
}
#if LANG_CXX11
inline void SFrameNBAIOT::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBAIOT.Data)
}
#endif
inline void SFrameNBAIOT::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBAIOT.Data)
}
inline void SFrameNBAIOT::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBAIOT.Data)
}
inline ::std::string* SFrameNBAIOT::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBAIOT.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBAIOT::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBAIOT.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBAIOT::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBAIOT.Data)
}

// string Imei = 3;
inline void SFrameNBAIOT::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBAIOT::imei() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOT.Imei)
  return imei_.GetNoArena();
}
inline void SFrameNBAIOT::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOT.Imei)
}
#if LANG_CXX11
inline void SFrameNBAIOT::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBAIOT.Imei)
}
#endif
inline void SFrameNBAIOT::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBAIOT.Imei)
}
inline void SFrameNBAIOT::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBAIOT.Imei)
}
inline ::std::string* SFrameNBAIOT::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBAIOT.Imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBAIOT::release_imei() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBAIOT.Imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBAIOT::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBAIOT.Imei)
}

// string resid = 4;
inline void SFrameNBAIOT::clear_resid() {
  resid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBAIOT::resid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOT.resid)
  return resid_.GetNoArena();
}
inline void SFrameNBAIOT::set_resid(const ::std::string& value) {
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOT.resid)
}
#if LANG_CXX11
inline void SFrameNBAIOT::set_resid(::std::string&& value) {
  
  resid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBAIOT.resid)
}
#endif
inline void SFrameNBAIOT::set_resid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBAIOT.resid)
}
inline void SFrameNBAIOT::set_resid(const char* value, size_t size) {
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBAIOT.resid)
}
inline ::std::string* SFrameNBAIOT::mutable_resid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBAIOT.resid)
  return resid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBAIOT::release_resid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBAIOT.resid)
  
  return resid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBAIOT::set_allocated_resid(::std::string* resid) {
  if (resid != NULL) {
    
  } else {
    
  }
  resid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBAIOT.resid)
}

// -------------------------------------------------------------------

// SFrameNBAIOTAnswer

// int32 State = 1;
inline void SFrameNBAIOTAnswer::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SFrameNBAIOTAnswer::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOTAnswer.State)
  return state_;
}
inline void SFrameNBAIOTAnswer::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOTAnswer.State)
}

// uint64 CardsAreaDeviceID = 2;
inline void SFrameNBAIOTAnswer::clear_cardsareadeviceid() {
  cardsareadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameNBAIOTAnswer::cardsareadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBAIOTAnswer.CardsAreaDeviceID)
  return cardsareadeviceid_;
}
inline void SFrameNBAIOTAnswer::set_cardsareadeviceid(::google::protobuf::uint64 value) {
  
  cardsareadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBAIOTAnswer.CardsAreaDeviceID)
}

// -------------------------------------------------------------------

// SFrameNBWhiteList

// uint64 CardsAreaDeviceID = 1;
inline void SFrameNBWhiteList::clear_cardsareadeviceid() {
  cardsareadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameNBWhiteList::cardsareadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteList.CardsAreaDeviceID)
  return cardsareadeviceid_;
}
inline void SFrameNBWhiteList::set_cardsareadeviceid(::google::protobuf::uint64 value) {
  
  cardsareadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteList.CardsAreaDeviceID)
}

// string Data = 2;
inline void SFrameNBWhiteList::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBWhiteList::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteList.Data)
  return data_.GetNoArena();
}
inline void SFrameNBWhiteList::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteList.Data)
}
#if LANG_CXX11
inline void SFrameNBWhiteList::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBWhiteList.Data)
}
#endif
inline void SFrameNBWhiteList::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBWhiteList.Data)
}
inline void SFrameNBWhiteList::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBWhiteList.Data)
}
inline ::std::string* SFrameNBWhiteList::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBWhiteList.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBWhiteList::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBWhiteList.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBWhiteList::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBWhiteList.Data)
}

// string Imei = 3;
inline void SFrameNBWhiteList::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBWhiteList::imei() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteList.Imei)
  return imei_.GetNoArena();
}
inline void SFrameNBWhiteList::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteList.Imei)
}
#if LANG_CXX11
inline void SFrameNBWhiteList::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBWhiteList.Imei)
}
#endif
inline void SFrameNBWhiteList::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBWhiteList.Imei)
}
inline void SFrameNBWhiteList::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBWhiteList.Imei)
}
inline ::std::string* SFrameNBWhiteList::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBWhiteList.Imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBWhiteList::release_imei() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBWhiteList.Imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBWhiteList::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBWhiteList.Imei)
}

// string resid = 4;
inline void SFrameNBWhiteList::clear_resid() {
  resid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameNBWhiteList::resid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteList.resid)
  return resid_.GetNoArena();
}
inline void SFrameNBWhiteList::set_resid(const ::std::string& value) {
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteList.resid)
}
#if LANG_CXX11
inline void SFrameNBWhiteList::set_resid(::std::string&& value) {
  
  resid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameNBWhiteList.resid)
}
#endif
inline void SFrameNBWhiteList::set_resid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameNBWhiteList.resid)
}
inline void SFrameNBWhiteList::set_resid(const char* value, size_t size) {
  
  resid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameNBWhiteList.resid)
}
inline ::std::string* SFrameNBWhiteList::mutable_resid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNBWhiteList.resid)
  return resid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameNBWhiteList::release_resid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameNBWhiteList.resid)
  
  return resid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameNBWhiteList::set_allocated_resid(::std::string* resid) {
  if (resid != NULL) {
    
  } else {
    
  }
  resid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameNBWhiteList.resid)
}

// -------------------------------------------------------------------

// SFrameNBWhiteListAnswer

// int32 State = 1;
inline void SFrameNBWhiteListAnswer::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SFrameNBWhiteListAnswer::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteListAnswer.State)
  return state_;
}
inline void SFrameNBWhiteListAnswer::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteListAnswer.State)
}

// uint64 CardsAreaDeviceID = 2;
inline void SFrameNBWhiteListAnswer::clear_cardsareadeviceid() {
  cardsareadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameNBWhiteListAnswer::cardsareadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNBWhiteListAnswer.CardsAreaDeviceID)
  return cardsareadeviceid_;
}
inline void SFrameNBWhiteListAnswer::set_cardsareadeviceid(::google::protobuf::uint64 value) {
  
  cardsareadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameNBWhiteListAnswer.CardsAreaDeviceID)
}

// -------------------------------------------------------------------

// SFrameFaceRecognition

// string DownUrl = 1;
inline void SFrameFaceRecognition::clear_downurl() {
  downurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFaceRecognition::downurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFaceRecognition.DownUrl)
  return downurl_.GetNoArena();
}
inline void SFrameFaceRecognition::set_downurl(const ::std::string& value) {
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFaceRecognition.DownUrl)
}
#if LANG_CXX11
inline void SFrameFaceRecognition::set_downurl(::std::string&& value) {
  
  downurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFaceRecognition.DownUrl)
}
#endif
inline void SFrameFaceRecognition::set_downurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFaceRecognition.DownUrl)
}
inline void SFrameFaceRecognition::set_downurl(const char* value, size_t size) {
  
  downurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFaceRecognition.DownUrl)
}
inline ::std::string* SFrameFaceRecognition::mutable_downurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFaceRecognition.DownUrl)
  return downurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFaceRecognition::release_downurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFaceRecognition.DownUrl)
  
  return downurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFaceRecognition::set_allocated_downurl(::std::string* downurl) {
  if (downurl != NULL) {
    
  } else {
    
  }
  downurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), downurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFaceRecognition.DownUrl)
}

// uint64 UserID = 2;
inline void SFrameFaceRecognition::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameFaceRecognition::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFaceRecognition.UserID)
  return userid_;
}
inline void SFrameFaceRecognition::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFaceRecognition.UserID)
}

// -------------------------------------------------------------------

// SFrameFaceRecognitionAnswer

// string CharacteristicCodeUrl = 1;
inline void SFrameFaceRecognitionAnswer::clear_characteristiccodeurl() {
  characteristiccodeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFrameFaceRecognitionAnswer::characteristiccodeurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
  return characteristiccodeurl_.GetNoArena();
}
inline void SFrameFaceRecognitionAnswer::set_characteristiccodeurl(const ::std::string& value) {
  
  characteristiccodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
}
#if LANG_CXX11
inline void SFrameFaceRecognitionAnswer::set_characteristiccodeurl(::std::string&& value) {
  
  characteristiccodeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
}
#endif
inline void SFrameFaceRecognitionAnswer::set_characteristiccodeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  characteristiccodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
}
inline void SFrameFaceRecognitionAnswer::set_characteristiccodeurl(const char* value, size_t size) {
  
  characteristiccodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
}
inline ::std::string* SFrameFaceRecognitionAnswer::mutable_characteristiccodeurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
  return characteristiccodeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFrameFaceRecognitionAnswer::release_characteristiccodeurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
  
  return characteristiccodeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFrameFaceRecognitionAnswer::set_allocated_characteristiccodeurl(::std::string* characteristiccodeurl) {
  if (characteristiccodeurl != NULL) {
    
  } else {
    
  }
  characteristiccodeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), characteristiccodeurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFrameFaceRecognitionAnswer.CharacteristicCodeUrl)
}

// uint64 UserID = 2;
inline void SFrameFaceRecognitionAnswer::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SFrameFaceRecognitionAnswer::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFaceRecognitionAnswer.UserID)
  return userid_;
}
inline void SFrameFaceRecognitionAnswer::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SFrameFaceRecognitionAnswer.UserID)
}

// -------------------------------------------------------------------

// SFrameJgPushRecord

// repeated .ServerProtocol.JgPushRecord JgPushRecordlist = 1;
inline int SFrameJgPushRecord::jgpushrecordlist_size() const {
  return jgpushrecordlist_.size();
}
inline void SFrameJgPushRecord::clear_jgpushrecordlist() {
  jgpushrecordlist_.Clear();
}
inline ::ServerProtocol::JgPushRecord* SFrameJgPushRecord::mutable_jgpushrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameJgPushRecord.JgPushRecordlist)
  return jgpushrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::JgPushRecord >*
SFrameJgPushRecord::mutable_jgpushrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameJgPushRecord.JgPushRecordlist)
  return &jgpushrecordlist_;
}
inline const ::ServerProtocol::JgPushRecord& SFrameJgPushRecord::jgpushrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameJgPushRecord.JgPushRecordlist)
  return jgpushrecordlist_.Get(index);
}
inline ::ServerProtocol::JgPushRecord* SFrameJgPushRecord::add_jgpushrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameJgPushRecord.JgPushRecordlist)
  return jgpushrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::JgPushRecord >&
SFrameJgPushRecord::jgpushrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameJgPushRecord.JgPushRecordlist)
  return jgpushrecordlist_;
}

// -------------------------------------------------------------------

// JgPushRecord

// uint64 Id = 1;
inline void JgPushRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JgPushRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.Id)
  return id_;
}
inline void JgPushRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.Id)
}

// int32 PushType = 2;
inline void JgPushRecord::clear_pushtype() {
  pushtype_ = 0;
}
inline ::google::protobuf::int32 JgPushRecord::pushtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.PushType)
  return pushtype_;
}
inline void JgPushRecord::set_pushtype(::google::protobuf::int32 value) {
  
  pushtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.PushType)
}

// int32 ActionType = 3;
inline void JgPushRecord::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 JgPushRecord::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.ActionType)
  return actiontype_;
}
inline void JgPushRecord::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.ActionType)
}

// string Alert = 4;
inline void JgPushRecord::clear_alert() {
  alert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JgPushRecord::alert() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.Alert)
  return alert_.GetNoArena();
}
inline void JgPushRecord::set_alert(const ::std::string& value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.Alert)
}
#if LANG_CXX11
inline void JgPushRecord::set_alert(::std::string&& value) {
  
  alert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.JgPushRecord.Alert)
}
#endif
inline void JgPushRecord::set_alert(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.JgPushRecord.Alert)
}
inline void JgPushRecord::set_alert(const char* value, size_t size) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.JgPushRecord.Alert)
}
inline ::std::string* JgPushRecord::mutable_alert() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.JgPushRecord.Alert)
  return alert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JgPushRecord::release_alert() {
  // @@protoc_insertion_point(field_release:ServerProtocol.JgPushRecord.Alert)
  
  return alert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JgPushRecord::set_allocated_alert(::std::string* alert) {
  if (alert != NULL) {
    
  } else {
    
  }
  alert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alert);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.JgPushRecord.Alert)
}

// string Title = 5;
inline void JgPushRecord::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JgPushRecord::title() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.Title)
  return title_.GetNoArena();
}
inline void JgPushRecord::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.Title)
}
#if LANG_CXX11
inline void JgPushRecord::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.JgPushRecord.Title)
}
#endif
inline void JgPushRecord::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.JgPushRecord.Title)
}
inline void JgPushRecord::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.JgPushRecord.Title)
}
inline ::std::string* JgPushRecord::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.JgPushRecord.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JgPushRecord::release_title() {
  // @@protoc_insertion_point(field_release:ServerProtocol.JgPushRecord.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JgPushRecord::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.JgPushRecord.Title)
}

// string Content = 6;
inline void JgPushRecord::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JgPushRecord::content() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.Content)
  return content_.GetNoArena();
}
inline void JgPushRecord::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.Content)
}
#if LANG_CXX11
inline void JgPushRecord::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.JgPushRecord.Content)
}
#endif
inline void JgPushRecord::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.JgPushRecord.Content)
}
inline void JgPushRecord::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.JgPushRecord.Content)
}
inline ::std::string* JgPushRecord::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.JgPushRecord.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JgPushRecord::release_content() {
  // @@protoc_insertion_point(field_release:ServerProtocol.JgPushRecord.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JgPushRecord::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.JgPushRecord.Content)
}

// string ContentTitle = 7;
inline void JgPushRecord::clear_contenttitle() {
  contenttitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JgPushRecord::contenttitle() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.ContentTitle)
  return contenttitle_.GetNoArena();
}
inline void JgPushRecord::set_contenttitle(const ::std::string& value) {
  
  contenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.ContentTitle)
}
#if LANG_CXX11
inline void JgPushRecord::set_contenttitle(::std::string&& value) {
  
  contenttitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.JgPushRecord.ContentTitle)
}
#endif
inline void JgPushRecord::set_contenttitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.JgPushRecord.ContentTitle)
}
inline void JgPushRecord::set_contenttitle(const char* value, size_t size) {
  
  contenttitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.JgPushRecord.ContentTitle)
}
inline ::std::string* JgPushRecord::mutable_contenttitle() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.JgPushRecord.ContentTitle)
  return contenttitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JgPushRecord::release_contenttitle() {
  // @@protoc_insertion_point(field_release:ServerProtocol.JgPushRecord.ContentTitle)
  
  return contenttitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JgPushRecord::set_allocated_contenttitle(::std::string* contenttitle) {
  if (contenttitle != NULL) {
    
  } else {
    
  }
  contenttitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttitle);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.JgPushRecord.ContentTitle)
}

// string TagAlias = 8;
inline void JgPushRecord::clear_tagalias() {
  tagalias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JgPushRecord::tagalias() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.TagAlias)
  return tagalias_.GetNoArena();
}
inline void JgPushRecord::set_tagalias(const ::std::string& value) {
  
  tagalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.TagAlias)
}
#if LANG_CXX11
inline void JgPushRecord::set_tagalias(::std::string&& value) {
  
  tagalias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.JgPushRecord.TagAlias)
}
#endif
inline void JgPushRecord::set_tagalias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tagalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.JgPushRecord.TagAlias)
}
inline void JgPushRecord::set_tagalias(const char* value, size_t size) {
  
  tagalias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.JgPushRecord.TagAlias)
}
inline ::std::string* JgPushRecord::mutable_tagalias() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.JgPushRecord.TagAlias)
  return tagalias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JgPushRecord::release_tagalias() {
  // @@protoc_insertion_point(field_release:ServerProtocol.JgPushRecord.TagAlias)
  
  return tagalias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JgPushRecord::set_allocated_tagalias(::std::string* tagalias) {
  if (tagalias != NULL) {
    
  } else {
    
  }
  tagalias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagalias);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.JgPushRecord.TagAlias)
}

// int32 PushAppType = 9;
inline void JgPushRecord::clear_pushapptype() {
  pushapptype_ = 0;
}
inline ::google::protobuf::int32 JgPushRecord::pushapptype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.PushAppType)
  return pushapptype_;
}
inline void JgPushRecord::set_pushapptype(::google::protobuf::int32 value) {
  
  pushapptype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.PushAppType)
}

// int64 PushTime = 10;
inline void JgPushRecord::clear_pushtime() {
  pushtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JgPushRecord::pushtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.JgPushRecord.PushTime)
  return pushtime_;
}
inline void JgPushRecord::set_pushtime(::google::protobuf::int64 value) {
  
  pushtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.JgPushRecord.PushTime)
}

// -------------------------------------------------------------------

// SFrameVersionRangle

// repeated .ServerProtocol.VersionRangle VersionRanglelist = 1;
inline int SFrameVersionRangle::versionranglelist_size() const {
  return versionranglelist_.size();
}
inline void SFrameVersionRangle::clear_versionranglelist() {
  versionranglelist_.Clear();
}
inline ::ServerProtocol::VersionRangle* SFrameVersionRangle::mutable_versionranglelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameVersionRangle.VersionRanglelist)
  return versionranglelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::VersionRangle >*
SFrameVersionRangle::mutable_versionranglelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameVersionRangle.VersionRanglelist)
  return &versionranglelist_;
}
inline const ::ServerProtocol::VersionRangle& SFrameVersionRangle::versionranglelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameVersionRangle.VersionRanglelist)
  return versionranglelist_.Get(index);
}
inline ::ServerProtocol::VersionRangle* SFrameVersionRangle::add_versionranglelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameVersionRangle.VersionRanglelist)
  return versionranglelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::VersionRangle >&
SFrameVersionRangle::versionranglelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameVersionRangle.VersionRanglelist)
  return versionranglelist_;
}

// -------------------------------------------------------------------

// VersionRangle

// uint64 Id = 1;
inline void VersionRangle::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VersionRangle::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionRangle.Id)
  return id_;
}
inline void VersionRangle::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionRangle.Id)
}

// uint64 VerID = 2;
inline void VersionRangle::clear_verid() {
  verid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VersionRangle::verid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionRangle.VerID)
  return verid_;
}
inline void VersionRangle::set_verid(::google::protobuf::uint64 value) {
  
  verid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionRangle.VerID)
}

// uint64 UserID = 3;
inline void VersionRangle::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VersionRangle::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionRangle.UserID)
  return userid_;
}
inline void VersionRangle::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionRangle.UserID)
}

// int32 State = 4;
inline void VersionRangle::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 VersionRangle::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionRangle.State)
  return state_;
}
inline void VersionRangle::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionRangle.State)
}

// int32 UserType = 5;
inline void VersionRangle::clear_usertype() {
  usertype_ = 0;
}
inline ::google::protobuf::int32 VersionRangle::usertype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionRangle.UserType)
  return usertype_;
}
inline void VersionRangle::set_usertype(::google::protobuf::int32 value) {
  
  usertype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionRangle.UserType)
}

// -------------------------------------------------------------------

// SFrameVersion

// repeated .ServerProtocol.Version Versionlist = 1;
inline int SFrameVersion::versionlist_size() const {
  return versionlist_.size();
}
inline void SFrameVersion::clear_versionlist() {
  versionlist_.Clear();
}
inline ::ServerProtocol::Version* SFrameVersion::mutable_versionlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameVersion.Versionlist)
  return versionlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Version >*
SFrameVersion::mutable_versionlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameVersion.Versionlist)
  return &versionlist_;
}
inline const ::ServerProtocol::Version& SFrameVersion::versionlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameVersion.Versionlist)
  return versionlist_.Get(index);
}
inline ::ServerProtocol::Version* SFrameVersion::add_versionlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameVersion.Versionlist)
  return versionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Version >&
SFrameVersion::versionlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameVersion.Versionlist)
  return versionlist_;
}

// -------------------------------------------------------------------

// Version

// uint64 Id = 1;
inline void Version::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Version::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.Id)
  return id_;
}
inline void Version::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.Id)
}

// int32 ProductType = 2;
inline void Version::clear_producttype() {
  producttype_ = 0;
}
inline ::google::protobuf::int32 Version::producttype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.ProductType)
  return producttype_;
}
inline void Version::set_producttype(::google::protobuf::int32 value) {
  
  producttype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.ProductType)
}

// int32 ReleaseMode = 3;
inline void Version::clear_releasemode() {
  releasemode_ = 0;
}
inline ::google::protobuf::int32 Version::releasemode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.ReleaseMode)
  return releasemode_;
}
inline void Version::set_releasemode(::google::protobuf::int32 value) {
  
  releasemode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.ReleaseMode)
}

// int32 MandatoryState = 4;
inline void Version::clear_mandatorystate() {
  mandatorystate_ = 0;
}
inline ::google::protobuf::int32 Version::mandatorystate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.MandatoryState)
  return mandatorystate_;
}
inline void Version::set_mandatorystate(::google::protobuf::int32 value) {
  
  mandatorystate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.MandatoryState)
}

// int32 UpdateRange = 5;
inline void Version::clear_updaterange() {
  updaterange_ = 0;
}
inline ::google::protobuf::int32 Version::updaterange() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.UpdateRange)
  return updaterange_;
}
inline void Version::set_updaterange(::google::protobuf::int32 value) {
  
  updaterange_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.UpdateRange)
}

// string Url = 6;
inline void Version::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::url() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.Url)
  return url_.GetNoArena();
}
inline void Version::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.Url)
}
#if LANG_CXX11
inline void Version::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Version.Url)
}
#endif
inline void Version::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Version.Url)
}
inline void Version::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Version.Url)
}
inline ::std::string* Version::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Version.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_url() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Version.Url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Version.Url)
}

// int64 VersionCode = 7;
inline void Version::clear_versioncode() {
  versioncode_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Version::versioncode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.VersionCode)
  return versioncode_;
}
inline void Version::set_versioncode(::google::protobuf::int64 value) {
  
  versioncode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.VersionCode)
}

// int64 FileSize = 8;
inline void Version::clear_filesize() {
  filesize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Version::filesize() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.FileSize)
  return filesize_;
}
inline void Version::set_filesize(::google::protobuf::int64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.FileSize)
}

// int64 UpTime = 9;
inline void Version::clear_uptime() {
  uptime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Version::uptime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.UpTime)
  return uptime_;
}
inline void Version::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.UpTime)
}

// string Log = 10;
inline void Version::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::log() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.Log)
  return log_.GetNoArena();
}
inline void Version::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.Log)
}
#if LANG_CXX11
inline void Version::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Version.Log)
}
#endif
inline void Version::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Version.Log)
}
inline void Version::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Version.Log)
}
inline ::std::string* Version::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Version.Log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_log() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Version.Log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Version.Log)
}

// int32 State = 11;
inline void Version::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 Version::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.State)
  return state_;
}
inline void Version::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.State)
}

// int32 UpdateCount = 12;
inline void Version::clear_updatecount() {
  updatecount_ = 0;
}
inline ::google::protobuf::int32 Version::updatecount() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.UpdateCount)
  return updatecount_;
}
inline void Version::set_updatecount(::google::protobuf::int32 value) {
  
  updatecount_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.UpdateCount)
}

// string ProductName = 13;
inline void Version::clear_productname() {
  productname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Version::productname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Version.ProductName)
  return productname_.GetNoArena();
}
inline void Version::set_productname(const ::std::string& value) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Version.ProductName)
}
#if LANG_CXX11
inline void Version::set_productname(::std::string&& value) {
  
  productname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Version.ProductName)
}
#endif
inline void Version::set_productname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Version.ProductName)
}
inline void Version::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Version.ProductName)
}
inline ::std::string* Version::mutable_productname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Version.ProductName)
  return productname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Version::release_productname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Version.ProductName)
  
  return productname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Version::set_allocated_productname(::std::string* productname) {
  if (productname != NULL) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Version.ProductName)
}

// -------------------------------------------------------------------

// SFrameNoCreditEquip

// repeated .ServerProtocol.NoCreditEquip NoCreditEquiplist = 1;
inline int SFrameNoCreditEquip::nocreditequiplist_size() const {
  return nocreditequiplist_.size();
}
inline void SFrameNoCreditEquip::clear_nocreditequiplist() {
  nocreditequiplist_.Clear();
}
inline ::ServerProtocol::NoCreditEquip* SFrameNoCreditEquip::mutable_nocreditequiplist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameNoCreditEquip.NoCreditEquiplist)
  return nocreditequiplist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::NoCreditEquip >*
SFrameNoCreditEquip::mutable_nocreditequiplist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameNoCreditEquip.NoCreditEquiplist)
  return &nocreditequiplist_;
}
inline const ::ServerProtocol::NoCreditEquip& SFrameNoCreditEquip::nocreditequiplist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameNoCreditEquip.NoCreditEquiplist)
  return nocreditequiplist_.Get(index);
}
inline ::ServerProtocol::NoCreditEquip* SFrameNoCreditEquip::add_nocreditequiplist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameNoCreditEquip.NoCreditEquiplist)
  return nocreditequiplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::NoCreditEquip >&
SFrameNoCreditEquip::nocreditequiplist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameNoCreditEquip.NoCreditEquiplist)
  return nocreditequiplist_;
}

// -------------------------------------------------------------------

// NoCreditEquip

// uint64 Id = 1;
inline void NoCreditEquip::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NoCreditEquip::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NoCreditEquip.Id)
  return id_;
}
inline void NoCreditEquip::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.NoCreditEquip.Id)
}

// string EuipMentFlag = 2;
inline void NoCreditEquip::clear_euipmentflag() {
  euipmentflag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoCreditEquip::euipmentflag() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NoCreditEquip.EuipMentFlag)
  return euipmentflag_.GetNoArena();
}
inline void NoCreditEquip::set_euipmentflag(const ::std::string& value) {
  
  euipmentflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.NoCreditEquip.EuipMentFlag)
}
#if LANG_CXX11
inline void NoCreditEquip::set_euipmentflag(::std::string&& value) {
  
  euipmentflag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.NoCreditEquip.EuipMentFlag)
}
#endif
inline void NoCreditEquip::set_euipmentflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  euipmentflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.NoCreditEquip.EuipMentFlag)
}
inline void NoCreditEquip::set_euipmentflag(const char* value, size_t size) {
  
  euipmentflag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.NoCreditEquip.EuipMentFlag)
}
inline ::std::string* NoCreditEquip::mutable_euipmentflag() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.NoCreditEquip.EuipMentFlag)
  return euipmentflag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoCreditEquip::release_euipmentflag() {
  // @@protoc_insertion_point(field_release:ServerProtocol.NoCreditEquip.EuipMentFlag)
  
  return euipmentflag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoCreditEquip::set_allocated_euipmentflag(::std::string* euipmentflag) {
  if (euipmentflag != NULL) {
    
  } else {
    
  }
  euipmentflag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), euipmentflag);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.NoCreditEquip.EuipMentFlag)
}

// uint64 UserID = 3;
inline void NoCreditEquip::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NoCreditEquip::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NoCreditEquip.UserID)
  return userid_;
}
inline void NoCreditEquip::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.NoCreditEquip.UserID)
}

// int32 State = 4;
inline void NoCreditEquip::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 NoCreditEquip::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NoCreditEquip.State)
  return state_;
}
inline void NoCreditEquip::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.NoCreditEquip.State)
}

// -------------------------------------------------------------------

// SFrameKeyShareRecord

// repeated .ServerProtocol.KeyShareRecord KeyShareRecordlist = 1;
inline int SFrameKeyShareRecord::keysharerecordlist_size() const {
  return keysharerecordlist_.size();
}
inline void SFrameKeyShareRecord::clear_keysharerecordlist() {
  keysharerecordlist_.Clear();
}
inline ::ServerProtocol::KeyShareRecord* SFrameKeyShareRecord::mutable_keysharerecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameKeyShareRecord.KeyShareRecordlist)
  return keysharerecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::KeyShareRecord >*
SFrameKeyShareRecord::mutable_keysharerecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameKeyShareRecord.KeyShareRecordlist)
  return &keysharerecordlist_;
}
inline const ::ServerProtocol::KeyShareRecord& SFrameKeyShareRecord::keysharerecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameKeyShareRecord.KeyShareRecordlist)
  return keysharerecordlist_.Get(index);
}
inline ::ServerProtocol::KeyShareRecord* SFrameKeyShareRecord::add_keysharerecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameKeyShareRecord.KeyShareRecordlist)
  return keysharerecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::KeyShareRecord >&
SFrameKeyShareRecord::keysharerecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameKeyShareRecord.KeyShareRecordlist)
  return keysharerecordlist_;
}

// -------------------------------------------------------------------

// KeyShareRecord

// uint64 Id = 1;
inline void KeyShareRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KeyShareRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.Id)
  return id_;
}
inline void KeyShareRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.Id)
}

// string KeyID = 2;
inline void KeyShareRecord::clear_keyid() {
  keyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::keyid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.KeyID)
  return keyid_.GetNoArena();
}
inline void KeyShareRecord::set_keyid(const ::std::string& value) {
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.KeyID)
}
#if LANG_CXX11
inline void KeyShareRecord::set_keyid(::std::string&& value) {
  
  keyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.KeyID)
}
#endif
inline void KeyShareRecord::set_keyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.KeyID)
}
inline void KeyShareRecord::set_keyid(const char* value, size_t size) {
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.KeyID)
}
inline ::std::string* KeyShareRecord::mutable_keyid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.KeyID)
  return keyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_keyid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.KeyID)
  
  return keyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_keyid(::std::string* keyid) {
  if (keyid != NULL) {
    
  } else {
    
  }
  keyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.KeyID)
}

// string Cipher = 3;
inline void KeyShareRecord::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::cipher() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.Cipher)
  return cipher_.GetNoArena();
}
inline void KeyShareRecord::set_cipher(const ::std::string& value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.Cipher)
}
#if LANG_CXX11
inline void KeyShareRecord::set_cipher(::std::string&& value) {
  
  cipher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.Cipher)
}
#endif
inline void KeyShareRecord::set_cipher(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.Cipher)
}
inline void KeyShareRecord::set_cipher(const char* value, size_t size) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.Cipher)
}
inline ::std::string* KeyShareRecord::mutable_cipher() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.Cipher)
  return cipher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_cipher() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.Cipher)
  
  return cipher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_cipher(::std::string* cipher) {
  if (cipher != NULL) {
    
  } else {
    
  }
  cipher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.Cipher)
}

// string UserFromMobile = 4;
inline void KeyShareRecord::clear_userfrommobile() {
  userfrommobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::userfrommobile() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.UserFromMobile)
  return userfrommobile_.GetNoArena();
}
inline void KeyShareRecord::set_userfrommobile(const ::std::string& value) {
  
  userfrommobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.UserFromMobile)
}
#if LANG_CXX11
inline void KeyShareRecord::set_userfrommobile(::std::string&& value) {
  
  userfrommobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.UserFromMobile)
}
#endif
inline void KeyShareRecord::set_userfrommobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userfrommobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.UserFromMobile)
}
inline void KeyShareRecord::set_userfrommobile(const char* value, size_t size) {
  
  userfrommobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.UserFromMobile)
}
inline ::std::string* KeyShareRecord::mutable_userfrommobile() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.UserFromMobile)
  return userfrommobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_userfrommobile() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.UserFromMobile)
  
  return userfrommobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_userfrommobile(::std::string* userfrommobile) {
  if (userfrommobile != NULL) {
    
  } else {
    
  }
  userfrommobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userfrommobile);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.UserFromMobile)
}

// string UserNameFrom = 5;
inline void KeyShareRecord::clear_usernamefrom() {
  usernamefrom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::usernamefrom() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.UserNameFrom)
  return usernamefrom_.GetNoArena();
}
inline void KeyShareRecord::set_usernamefrom(const ::std::string& value) {
  
  usernamefrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.UserNameFrom)
}
#if LANG_CXX11
inline void KeyShareRecord::set_usernamefrom(::std::string&& value) {
  
  usernamefrom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.UserNameFrom)
}
#endif
inline void KeyShareRecord::set_usernamefrom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usernamefrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.UserNameFrom)
}
inline void KeyShareRecord::set_usernamefrom(const char* value, size_t size) {
  
  usernamefrom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.UserNameFrom)
}
inline ::std::string* KeyShareRecord::mutable_usernamefrom() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.UserNameFrom)
  return usernamefrom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_usernamefrom() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.UserNameFrom)
  
  return usernamefrom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_usernamefrom(::std::string* usernamefrom) {
  if (usernamefrom != NULL) {
    
  } else {
    
  }
  usernamefrom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernamefrom);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.UserNameFrom)
}

// int32 CountryCode = 6;
inline void KeyShareRecord::clear_countrycode() {
  countrycode_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::countrycode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.CountryCode)
  return countrycode_;
}
inline void KeyShareRecord::set_countrycode(::google::protobuf::int32 value) {
  
  countrycode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.CountryCode)
}

// string UserTo = 7;
inline void KeyShareRecord::clear_userto() {
  userto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::userto() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.UserTo)
  return userto_.GetNoArena();
}
inline void KeyShareRecord::set_userto(const ::std::string& value) {
  
  userto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.UserTo)
}
#if LANG_CXX11
inline void KeyShareRecord::set_userto(::std::string&& value) {
  
  userto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.UserTo)
}
#endif
inline void KeyShareRecord::set_userto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.UserTo)
}
inline void KeyShareRecord::set_userto(const char* value, size_t size) {
  
  userto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.UserTo)
}
inline ::std::string* KeyShareRecord::mutable_userto() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.UserTo)
  return userto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_userto() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.UserTo)
  
  return userto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_userto(::std::string* userto) {
  if (userto != NULL) {
    
  } else {
    
  }
  userto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userto);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.UserTo)
}

// string UserNameTo = 8;
inline void KeyShareRecord::clear_usernameto() {
  usernameto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::usernameto() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.UserNameTo)
  return usernameto_.GetNoArena();
}
inline void KeyShareRecord::set_usernameto(const ::std::string& value) {
  
  usernameto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.UserNameTo)
}
#if LANG_CXX11
inline void KeyShareRecord::set_usernameto(::std::string&& value) {
  
  usernameto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.UserNameTo)
}
#endif
inline void KeyShareRecord::set_usernameto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usernameto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.UserNameTo)
}
inline void KeyShareRecord::set_usernameto(const char* value, size_t size) {
  
  usernameto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.UserNameTo)
}
inline ::std::string* KeyShareRecord::mutable_usernameto() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.UserNameTo)
  return usernameto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_usernameto() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.UserNameTo)
  
  return usernameto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_usernameto(::std::string* usernameto) {
  if (usernameto != NULL) {
    
  } else {
    
  }
  usernameto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernameto);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.UserNameTo)
}

// string Alias = 9;
inline void KeyShareRecord::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::alias() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.Alias)
  return alias_.GetNoArena();
}
inline void KeyShareRecord::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.Alias)
}
#if LANG_CXX11
inline void KeyShareRecord::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.Alias)
}
#endif
inline void KeyShareRecord::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.Alias)
}
inline void KeyShareRecord::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.Alias)
}
inline ::std::string* KeyShareRecord::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_alias() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.Alias)
}

// int32 Type = 10;
inline void KeyShareRecord::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.Type)
  return type_;
}
inline void KeyShareRecord::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.Type)
}

// int32 LockState = 11;
inline void KeyShareRecord::clear_lockstate() {
  lockstate_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::lockstate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.LockState)
  return lockstate_;
}
inline void KeyShareRecord::set_lockstate(::google::protobuf::int32 value) {
  
  lockstate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.LockState)
}

// int64 StartTime = 12;
inline void KeyShareRecord::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KeyShareRecord::starttime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.StartTime)
  return starttime_;
}
inline void KeyShareRecord::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.StartTime)
}

// int64 EndTime = 13;
inline void KeyShareRecord::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KeyShareRecord::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.EndTime)
  return endtime_;
}
inline void KeyShareRecord::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.EndTime)
}

// int32 IsShareable = 14;
inline void KeyShareRecord::clear_isshareable() {
  isshareable_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::isshareable() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.IsShareable)
  return isshareable_;
}
inline void KeyShareRecord::set_isshareable(::google::protobuf::int32 value) {
  
  isshareable_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.IsShareable)
}

// string LockCode = 15;
inline void KeyShareRecord::clear_lockcode() {
  lockcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::lockcode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.LockCode)
  return lockcode_.GetNoArena();
}
inline void KeyShareRecord::set_lockcode(const ::std::string& value) {
  
  lockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.LockCode)
}
#if LANG_CXX11
inline void KeyShareRecord::set_lockcode(::std::string&& value) {
  
  lockcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.LockCode)
}
#endif
inline void KeyShareRecord::set_lockcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.LockCode)
}
inline void KeyShareRecord::set_lockcode(const char* value, size_t size) {
  
  lockcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.LockCode)
}
inline ::std::string* KeyShareRecord::mutable_lockcode() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.LockCode)
  return lockcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_lockcode() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.LockCode)
  
  return lockcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_lockcode(::std::string* lockcode) {
  if (lockcode != NULL) {
    
  } else {
    
  }
  lockcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lockcode);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.LockCode)
}

// int64 CreateTime = 16;
inline void KeyShareRecord::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KeyShareRecord::createtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.CreateTime)
  return createtime_;
}
inline void KeyShareRecord::set_createtime(::google::protobuf::int64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.CreateTime)
}

// int32 IsShow = 17;
inline void KeyShareRecord::clear_isshow() {
  isshow_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::isshow() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.IsShow)
  return isshow_;
}
inline void KeyShareRecord::set_isshow(::google::protobuf::int32 value) {
  
  isshow_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.IsShow)
}

// int32 Sort = 18;
inline void KeyShareRecord::clear_sort() {
  sort_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::sort() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.Sort)
  return sort_;
}
inline void KeyShareRecord::set_sort(::google::protobuf::int32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.Sort)
}

// int32 IsNeedCheckIn = 19;
inline void KeyShareRecord::clear_isneedcheckin() {
  isneedcheckin_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::isneedcheckin() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.IsNeedCheckIn)
  return isneedcheckin_;
}
inline void KeyShareRecord::set_isneedcheckin(::google::protobuf::int32 value) {
  
  isneedcheckin_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.IsNeedCheckIn)
}

// int64 GroupId = 20;
inline void KeyShareRecord::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KeyShareRecord::groupid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.GroupId)
  return groupid_;
}
inline void KeyShareRecord::set_groupid(::google::protobuf::int64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.GroupId)
}

// string GroupName = 21;
inline void KeyShareRecord::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyShareRecord::groupname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.GroupName)
  return groupname_.GetNoArena();
}
inline void KeyShareRecord::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.GroupName)
}
#if LANG_CXX11
inline void KeyShareRecord::set_groupname(::std::string&& value) {
  
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.KeyShareRecord.GroupName)
}
#endif
inline void KeyShareRecord::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.KeyShareRecord.GroupName)
}
inline void KeyShareRecord::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.KeyShareRecord.GroupName)
}
inline ::std::string* KeyShareRecord::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.KeyShareRecord.GroupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyShareRecord::release_groupname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.KeyShareRecord.GroupName)
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyShareRecord::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.KeyShareRecord.GroupName)
}

// int32 AuthType = 22;
inline void KeyShareRecord::clear_authtype() {
  authtype_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::authtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.AuthType)
  return authtype_;
}
inline void KeyShareRecord::set_authtype(::google::protobuf::int32 value) {
  
  authtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.AuthType)
}

// int32 State = 23;
inline void KeyShareRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 KeyShareRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.KeyShareRecord.State)
  return state_;
}
inline void KeyShareRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.KeyShareRecord.State)
}

// -------------------------------------------------------------------

// SFrameDevTypeCribe

// repeated .ServerProtocol.DevTypeCribe DevTypeCribelist = 1;
inline int SFrameDevTypeCribe::devtypecribelist_size() const {
  return devtypecribelist_.size();
}
inline void SFrameDevTypeCribe::clear_devtypecribelist() {
  devtypecribelist_.Clear();
}
inline ::ServerProtocol::DevTypeCribe* SFrameDevTypeCribe::mutable_devtypecribelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDevTypeCribe.DevTypeCribelist)
  return devtypecribelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DevTypeCribe >*
SFrameDevTypeCribe::mutable_devtypecribelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDevTypeCribe.DevTypeCribelist)
  return &devtypecribelist_;
}
inline const ::ServerProtocol::DevTypeCribe& SFrameDevTypeCribe::devtypecribelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDevTypeCribe.DevTypeCribelist)
  return devtypecribelist_.Get(index);
}
inline ::ServerProtocol::DevTypeCribe* SFrameDevTypeCribe::add_devtypecribelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDevTypeCribe.DevTypeCribelist)
  return devtypecribelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DevTypeCribe >&
SFrameDevTypeCribe::devtypecribelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDevTypeCribe.DevTypeCribelist)
  return devtypecribelist_;
}

// -------------------------------------------------------------------

// DevTypeCribe

// uint64 Id = 1;
inline void DevTypeCribe::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DevTypeCribe::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.Id)
  return id_;
}
inline void DevTypeCribe::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.Id)
}

// string DevCribe = 2;
inline void DevTypeCribe::clear_devcribe() {
  devcribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevTypeCribe::devcribe() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.DevCribe)
  return devcribe_.GetNoArena();
}
inline void DevTypeCribe::set_devcribe(const ::std::string& value) {
  
  devcribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.DevCribe)
}
#if LANG_CXX11
inline void DevTypeCribe::set_devcribe(::std::string&& value) {
  
  devcribe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DevTypeCribe.DevCribe)
}
#endif
inline void DevTypeCribe::set_devcribe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devcribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DevTypeCribe.DevCribe)
}
inline void DevTypeCribe::set_devcribe(const char* value, size_t size) {
  
  devcribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DevTypeCribe.DevCribe)
}
inline ::std::string* DevTypeCribe::mutable_devcribe() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DevTypeCribe.DevCribe)
  return devcribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevTypeCribe::release_devcribe() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DevTypeCribe.DevCribe)
  
  return devcribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevTypeCribe::set_allocated_devcribe(::std::string* devcribe) {
  if (devcribe != NULL) {
    
  } else {
    
  }
  devcribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devcribe);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DevTypeCribe.DevCribe)
}

// string Chinese = 3;
inline void DevTypeCribe::clear_chinese() {
  chinese_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevTypeCribe::chinese() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.Chinese)
  return chinese_.GetNoArena();
}
inline void DevTypeCribe::set_chinese(const ::std::string& value) {
  
  chinese_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.Chinese)
}
#if LANG_CXX11
inline void DevTypeCribe::set_chinese(::std::string&& value) {
  
  chinese_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DevTypeCribe.Chinese)
}
#endif
inline void DevTypeCribe::set_chinese(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chinese_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DevTypeCribe.Chinese)
}
inline void DevTypeCribe::set_chinese(const char* value, size_t size) {
  
  chinese_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DevTypeCribe.Chinese)
}
inline ::std::string* DevTypeCribe::mutable_chinese() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DevTypeCribe.Chinese)
  return chinese_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevTypeCribe::release_chinese() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DevTypeCribe.Chinese)
  
  return chinese_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevTypeCribe::set_allocated_chinese(::std::string* chinese) {
  if (chinese != NULL) {
    
  } else {
    
  }
  chinese_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chinese);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DevTypeCribe.Chinese)
}

// string English = 4;
inline void DevTypeCribe::clear_english() {
  english_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevTypeCribe::english() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.English)
  return english_.GetNoArena();
}
inline void DevTypeCribe::set_english(const ::std::string& value) {
  
  english_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.English)
}
#if LANG_CXX11
inline void DevTypeCribe::set_english(::std::string&& value) {
  
  english_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DevTypeCribe.English)
}
#endif
inline void DevTypeCribe::set_english(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  english_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DevTypeCribe.English)
}
inline void DevTypeCribe::set_english(const char* value, size_t size) {
  
  english_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DevTypeCribe.English)
}
inline ::std::string* DevTypeCribe::mutable_english() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DevTypeCribe.English)
  return english_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevTypeCribe::release_english() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DevTypeCribe.English)
  
  return english_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevTypeCribe::set_allocated_english(::std::string* english) {
  if (english != NULL) {
    
  } else {
    
  }
  english_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), english);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DevTypeCribe.English)
}

// string German = 5;
inline void DevTypeCribe::clear_german() {
  german_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevTypeCribe::german() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.German)
  return german_.GetNoArena();
}
inline void DevTypeCribe::set_german(const ::std::string& value) {
  
  german_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.German)
}
#if LANG_CXX11
inline void DevTypeCribe::set_german(::std::string&& value) {
  
  german_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DevTypeCribe.German)
}
#endif
inline void DevTypeCribe::set_german(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  german_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DevTypeCribe.German)
}
inline void DevTypeCribe::set_german(const char* value, size_t size) {
  
  german_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DevTypeCribe.German)
}
inline ::std::string* DevTypeCribe::mutable_german() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DevTypeCribe.German)
  return german_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevTypeCribe::release_german() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DevTypeCribe.German)
  
  return german_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevTypeCribe::set_allocated_german(::std::string* german) {
  if (german != NULL) {
    
  } else {
    
  }
  german_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), german);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DevTypeCribe.German)
}

// int32 State = 6;
inline void DevTypeCribe::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 DevTypeCribe::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DevTypeCribe.State)
  return state_;
}
inline void DevTypeCribe::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DevTypeCribe.State)
}

// -------------------------------------------------------------------

// SFrameCountryCode

// repeated .ServerProtocol.CountryCode CountryCodelist = 1;
inline int SFrameCountryCode::countrycodelist_size() const {
  return countrycodelist_.size();
}
inline void SFrameCountryCode::clear_countrycodelist() {
  countrycodelist_.Clear();
}
inline ::ServerProtocol::CountryCode* SFrameCountryCode::mutable_countrycodelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameCountryCode.CountryCodelist)
  return countrycodelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CountryCode >*
SFrameCountryCode::mutable_countrycodelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameCountryCode.CountryCodelist)
  return &countrycodelist_;
}
inline const ::ServerProtocol::CountryCode& SFrameCountryCode::countrycodelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameCountryCode.CountryCodelist)
  return countrycodelist_.Get(index);
}
inline ::ServerProtocol::CountryCode* SFrameCountryCode::add_countrycodelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameCountryCode.CountryCodelist)
  return countrycodelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CountryCode >&
SFrameCountryCode::countrycodelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameCountryCode.CountryCodelist)
  return countrycodelist_;
}

// -------------------------------------------------------------------

// CountryCode

// uint64 Id = 1;
inline void CountryCode::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CountryCode::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CountryCode.Id)
  return id_;
}
inline void CountryCode::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CountryCode.Id)
}

// string Name = 2;
inline void CountryCode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CountryCode::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CountryCode.Name)
  return name_.GetNoArena();
}
inline void CountryCode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.CountryCode.Name)
}
#if LANG_CXX11
inline void CountryCode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.CountryCode.Name)
}
#endif
inline void CountryCode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.CountryCode.Name)
}
inline void CountryCode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.CountryCode.Name)
}
inline ::std::string* CountryCode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.CountryCode.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountryCode::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.CountryCode.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountryCode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.CountryCode.Name)
}

// int32 Code = 3;
inline void CountryCode::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CountryCode::code() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CountryCode.Code)
  return code_;
}
inline void CountryCode::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CountryCode.Code)
}

// int32 State = 4;
inline void CountryCode::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CountryCode::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CountryCode.State)
  return state_;
}
inline void CountryCode::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CountryCode.State)
}

// -------------------------------------------------------------------

// SFrameDeveloper

// repeated .ServerProtocol.Developer Developerlist = 1;
inline int SFrameDeveloper::developerlist_size() const {
  return developerlist_.size();
}
inline void SFrameDeveloper::clear_developerlist() {
  developerlist_.Clear();
}
inline ::ServerProtocol::Developer* SFrameDeveloper::mutable_developerlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeveloper.Developerlist)
  return developerlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Developer >*
SFrameDeveloper::mutable_developerlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeveloper.Developerlist)
  return &developerlist_;
}
inline const ::ServerProtocol::Developer& SFrameDeveloper::developerlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeveloper.Developerlist)
  return developerlist_.Get(index);
}
inline ::ServerProtocol::Developer* SFrameDeveloper::add_developerlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeveloper.Developerlist)
  return developerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::Developer >&
SFrameDeveloper::developerlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeveloper.Developerlist)
  return developerlist_;
}

// -------------------------------------------------------------------

// Developer

// uint64 Id = 1;
inline void Developer::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Developer::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.Id)
  return id_;
}
inline void Developer::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.Id)
}

// string Name = 2;
inline void Developer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Developer::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.Name)
  return name_.GetNoArena();
}
inline void Developer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.Name)
}
#if LANG_CXX11
inline void Developer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Developer.Name)
}
#endif
inline void Developer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Developer.Name)
}
inline void Developer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Developer.Name)
}
inline ::std::string* Developer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Developer.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Developer::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Developer.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Developer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Developer.Name)
}

// string Apikey = 3;
inline void Developer::clear_apikey() {
  apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Developer::apikey() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.Apikey)
  return apikey_.GetNoArena();
}
inline void Developer::set_apikey(const ::std::string& value) {
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.Apikey)
}
#if LANG_CXX11
inline void Developer::set_apikey(::std::string&& value) {
  
  apikey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Developer.Apikey)
}
#endif
inline void Developer::set_apikey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Developer.Apikey)
}
inline void Developer::set_apikey(const char* value, size_t size) {
  
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Developer.Apikey)
}
inline ::std::string* Developer::mutable_apikey() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Developer.Apikey)
  return apikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Developer::release_apikey() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Developer.Apikey)
  
  return apikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Developer::set_allocated_apikey(::std::string* apikey) {
  if (apikey != NULL) {
    
  } else {
    
  }
  apikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apikey);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Developer.Apikey)
}

// string SecretKey = 4;
inline void Developer::clear_secretkey() {
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Developer::secretkey() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.SecretKey)
  return secretkey_.GetNoArena();
}
inline void Developer::set_secretkey(const ::std::string& value) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.SecretKey)
}
#if LANG_CXX11
inline void Developer::set_secretkey(::std::string&& value) {
  
  secretkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Developer.SecretKey)
}
#endif
inline void Developer::set_secretkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Developer.SecretKey)
}
inline void Developer::set_secretkey(const char* value, size_t size) {
  
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Developer.SecretKey)
}
inline ::std::string* Developer::mutable_secretkey() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Developer.SecretKey)
  return secretkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Developer::release_secretkey() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Developer.SecretKey)
  
  return secretkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Developer::set_allocated_secretkey(::std::string* secretkey) {
  if (secretkey != NULL) {
    
  } else {
    
  }
  secretkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secretkey);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Developer.SecretKey)
}

// int32 Range = 5;
inline void Developer::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 Developer::range() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.Range)
  return range_;
}
inline void Developer::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.Range)
}

// int32 DeveloperType = 6;
inline void Developer::clear_developertype() {
  developertype_ = 0;
}
inline ::google::protobuf::int32 Developer::developertype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.DeveloperType)
  return developertype_;
}
inline void Developer::set_developertype(::google::protobuf::int32 value) {
  
  developertype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.DeveloperType)
}

// uint64 CreateTime = 7;
inline void Developer::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Developer::createtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.CreateTime)
  return createtime_;
}
inline void Developer::set_createtime(::google::protobuf::uint64 value) {
  
  createtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.CreateTime)
}

// uint64 LastTime = 8;
inline void Developer::clear_lasttime() {
  lasttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Developer::lasttime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.LastTime)
  return lasttime_;
}
inline void Developer::set_lasttime(::google::protobuf::uint64 value) {
  
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.LastTime)
}

// int32 State = 9;
inline void Developer::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 Developer::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Developer.State)
  return state_;
}
inline void Developer::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Developer.State)
}

// -------------------------------------------------------------------

// SFrameWebInterface

// repeated .ServerProtocol.WebInterface WebInterfacelist = 1;
inline int SFrameWebInterface::webinterfacelist_size() const {
  return webinterfacelist_.size();
}
inline void SFrameWebInterface::clear_webinterfacelist() {
  webinterfacelist_.Clear();
}
inline ::ServerProtocol::WebInterface* SFrameWebInterface::mutable_webinterfacelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameWebInterface.WebInterfacelist)
  return webinterfacelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::WebInterface >*
SFrameWebInterface::mutable_webinterfacelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameWebInterface.WebInterfacelist)
  return &webinterfacelist_;
}
inline const ::ServerProtocol::WebInterface& SFrameWebInterface::webinterfacelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameWebInterface.WebInterfacelist)
  return webinterfacelist_.Get(index);
}
inline ::ServerProtocol::WebInterface* SFrameWebInterface::add_webinterfacelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameWebInterface.WebInterfacelist)
  return webinterfacelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::WebInterface >&
SFrameWebInterface::webinterfacelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameWebInterface.WebInterfacelist)
  return webinterfacelist_;
}

// -------------------------------------------------------------------

// WebInterface

// uint64 Id = 1;
inline void WebInterface::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WebInterface::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WebInterface.Id)
  return id_;
}
inline void WebInterface::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WebInterface.Id)
}

// string Name = 2;
inline void WebInterface::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebInterface::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WebInterface.Name)
  return name_.GetNoArena();
}
inline void WebInterface::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WebInterface.Name)
}
#if LANG_CXX11
inline void WebInterface::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WebInterface.Name)
}
#endif
inline void WebInterface::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WebInterface.Name)
}
inline void WebInterface::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WebInterface.Name)
}
inline ::std::string* WebInterface::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WebInterface.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebInterface::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WebInterface.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebInterface::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WebInterface.Name)
}

// string ApiUrl = 3;
inline void WebInterface::clear_apiurl() {
  apiurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebInterface::apiurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WebInterface.ApiUrl)
  return apiurl_.GetNoArena();
}
inline void WebInterface::set_apiurl(const ::std::string& value) {
  
  apiurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WebInterface.ApiUrl)
}
#if LANG_CXX11
inline void WebInterface::set_apiurl(::std::string&& value) {
  
  apiurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WebInterface.ApiUrl)
}
#endif
inline void WebInterface::set_apiurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apiurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WebInterface.ApiUrl)
}
inline void WebInterface::set_apiurl(const char* value, size_t size) {
  
  apiurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WebInterface.ApiUrl)
}
inline ::std::string* WebInterface::mutable_apiurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WebInterface.ApiUrl)
  return apiurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebInterface::release_apiurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WebInterface.ApiUrl)
  
  return apiurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebInterface::set_allocated_apiurl(::std::string* apiurl) {
  if (apiurl != NULL) {
    
  } else {
    
  }
  apiurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apiurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WebInterface.ApiUrl)
}

// int32 State = 4;
inline void WebInterface::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 WebInterface::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WebInterface.State)
  return state_;
}
inline void WebInterface::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WebInterface.State)
}

// -------------------------------------------------------------------

// SFrameTypeApiContrast

// repeated .ServerProtocol.TypeApiContrast TypeApiContrastlist = 1;
inline int SFrameTypeApiContrast::typeapicontrastlist_size() const {
  return typeapicontrastlist_.size();
}
inline void SFrameTypeApiContrast::clear_typeapicontrastlist() {
  typeapicontrastlist_.Clear();
}
inline ::ServerProtocol::TypeApiContrast* SFrameTypeApiContrast::mutable_typeapicontrastlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameTypeApiContrast.TypeApiContrastlist)
  return typeapicontrastlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::TypeApiContrast >*
SFrameTypeApiContrast::mutable_typeapicontrastlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameTypeApiContrast.TypeApiContrastlist)
  return &typeapicontrastlist_;
}
inline const ::ServerProtocol::TypeApiContrast& SFrameTypeApiContrast::typeapicontrastlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameTypeApiContrast.TypeApiContrastlist)
  return typeapicontrastlist_.Get(index);
}
inline ::ServerProtocol::TypeApiContrast* SFrameTypeApiContrast::add_typeapicontrastlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameTypeApiContrast.TypeApiContrastlist)
  return typeapicontrastlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::TypeApiContrast >&
SFrameTypeApiContrast::typeapicontrastlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameTypeApiContrast.TypeApiContrastlist)
  return typeapicontrastlist_;
}

// -------------------------------------------------------------------

// TypeApiContrast

// uint64 Id = 1;
inline void TypeApiContrast::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TypeApiContrast::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TypeApiContrast.Id)
  return id_;
}
inline void TypeApiContrast::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.TypeApiContrast.Id)
}

// int32 DeveloperType = 2;
inline void TypeApiContrast::clear_developertype() {
  developertype_ = 0;
}
inline ::google::protobuf::int32 TypeApiContrast::developertype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TypeApiContrast.DeveloperType)
  return developertype_;
}
inline void TypeApiContrast::set_developertype(::google::protobuf::int32 value) {
  
  developertype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.TypeApiContrast.DeveloperType)
}

// uint64 ApiId = 3;
inline void TypeApiContrast::clear_apiid() {
  apiid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TypeApiContrast::apiid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TypeApiContrast.ApiId)
  return apiid_;
}
inline void TypeApiContrast::set_apiid(::google::protobuf::uint64 value) {
  
  apiid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.TypeApiContrast.ApiId)
}

// int32 State = 4;
inline void TypeApiContrast::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 TypeApiContrast::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TypeApiContrast.State)
  return state_;
}
inline void TypeApiContrast::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.TypeApiContrast.State)
}

// -------------------------------------------------------------------

// SFrameCardsAreaDeviceContrast

// repeated .ServerProtocol.CardsAreaDeviceContrast CardsAreaDeviceContrastlist = 1;
inline int SFrameCardsAreaDeviceContrast::cardsareadevicecontrastlist_size() const {
  return cardsareadevicecontrastlist_.size();
}
inline void SFrameCardsAreaDeviceContrast::clear_cardsareadevicecontrastlist() {
  cardsareadevicecontrastlist_.Clear();
}
inline ::ServerProtocol::CardsAreaDeviceContrast* SFrameCardsAreaDeviceContrast::mutable_cardsareadevicecontrastlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameCardsAreaDeviceContrast.CardsAreaDeviceContrastlist)
  return cardsareadevicecontrastlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardsAreaDeviceContrast >*
SFrameCardsAreaDeviceContrast::mutable_cardsareadevicecontrastlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameCardsAreaDeviceContrast.CardsAreaDeviceContrastlist)
  return &cardsareadevicecontrastlist_;
}
inline const ::ServerProtocol::CardsAreaDeviceContrast& SFrameCardsAreaDeviceContrast::cardsareadevicecontrastlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameCardsAreaDeviceContrast.CardsAreaDeviceContrastlist)
  return cardsareadevicecontrastlist_.Get(index);
}
inline ::ServerProtocol::CardsAreaDeviceContrast* SFrameCardsAreaDeviceContrast::add_cardsareadevicecontrastlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameCardsAreaDeviceContrast.CardsAreaDeviceContrastlist)
  return cardsareadevicecontrastlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardsAreaDeviceContrast >&
SFrameCardsAreaDeviceContrast::cardsareadevicecontrastlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameCardsAreaDeviceContrast.CardsAreaDeviceContrastlist)
  return cardsareadevicecontrastlist_;
}

// -------------------------------------------------------------------

// CardsAreaDeviceContrast

// uint64 Id = 1;
inline void CardsAreaDeviceContrast::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardsAreaDeviceContrast::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.Id)
  return id_;
}
inline void CardsAreaDeviceContrast::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.Id)
}

// uint64 CardsID = 2;
inline void CardsAreaDeviceContrast::clear_cardsid() {
  cardsid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardsAreaDeviceContrast::cardsid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.CardsID)
  return cardsid_;
}
inline void CardsAreaDeviceContrast::set_cardsid(::google::protobuf::uint64 value) {
  
  cardsid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.CardsID)
}

// uint64 AreaDeviceID = 3;
inline void CardsAreaDeviceContrast::clear_areadeviceid() {
  areadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardsAreaDeviceContrast::areadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.AreaDeviceID)
  return areadeviceid_;
}
inline void CardsAreaDeviceContrast::set_areadeviceid(::google::protobuf::uint64 value) {
  
  areadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.AreaDeviceID)
}

// int32 State = 4;
inline void CardsAreaDeviceContrast::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CardsAreaDeviceContrast::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.State)
  return state_;
}
inline void CardsAreaDeviceContrast::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.State)
}

// int32 CardSendState = 5;
inline void CardsAreaDeviceContrast::clear_cardsendstate() {
  cardsendstate_ = 0;
}
inline ::google::protobuf::int32 CardsAreaDeviceContrast::cardsendstate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.CardSendState)
  return cardsendstate_;
}
inline void CardsAreaDeviceContrast::set_cardsendstate(::google::protobuf::int32 value) {
  
  cardsendstate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.CardSendState)
}

// int32 CardSendCount = 6;
inline void CardsAreaDeviceContrast::clear_cardsendcount() {
  cardsendcount_ = 0;
}
inline ::google::protobuf::int32 CardsAreaDeviceContrast::cardsendcount() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardsAreaDeviceContrast.CardSendCount)
  return cardsendcount_;
}
inline void CardsAreaDeviceContrast::set_cardsendcount(::google::protobuf::int32 value) {
  
  cardsendcount_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardsAreaDeviceContrast.CardSendCount)
}

// -------------------------------------------------------------------

// SFrameCardRecord

// repeated .ServerProtocol.CardRecord CardRecordlist = 1;
inline int SFrameCardRecord::cardrecordlist_size() const {
  return cardrecordlist_.size();
}
inline void SFrameCardRecord::clear_cardrecordlist() {
  cardrecordlist_.Clear();
}
inline ::ServerProtocol::CardRecord* SFrameCardRecord::mutable_cardrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameCardRecord.CardRecordlist)
  return cardrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardRecord >*
SFrameCardRecord::mutable_cardrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameCardRecord.CardRecordlist)
  return &cardrecordlist_;
}
inline const ::ServerProtocol::CardRecord& SFrameCardRecord::cardrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameCardRecord.CardRecordlist)
  return cardrecordlist_.Get(index);
}
inline ::ServerProtocol::CardRecord* SFrameCardRecord::add_cardrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameCardRecord.CardRecordlist)
  return cardrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::CardRecord >&
SFrameCardRecord::cardrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameCardRecord.CardRecordlist)
  return cardrecordlist_;
}

// -------------------------------------------------------------------

// CardRecord

// uint64 Id = 1;
inline void CardRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.Id)
  return id_;
}
inline void CardRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.Id)
}

// string Card = 2;
inline void CardRecord::clear_card() {
  card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CardRecord::card() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.Card)
  return card_.GetNoArena();
}
inline void CardRecord::set_card(const ::std::string& value) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.Card)
}
#if LANG_CXX11
inline void CardRecord::set_card(::std::string&& value) {
  
  card_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.CardRecord.Card)
}
#endif
inline void CardRecord::set_card(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.CardRecord.Card)
}
inline void CardRecord::set_card(const char* value, size_t size) {
  
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.CardRecord.Card)
}
inline ::std::string* CardRecord::mutable_card() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.CardRecord.Card)
  return card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CardRecord::release_card() {
  // @@protoc_insertion_point(field_release:ServerProtocol.CardRecord.Card)
  
  return card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardRecord::set_allocated_card(::std::string* card) {
  if (card != NULL) {
    
  } else {
    
  }
  card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.CardRecord.Card)
}

// uint64 UserID = 3;
inline void CardRecord::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardRecord::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.UserID)
  return userid_;
}
inline void CardRecord::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.UserID)
}

// uint64 AreaID = 4;
inline void CardRecord::clear_areaid() {
  areaid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardRecord::areaid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.AreaID)
  return areaid_;
}
inline void CardRecord::set_areaid(::google::protobuf::uint64 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.AreaID)
}

// int64 BeginTime = 5;
inline void CardRecord::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CardRecord::begintime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.BeginTime)
  return begintime_;
}
inline void CardRecord::set_begintime(::google::protobuf::int64 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.BeginTime)
}

// int64 EndTime = 6;
inline void CardRecord::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CardRecord::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.EndTime)
  return endtime_;
}
inline void CardRecord::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.EndTime)
}

// uint64 RoleID = 7;
inline void CardRecord::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CardRecord::roleid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.RoleID)
  return roleid_;
}
inline void CardRecord::set_roleid(::google::protobuf::uint64 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.RoleID)
}

// int64 Time = 8;
inline void CardRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CardRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.Time)
  return time_;
}
inline void CardRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.Time)
}

// int32 State = 9;
inline void CardRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 CardRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.State)
  return state_;
}
inline void CardRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.State)
}

// int32 CardType = 10;
inline void CardRecord::clear_cardtype() {
  cardtype_ = 0;
}
inline ::google::protobuf::int32 CardRecord::cardtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.CardType)
  return cardtype_;
}
inline void CardRecord::set_cardtype(::google::protobuf::int32 value) {
  
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.CardType)
}

// int32 ListType = 11;
inline void CardRecord::clear_listtype() {
  listtype_ = 0;
}
inline ::google::protobuf::int32 CardRecord::listtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.ListType)
  return listtype_;
}
inline void CardRecord::set_listtype(::google::protobuf::int32 value) {
  
  listtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.ListType)
}

// int32 FunType = 12;
inline void CardRecord::clear_funtype() {
  funtype_ = 0;
}
inline ::google::protobuf::int32 CardRecord::funtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.FunType)
  return funtype_;
}
inline void CardRecord::set_funtype(::google::protobuf::int32 value) {
  
  funtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.FunType)
}

// string Phone = 13;
inline void CardRecord::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CardRecord::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.CardRecord.Phone)
  return phone_.GetNoArena();
}
inline void CardRecord::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.CardRecord.Phone)
}
#if LANG_CXX11
inline void CardRecord::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.CardRecord.Phone)
}
#endif
inline void CardRecord::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.CardRecord.Phone)
}
inline void CardRecord::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.CardRecord.Phone)
}
inline ::std::string* CardRecord::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.CardRecord.Phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CardRecord::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.CardRecord.Phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardRecord::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.CardRecord.Phone)
}

// -------------------------------------------------------------------

// SFrameManagersRoleContrast

// repeated .ServerProtocol.ManagersRoleContrast ManagersRoleContrastlist = 1;
inline int SFrameManagersRoleContrast::managersrolecontrastlist_size() const {
  return managersrolecontrastlist_.size();
}
inline void SFrameManagersRoleContrast::clear_managersrolecontrastlist() {
  managersrolecontrastlist_.Clear();
}
inline ::ServerProtocol::ManagersRoleContrast* SFrameManagersRoleContrast::mutable_managersrolecontrastlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameManagersRoleContrast.ManagersRoleContrastlist)
  return managersrolecontrastlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::ManagersRoleContrast >*
SFrameManagersRoleContrast::mutable_managersrolecontrastlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameManagersRoleContrast.ManagersRoleContrastlist)
  return &managersrolecontrastlist_;
}
inline const ::ServerProtocol::ManagersRoleContrast& SFrameManagersRoleContrast::managersrolecontrastlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameManagersRoleContrast.ManagersRoleContrastlist)
  return managersrolecontrastlist_.Get(index);
}
inline ::ServerProtocol::ManagersRoleContrast* SFrameManagersRoleContrast::add_managersrolecontrastlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameManagersRoleContrast.ManagersRoleContrastlist)
  return managersrolecontrastlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::ManagersRoleContrast >&
SFrameManagersRoleContrast::managersrolecontrastlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameManagersRoleContrast.ManagersRoleContrastlist)
  return managersrolecontrastlist_;
}

// -------------------------------------------------------------------

// ManagersRoleContrast

// uint64 Id = 1;
inline void ManagersRoleContrast::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagersRoleContrast::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ManagersRoleContrast.Id)
  return id_;
}
inline void ManagersRoleContrast::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ManagersRoleContrast.Id)
}

// uint64 RoleTypeID = 2;
inline void ManagersRoleContrast::clear_roletypeid() {
  roletypeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagersRoleContrast::roletypeid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ManagersRoleContrast.RoleTypeID)
  return roletypeid_;
}
inline void ManagersRoleContrast::set_roletypeid(::google::protobuf::uint64 value) {
  
  roletypeid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ManagersRoleContrast.RoleTypeID)
}

// uint64 ManagersID = 3;
inline void ManagersRoleContrast::clear_managersid() {
  managersid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagersRoleContrast::managersid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ManagersRoleContrast.ManagersID)
  return managersid_;
}
inline void ManagersRoleContrast::set_managersid(::google::protobuf::uint64 value) {
  
  managersid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ManagersRoleContrast.ManagersID)
}

// int32 State = 4;
inline void ManagersRoleContrast::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 ManagersRoleContrast::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ManagersRoleContrast.State)
  return state_;
}
inline void ManagersRoleContrast::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ManagersRoleContrast.State)
}

// uint64 MechID = 5;
inline void ManagersRoleContrast::clear_mechid() {
  mechid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagersRoleContrast::mechid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ManagersRoleContrast.MechID)
  return mechid_;
}
inline void ManagersRoleContrast::set_mechid(::google::protobuf::uint64 value) {
  
  mechid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ManagersRoleContrast.MechID)
}

// -------------------------------------------------------------------

// SFrameFolderUpRecord

// repeated .ServerProtocol.FolderUpRecord FolderUpRecordlist = 1;
inline int SFrameFolderUpRecord::folderuprecordlist_size() const {
  return folderuprecordlist_.size();
}
inline void SFrameFolderUpRecord::clear_folderuprecordlist() {
  folderuprecordlist_.Clear();
}
inline ::ServerProtocol::FolderUpRecord* SFrameFolderUpRecord::mutable_folderuprecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFolderUpRecord.FolderUpRecordlist)
  return folderuprecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderUpRecord >*
SFrameFolderUpRecord::mutable_folderuprecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameFolderUpRecord.FolderUpRecordlist)
  return &folderuprecordlist_;
}
inline const ::ServerProtocol::FolderUpRecord& SFrameFolderUpRecord::folderuprecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFolderUpRecord.FolderUpRecordlist)
  return folderuprecordlist_.Get(index);
}
inline ::ServerProtocol::FolderUpRecord* SFrameFolderUpRecord::add_folderuprecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameFolderUpRecord.FolderUpRecordlist)
  return folderuprecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderUpRecord >&
SFrameFolderUpRecord::folderuprecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameFolderUpRecord.FolderUpRecordlist)
  return folderuprecordlist_;
}

// -------------------------------------------------------------------

// FolderUpRecord

// uint64 Id = 1;
inline void FolderUpRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FolderUpRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Id)
  return id_;
}
inline void FolderUpRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Id)
}

// string Name = 2;
inline void FolderUpRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderUpRecord::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Name)
  return name_.GetNoArena();
}
inline void FolderUpRecord::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Name)
}
#if LANG_CXX11
inline void FolderUpRecord::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FolderUpRecord.Name)
}
#endif
inline void FolderUpRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FolderUpRecord.Name)
}
inline void FolderUpRecord::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FolderUpRecord.Name)
}
inline ::std::string* FolderUpRecord::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FolderUpRecord.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderUpRecord::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FolderUpRecord.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderUpRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FolderUpRecord.Name)
}

// int32 Size = 3;
inline void FolderUpRecord::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 FolderUpRecord::size() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Size)
  return size_;
}
inline void FolderUpRecord::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Size)
}

// string Path = 4;
inline void FolderUpRecord::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderUpRecord::path() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Path)
  return path_.GetNoArena();
}
inline void FolderUpRecord::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Path)
}
#if LANG_CXX11
inline void FolderUpRecord::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FolderUpRecord.Path)
}
#endif
inline void FolderUpRecord::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FolderUpRecord.Path)
}
inline void FolderUpRecord::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FolderUpRecord.Path)
}
inline ::std::string* FolderUpRecord::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FolderUpRecord.Path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderUpRecord::release_path() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FolderUpRecord.Path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderUpRecord::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FolderUpRecord.Path)
}

// int32 Update = 5;
inline void FolderUpRecord::clear_update() {
  update_ = 0;
}
inline ::google::protobuf::int32 FolderUpRecord::update() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Update)
  return update_;
}
inline void FolderUpRecord::set_update(::google::protobuf::int32 value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Update)
}

// uint64 UpuserID = 6;
inline void FolderUpRecord::clear_upuserid() {
  upuserid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FolderUpRecord::upuserid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.UpuserID)
  return upuserid_;
}
inline void FolderUpRecord::set_upuserid(::google::protobuf::uint64 value) {
  
  upuserid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.UpuserID)
}

// string Upusername = 7;
inline void FolderUpRecord::clear_upusername() {
  upusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderUpRecord::upusername() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderUpRecord.Upusername)
  return upusername_.GetNoArena();
}
inline void FolderUpRecord::set_upusername(const ::std::string& value) {
  
  upusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderUpRecord.Upusername)
}
#if LANG_CXX11
inline void FolderUpRecord::set_upusername(::std::string&& value) {
  
  upusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FolderUpRecord.Upusername)
}
#endif
inline void FolderUpRecord::set_upusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FolderUpRecord.Upusername)
}
inline void FolderUpRecord::set_upusername(const char* value, size_t size) {
  
  upusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FolderUpRecord.Upusername)
}
inline ::std::string* FolderUpRecord::mutable_upusername() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FolderUpRecord.Upusername)
  return upusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderUpRecord::release_upusername() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FolderUpRecord.Upusername)
  
  return upusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderUpRecord::set_allocated_upusername(::std::string* upusername) {
  if (upusername != NULL) {
    
  } else {
    
  }
  upusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upusername);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FolderUpRecord.Upusername)
}

// -------------------------------------------------------------------

// SFrameFolderTree

// repeated .ServerProtocol.FolderTree FolderTreelist = 1;
inline int SFrameFolderTree::foldertreelist_size() const {
  return foldertreelist_.size();
}
inline void SFrameFolderTree::clear_foldertreelist() {
  foldertreelist_.Clear();
}
inline ::ServerProtocol::FolderTree* SFrameFolderTree::mutable_foldertreelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameFolderTree.FolderTreelist)
  return foldertreelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderTree >*
SFrameFolderTree::mutable_foldertreelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameFolderTree.FolderTreelist)
  return &foldertreelist_;
}
inline const ::ServerProtocol::FolderTree& SFrameFolderTree::foldertreelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameFolderTree.FolderTreelist)
  return foldertreelist_.Get(index);
}
inline ::ServerProtocol::FolderTree* SFrameFolderTree::add_foldertreelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameFolderTree.FolderTreelist)
  return foldertreelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FolderTree >&
SFrameFolderTree::foldertreelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameFolderTree.FolderTreelist)
  return foldertreelist_;
}

// -------------------------------------------------------------------

// FolderTree

// uint64 Id = 1;
inline void FolderTree::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FolderTree::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderTree.Id)
  return id_;
}
inline void FolderTree::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderTree.Id)
}

// string Name = 2;
inline void FolderTree::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderTree::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderTree.Name)
  return name_.GetNoArena();
}
inline void FolderTree::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderTree.Name)
}
#if LANG_CXX11
inline void FolderTree::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FolderTree.Name)
}
#endif
inline void FolderTree::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FolderTree.Name)
}
inline void FolderTree::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FolderTree.Name)
}
inline ::std::string* FolderTree::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FolderTree.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderTree::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FolderTree.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderTree::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FolderTree.Name)
}

// uint64 Pid = 3;
inline void FolderTree::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FolderTree::pid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderTree.Pid)
  return pid_;
}
inline void FolderTree::set_pid(::google::protobuf::uint64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderTree.Pid)
}

// string FileUrl = 4;
inline void FolderTree::clear_fileurl() {
  fileurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FolderTree::fileurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderTree.FileUrl)
  return fileurl_.GetNoArena();
}
inline void FolderTree::set_fileurl(const ::std::string& value) {
  
  fileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderTree.FileUrl)
}
#if LANG_CXX11
inline void FolderTree::set_fileurl(::std::string&& value) {
  
  fileurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FolderTree.FileUrl)
}
#endif
inline void FolderTree::set_fileurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FolderTree.FileUrl)
}
inline void FolderTree::set_fileurl(const char* value, size_t size) {
  
  fileurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FolderTree.FileUrl)
}
inline ::std::string* FolderTree::mutable_fileurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FolderTree.FileUrl)
  return fileurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FolderTree::release_fileurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FolderTree.FileUrl)
  
  return fileurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FolderTree::set_allocated_fileurl(::std::string* fileurl) {
  if (fileurl != NULL) {
    
  } else {
    
  }
  fileurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FolderTree.FileUrl)
}

// uint64 Userid = 5;
inline void FolderTree::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FolderTree::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FolderTree.Userid)
  return userid_;
}
inline void FolderTree::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FolderTree.Userid)
}

// -------------------------------------------------------------------

// SFrameDeviceAlarm

// repeated .ServerProtocol.DeviceAlarm DeviceAlarmlist = 1;
inline int SFrameDeviceAlarm::devicealarmlist_size() const {
  return devicealarmlist_.size();
}
inline void SFrameDeviceAlarm::clear_devicealarmlist() {
  devicealarmlist_.Clear();
}
inline ::ServerProtocol::DeviceAlarm* SFrameDeviceAlarm::mutable_devicealarmlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceAlarm.DeviceAlarmlist)
  return devicealarmlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarm >*
SFrameDeviceAlarm::mutable_devicealarmlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceAlarm.DeviceAlarmlist)
  return &devicealarmlist_;
}
inline const ::ServerProtocol::DeviceAlarm& SFrameDeviceAlarm::devicealarmlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceAlarm.DeviceAlarmlist)
  return devicealarmlist_.Get(index);
}
inline ::ServerProtocol::DeviceAlarm* SFrameDeviceAlarm::add_devicealarmlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceAlarm.DeviceAlarmlist)
  return devicealarmlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarm >&
SFrameDeviceAlarm::devicealarmlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceAlarm.DeviceAlarmlist)
  return devicealarmlist_;
}

// -------------------------------------------------------------------

// DeviceAlarm

// uint64 Id = 1;
inline void DeviceAlarm::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceAlarm::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.Id)
  return id_;
}
inline void DeviceAlarm::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.Id)
}

// int64 CurTime = 2;
inline void DeviceAlarm::clear_curtime() {
  curtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceAlarm::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.CurTime)
  return curtime_;
}
inline void DeviceAlarm::set_curtime(::google::protobuf::int64 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.CurTime)
}

// int64 HeppenTime = 3;
inline void DeviceAlarm::clear_heppentime() {
  heppentime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceAlarm::heppentime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.HeppenTime)
  return heppentime_;
}
inline void DeviceAlarm::set_heppentime(::google::protobuf::int64 value) {
  
  heppentime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.HeppenTime)
}

// int32 State = 4;
inline void DeviceAlarm::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 DeviceAlarm::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.State)
  return state_;
}
inline void DeviceAlarm::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.State)
}

// string DeviceMac = 5;
inline void DeviceAlarm::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAlarm::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void DeviceAlarm::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.DeviceMac)
}
#if LANG_CXX11
inline void DeviceAlarm::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceAlarm.DeviceMac)
}
#endif
inline void DeviceAlarm::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceAlarm.DeviceMac)
}
inline void DeviceAlarm::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceAlarm.DeviceMac)
}
inline ::std::string* DeviceAlarm::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceAlarm.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAlarm::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceAlarm.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAlarm::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceAlarm.DeviceMac)
}

// int32 DevSort = 6;
inline void DeviceAlarm::clear_devsort() {
  devsort_ = 0;
}
inline ::google::protobuf::int32 DeviceAlarm::devsort() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.DevSort)
  return devsort_;
}
inline void DeviceAlarm::set_devsort(::google::protobuf::int32 value) {
  
  devsort_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.DevSort)
}

// string DevState = 7;
inline void DeviceAlarm::clear_devstate() {
  devstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAlarm::devstate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarm.DevState)
  return devstate_.GetNoArena();
}
inline void DeviceAlarm::set_devstate(const ::std::string& value) {
  
  devstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarm.DevState)
}
#if LANG_CXX11
inline void DeviceAlarm::set_devstate(::std::string&& value) {
  
  devstate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceAlarm.DevState)
}
#endif
inline void DeviceAlarm::set_devstate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceAlarm.DevState)
}
inline void DeviceAlarm::set_devstate(const char* value, size_t size) {
  
  devstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceAlarm.DevState)
}
inline ::std::string* DeviceAlarm::mutable_devstate() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceAlarm.DevState)
  return devstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAlarm::release_devstate() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceAlarm.DevState)
  
  return devstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAlarm::set_allocated_devstate(::std::string* devstate) {
  if (devstate != NULL) {
    
  } else {
    
  }
  devstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devstate);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceAlarm.DevState)
}

// -------------------------------------------------------------------

// SFrameDeviceAlarmProperty

// repeated .ServerProtocol.DeviceAlarmProperty DeviceAlarmPropertylist = 1;
inline int SFrameDeviceAlarmProperty::devicealarmpropertylist_size() const {
  return devicealarmpropertylist_.size();
}
inline void SFrameDeviceAlarmProperty::clear_devicealarmpropertylist() {
  devicealarmpropertylist_.Clear();
}
inline ::ServerProtocol::DeviceAlarmProperty* SFrameDeviceAlarmProperty::mutable_devicealarmpropertylist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceAlarmProperty.DeviceAlarmPropertylist)
  return devicealarmpropertylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarmProperty >*
SFrameDeviceAlarmProperty::mutable_devicealarmpropertylist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceAlarmProperty.DeviceAlarmPropertylist)
  return &devicealarmpropertylist_;
}
inline const ::ServerProtocol::DeviceAlarmProperty& SFrameDeviceAlarmProperty::devicealarmpropertylist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceAlarmProperty.DeviceAlarmPropertylist)
  return devicealarmpropertylist_.Get(index);
}
inline ::ServerProtocol::DeviceAlarmProperty* SFrameDeviceAlarmProperty::add_devicealarmpropertylist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceAlarmProperty.DeviceAlarmPropertylist)
  return devicealarmpropertylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceAlarmProperty >&
SFrameDeviceAlarmProperty::devicealarmpropertylist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceAlarmProperty.DeviceAlarmPropertylist)
  return devicealarmpropertylist_;
}

// -------------------------------------------------------------------

// DeviceAlarmProperty

// uint64 Id = 1;
inline void DeviceAlarmProperty::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceAlarmProperty::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarmProperty.Id)
  return id_;
}
inline void DeviceAlarmProperty::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarmProperty.Id)
}

// uint64 DeviceAlarmId = 2;
inline void DeviceAlarmProperty::clear_devicealarmid() {
  devicealarmid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceAlarmProperty::devicealarmid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarmProperty.DeviceAlarmId)
  return devicealarmid_;
}
inline void DeviceAlarmProperty::set_devicealarmid(::google::protobuf::uint64 value) {
  
  devicealarmid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarmProperty.DeviceAlarmId)
}

// int32 AlarmType = 3;
inline void DeviceAlarmProperty::clear_alarmtype() {
  alarmtype_ = 0;
}
inline ::google::protobuf::int32 DeviceAlarmProperty::alarmtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarmProperty.AlarmType)
  return alarmtype_;
}
inline void DeviceAlarmProperty::set_alarmtype(::google::protobuf::int32 value) {
  
  alarmtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarmProperty.AlarmType)
}

// int32 AlarmValue = 4;
inline void DeviceAlarmProperty::clear_alarmvalue() {
  alarmvalue_ = 0;
}
inline ::google::protobuf::int32 DeviceAlarmProperty::alarmvalue() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarmProperty.AlarmValue)
  return alarmvalue_;
}
inline void DeviceAlarmProperty::set_alarmvalue(::google::protobuf::int32 value) {
  
  alarmvalue_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarmProperty.AlarmValue)
}

// int32 State = 5;
inline void DeviceAlarmProperty::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 DeviceAlarmProperty::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceAlarmProperty.State)
  return state_;
}
inline void DeviceAlarmProperty::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceAlarmProperty.State)
}

// -------------------------------------------------------------------

// SFrameGwDeviceBindTemp

// repeated .ServerProtocol.GwDeviceBindTemp GwDeviceBindTemplist = 1;
inline int SFrameGwDeviceBindTemp::gwdevicebindtemplist_size() const {
  return gwdevicebindtemplist_.size();
}
inline void SFrameGwDeviceBindTemp::clear_gwdevicebindtemplist() {
  gwdevicebindtemplist_.Clear();
}
inline ::ServerProtocol::GwDeviceBindTemp* SFrameGwDeviceBindTemp::mutable_gwdevicebindtemplist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameGwDeviceBindTemp.GwDeviceBindTemplist)
  return gwdevicebindtemplist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GwDeviceBindTemp >*
SFrameGwDeviceBindTemp::mutable_gwdevicebindtemplist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameGwDeviceBindTemp.GwDeviceBindTemplist)
  return &gwdevicebindtemplist_;
}
inline const ::ServerProtocol::GwDeviceBindTemp& SFrameGwDeviceBindTemp::gwdevicebindtemplist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameGwDeviceBindTemp.GwDeviceBindTemplist)
  return gwdevicebindtemplist_.Get(index);
}
inline ::ServerProtocol::GwDeviceBindTemp* SFrameGwDeviceBindTemp::add_gwdevicebindtemplist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameGwDeviceBindTemp.GwDeviceBindTemplist)
  return gwdevicebindtemplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GwDeviceBindTemp >&
SFrameGwDeviceBindTemp::gwdevicebindtemplist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameGwDeviceBindTemp.GwDeviceBindTemplist)
  return gwdevicebindtemplist_;
}

// -------------------------------------------------------------------

// GwDeviceBindTemp

// uint64 Id = 1;
inline void GwDeviceBindTemp::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GwDeviceBindTemp::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GwDeviceBindTemp.Id)
  return id_;
}
inline void GwDeviceBindTemp::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GwDeviceBindTemp.Id)
}

// string GwMac = 2;
inline void GwDeviceBindTemp::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GwDeviceBindTemp::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GwDeviceBindTemp.GwMac)
  return gwmac_.GetNoArena();
}
inline void GwDeviceBindTemp::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GwDeviceBindTemp.GwMac)
}
#if LANG_CXX11
inline void GwDeviceBindTemp::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GwDeviceBindTemp.GwMac)
}
#endif
inline void GwDeviceBindTemp::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GwDeviceBindTemp.GwMac)
}
inline void GwDeviceBindTemp::set_gwmac(const char* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GwDeviceBindTemp.GwMac)
}
inline ::std::string* GwDeviceBindTemp::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GwDeviceBindTemp.GwMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GwDeviceBindTemp::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GwDeviceBindTemp.GwMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GwDeviceBindTemp::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GwDeviceBindTemp.GwMac)
}

// string DeviceMac = 3;
inline void GwDeviceBindTemp::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GwDeviceBindTemp::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GwDeviceBindTemp.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void GwDeviceBindTemp::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GwDeviceBindTemp.DeviceMac)
}
#if LANG_CXX11
inline void GwDeviceBindTemp::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GwDeviceBindTemp.DeviceMac)
}
#endif
inline void GwDeviceBindTemp::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GwDeviceBindTemp.DeviceMac)
}
inline void GwDeviceBindTemp::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GwDeviceBindTemp.DeviceMac)
}
inline ::std::string* GwDeviceBindTemp::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GwDeviceBindTemp.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GwDeviceBindTemp::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GwDeviceBindTemp.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GwDeviceBindTemp::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GwDeviceBindTemp.DeviceMac)
}

// int32 State = 4;
inline void GwDeviceBindTemp::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 GwDeviceBindTemp::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GwDeviceBindTemp.State)
  return state_;
}
inline void GwDeviceBindTemp::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GwDeviceBindTemp.State)
}

// -------------------------------------------------------------------

// SFrameDeviceDescribeInfo

// repeated .ServerProtocol.DeviceDescribeInfo DeviceDescribeInfotlist = 1;
inline int SFrameDeviceDescribeInfo::devicedescribeinfotlist_size() const {
  return devicedescribeinfotlist_.size();
}
inline void SFrameDeviceDescribeInfo::clear_devicedescribeinfotlist() {
  devicedescribeinfotlist_.Clear();
}
inline ::ServerProtocol::DeviceDescribeInfo* SFrameDeviceDescribeInfo::mutable_devicedescribeinfotlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceDescribeInfo.DeviceDescribeInfotlist)
  return devicedescribeinfotlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceDescribeInfo >*
SFrameDeviceDescribeInfo::mutable_devicedescribeinfotlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceDescribeInfo.DeviceDescribeInfotlist)
  return &devicedescribeinfotlist_;
}
inline const ::ServerProtocol::DeviceDescribeInfo& SFrameDeviceDescribeInfo::devicedescribeinfotlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceDescribeInfo.DeviceDescribeInfotlist)
  return devicedescribeinfotlist_.Get(index);
}
inline ::ServerProtocol::DeviceDescribeInfo* SFrameDeviceDescribeInfo::add_devicedescribeinfotlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceDescribeInfo.DeviceDescribeInfotlist)
  return devicedescribeinfotlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceDescribeInfo >&
SFrameDeviceDescribeInfo::devicedescribeinfotlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceDescribeInfo.DeviceDescribeInfotlist)
  return devicedescribeinfotlist_;
}

// -------------------------------------------------------------------

// DeviceDescribeInfo

// uint64 Id = 1;
inline void DeviceDescribeInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceDescribeInfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.Id)
  return id_;
}
inline void DeviceDescribeInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.Id)
}

// string Desribe = 2;
inline void DeviceDescribeInfo::clear_desribe() {
  desribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDescribeInfo::desribe() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.Desribe)
  return desribe_.GetNoArena();
}
inline void DeviceDescribeInfo::set_desribe(const ::std::string& value) {
  
  desribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.Desribe)
}
#if LANG_CXX11
inline void DeviceDescribeInfo::set_desribe(::std::string&& value) {
  
  desribe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceDescribeInfo.Desribe)
}
#endif
inline void DeviceDescribeInfo::set_desribe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceDescribeInfo.Desribe)
}
inline void DeviceDescribeInfo::set_desribe(const char* value, size_t size) {
  
  desribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceDescribeInfo.Desribe)
}
inline ::std::string* DeviceDescribeInfo::mutable_desribe() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceDescribeInfo.Desribe)
  return desribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDescribeInfo::release_desribe() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceDescribeInfo.Desribe)
  
  return desribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescribeInfo::set_allocated_desribe(::std::string* desribe) {
  if (desribe != NULL) {
    
  } else {
    
  }
  desribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desribe);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceDescribeInfo.Desribe)
}

// int32 TypeValue = 3;
inline void DeviceDescribeInfo::clear_typevalue() {
  typevalue_ = 0;
}
inline ::google::protobuf::int32 DeviceDescribeInfo::typevalue() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.TypeValue)
  return typevalue_;
}
inline void DeviceDescribeInfo::set_typevalue(::google::protobuf::int32 value) {
  
  typevalue_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.TypeValue)
}

// int32 State = 4;
inline void DeviceDescribeInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 DeviceDescribeInfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.State)
  return state_;
}
inline void DeviceDescribeInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.State)
}

// string BigDesribe = 5;
inline void DeviceDescribeInfo::clear_bigdesribe() {
  bigdesribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDescribeInfo::bigdesribe() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.BigDesribe)
  return bigdesribe_.GetNoArena();
}
inline void DeviceDescribeInfo::set_bigdesribe(const ::std::string& value) {
  
  bigdesribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.BigDesribe)
}
#if LANG_CXX11
inline void DeviceDescribeInfo::set_bigdesribe(::std::string&& value) {
  
  bigdesribe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceDescribeInfo.BigDesribe)
}
#endif
inline void DeviceDescribeInfo::set_bigdesribe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bigdesribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceDescribeInfo.BigDesribe)
}
inline void DeviceDescribeInfo::set_bigdesribe(const char* value, size_t size) {
  
  bigdesribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceDescribeInfo.BigDesribe)
}
inline ::std::string* DeviceDescribeInfo::mutable_bigdesribe() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceDescribeInfo.BigDesribe)
  return bigdesribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDescribeInfo::release_bigdesribe() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceDescribeInfo.BigDesribe)
  
  return bigdesribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDescribeInfo::set_allocated_bigdesribe(::std::string* bigdesribe) {
  if (bigdesribe != NULL) {
    
  } else {
    
  }
  bigdesribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigdesribe);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceDescribeInfo.BigDesribe)
}

// uint64 DevTypeCribeID = 6;
inline void DeviceDescribeInfo::clear_devtypecribeid() {
  devtypecribeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeviceDescribeInfo::devtypecribeid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDescribeInfo.DevTypeCribeID)
  return devtypecribeid_;
}
inline void DeviceDescribeInfo::set_devtypecribeid(::google::protobuf::uint64 value) {
  
  devtypecribeid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDescribeInfo.DevTypeCribeID)
}

// -------------------------------------------------------------------

// SystemJGPush

// int32 PushType = 1;
inline void SystemJGPush::clear_pushtype() {
  pushtype_ = 0;
}
inline ::google::protobuf::int32 SystemJGPush::pushtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.PushType)
  return pushtype_;
}
inline void SystemJGPush::set_pushtype(::google::protobuf::int32 value) {
  
  pushtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.PushType)
}

// int32 ActionType = 2;
inline void SystemJGPush::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 SystemJGPush::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.ActionType)
  return actiontype_;
}
inline void SystemJGPush::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.ActionType)
}

// string PushTagOrAlias = 3;
inline void SystemJGPush::clear_pushtagoralias() {
  pushtagoralias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemJGPush::pushtagoralias() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.PushTagOrAlias)
  return pushtagoralias_.GetNoArena();
}
inline void SystemJGPush::set_pushtagoralias(const ::std::string& value) {
  
  pushtagoralias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.PushTagOrAlias)
}
#if LANG_CXX11
inline void SystemJGPush::set_pushtagoralias(::std::string&& value) {
  
  pushtagoralias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemJGPush.PushTagOrAlias)
}
#endif
inline void SystemJGPush::set_pushtagoralias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pushtagoralias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemJGPush.PushTagOrAlias)
}
inline void SystemJGPush::set_pushtagoralias(const char* value, size_t size) {
  
  pushtagoralias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemJGPush.PushTagOrAlias)
}
inline ::std::string* SystemJGPush::mutable_pushtagoralias() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemJGPush.PushTagOrAlias)
  return pushtagoralias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemJGPush::release_pushtagoralias() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemJGPush.PushTagOrAlias)
  
  return pushtagoralias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemJGPush::set_allocated_pushtagoralias(::std::string* pushtagoralias) {
  if (pushtagoralias != NULL) {
    
  } else {
    
  }
  pushtagoralias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushtagoralias);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemJGPush.PushTagOrAlias)
}

// string Alert = 4;
inline void SystemJGPush::clear_alert() {
  alert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemJGPush::alert() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.Alert)
  return alert_.GetNoArena();
}
inline void SystemJGPush::set_alert(const ::std::string& value) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.Alert)
}
#if LANG_CXX11
inline void SystemJGPush::set_alert(::std::string&& value) {
  
  alert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemJGPush.Alert)
}
#endif
inline void SystemJGPush::set_alert(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemJGPush.Alert)
}
inline void SystemJGPush::set_alert(const char* value, size_t size) {
  
  alert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemJGPush.Alert)
}
inline ::std::string* SystemJGPush::mutable_alert() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemJGPush.Alert)
  return alert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemJGPush::release_alert() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemJGPush.Alert)
  
  return alert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemJGPush::set_allocated_alert(::std::string* alert) {
  if (alert != NULL) {
    
  } else {
    
  }
  alert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alert);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemJGPush.Alert)
}

// string Title = 5;
inline void SystemJGPush::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemJGPush::title() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.Title)
  return title_.GetNoArena();
}
inline void SystemJGPush::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.Title)
}
#if LANG_CXX11
inline void SystemJGPush::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemJGPush.Title)
}
#endif
inline void SystemJGPush::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemJGPush.Title)
}
inline void SystemJGPush::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemJGPush.Title)
}
inline ::std::string* SystemJGPush::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemJGPush.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemJGPush::release_title() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemJGPush.Title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemJGPush::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemJGPush.Title)
}

// string Content = 6;
inline void SystemJGPush::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemJGPush::content() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.Content)
  return content_.GetNoArena();
}
inline void SystemJGPush::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.Content)
}
#if LANG_CXX11
inline void SystemJGPush::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemJGPush.Content)
}
#endif
inline void SystemJGPush::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemJGPush.Content)
}
inline void SystemJGPush::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemJGPush.Content)
}
inline ::std::string* SystemJGPush::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemJGPush.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemJGPush::release_content() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemJGPush.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemJGPush::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemJGPush.Content)
}

// string MsgTitle = 7;
inline void SystemJGPush::clear_msgtitle() {
  msgtitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemJGPush::msgtitle() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.MsgTitle)
  return msgtitle_.GetNoArena();
}
inline void SystemJGPush::set_msgtitle(const ::std::string& value) {
  
  msgtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.MsgTitle)
}
#if LANG_CXX11
inline void SystemJGPush::set_msgtitle(::std::string&& value) {
  
  msgtitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemJGPush.MsgTitle)
}
#endif
inline void SystemJGPush::set_msgtitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemJGPush.MsgTitle)
}
inline void SystemJGPush::set_msgtitle(const char* value, size_t size) {
  
  msgtitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemJGPush.MsgTitle)
}
inline ::std::string* SystemJGPush::mutable_msgtitle() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemJGPush.MsgTitle)
  return msgtitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemJGPush::release_msgtitle() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemJGPush.MsgTitle)
  
  return msgtitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemJGPush::set_allocated_msgtitle(::std::string* msgtitle) {
  if (msgtitle != NULL) {
    
  } else {
    
  }
  msgtitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtitle);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemJGPush.MsgTitle)
}

// int32 PushAppType = 8;
inline void SystemJGPush::clear_pushapptype() {
  pushapptype_ = 0;
}
inline ::google::protobuf::int32 SystemJGPush::pushapptype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.PushAppType)
  return pushapptype_;
}
inline void SystemJGPush::set_pushapptype(::google::protobuf::int32 value) {
  
  pushapptype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.PushAppType)
}

// int32 PushTempType = 9;
inline void SystemJGPush::clear_pushtemptype() {
  pushtemptype_ = 0;
}
inline ::google::protobuf::int32 SystemJGPush::pushtemptype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemJGPush.PushTempType)
  return pushtemptype_;
}
inline void SystemJGPush::set_pushtemptype(::google::protobuf::int32 value) {
  
  pushtemptype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemJGPush.PushTempType)
}

// -------------------------------------------------------------------

// FrameRegisterServer

// int32 id = 1;
inline void FrameRegisterServer::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FrameRegisterServer::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServer.id)
  return id_;
}
inline void FrameRegisterServer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServer.id)
}

// int32 Type = 2;
inline void FrameRegisterServer::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 FrameRegisterServer::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServer.Type)
  return type_;
}
inline void FrameRegisterServer::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServer.Type)
}

// int32 MaxLink = 3;
inline void FrameRegisterServer::clear_maxlink() {
  maxlink_ = 0;
}
inline ::google::protobuf::int32 FrameRegisterServer::maxlink() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServer.MaxLink)
  return maxlink_;
}
inline void FrameRegisterServer::set_maxlink(::google::protobuf::int32 value) {
  
  maxlink_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServer.MaxLink)
}

// repeated int32 CmdList = 4;
inline int FrameRegisterServer::cmdlist_size() const {
  return cmdlist_.size();
}
inline void FrameRegisterServer::clear_cmdlist() {
  cmdlist_.Clear();
}
inline ::google::protobuf::int32 FrameRegisterServer::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServer.CmdList)
  return cmdlist_.Get(index);
}
inline void FrameRegisterServer::set_cmdlist(int index, ::google::protobuf::int32 value) {
  cmdlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServer.CmdList)
}
inline void FrameRegisterServer::add_cmdlist(::google::protobuf::int32 value) {
  cmdlist_.Add(value);
  // @@protoc_insertion_point(field_add:ServerProtocol.FrameRegisterServer.CmdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FrameRegisterServer::cmdlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.FrameRegisterServer.CmdList)
  return cmdlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FrameRegisterServer::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.FrameRegisterServer.CmdList)
  return &cmdlist_;
}

// -------------------------------------------------------------------

// FrameRegisterServerAnswer

// int32 state = 1;
inline void FrameRegisterServerAnswer::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 FrameRegisterServerAnswer::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServerAnswer.state)
  return state_;
}
inline void FrameRegisterServerAnswer::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServerAnswer.state)
}

// int32 id = 2;
inline void FrameRegisterServerAnswer::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FrameRegisterServerAnswer::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServerAnswer.id)
  return id_;
}
inline void FrameRegisterServerAnswer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameRegisterServerAnswer.id)
}

// repeated .ServerProtocol.FrameUserInfo FrameUserInfoList = 3;
inline int FrameRegisterServerAnswer::frameuserinfolist_size() const {
  return frameuserinfolist_.size();
}
inline void FrameRegisterServerAnswer::clear_frameuserinfolist() {
  frameuserinfolist_.Clear();
}
inline ::ServerProtocol::FrameUserInfo* FrameRegisterServerAnswer::mutable_frameuserinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FrameRegisterServerAnswer.FrameUserInfoList)
  return frameuserinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FrameUserInfo >*
FrameRegisterServerAnswer::mutable_frameuserinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.FrameRegisterServerAnswer.FrameUserInfoList)
  return &frameuserinfolist_;
}
inline const ::ServerProtocol::FrameUserInfo& FrameRegisterServerAnswer::frameuserinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameRegisterServerAnswer.FrameUserInfoList)
  return frameuserinfolist_.Get(index);
}
inline ::ServerProtocol::FrameUserInfo* FrameRegisterServerAnswer::add_frameuserinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.FrameRegisterServerAnswer.FrameUserInfoList)
  return frameuserinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::FrameUserInfo >&
FrameRegisterServerAnswer::frameuserinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.FrameRegisterServerAnswer.FrameUserInfoList)
  return frameuserinfolist_;
}

// -------------------------------------------------------------------

// FrameUserInfo

// int32 id = 2;
inline void FrameUserInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FrameUserInfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FrameUserInfo.id)
  return id_;
}
inline void FrameUserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FrameUserInfo.id)
}

// -------------------------------------------------------------------

// SFrameGWDeviceContrast

// repeated .ServerProtocol.SGWDeviceContrast SGWDeviceContrastlist = 1;
inline int SFrameGWDeviceContrast::sgwdevicecontrastlist_size() const {
  return sgwdevicecontrastlist_.size();
}
inline void SFrameGWDeviceContrast::clear_sgwdevicecontrastlist() {
  sgwdevicecontrastlist_.Clear();
}
inline ::ServerProtocol::SGWDeviceContrast* SFrameGWDeviceContrast::mutable_sgwdevicecontrastlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameGWDeviceContrast.SGWDeviceContrastlist)
  return sgwdevicecontrastlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SGWDeviceContrast >*
SFrameGWDeviceContrast::mutable_sgwdevicecontrastlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameGWDeviceContrast.SGWDeviceContrastlist)
  return &sgwdevicecontrastlist_;
}
inline const ::ServerProtocol::SGWDeviceContrast& SFrameGWDeviceContrast::sgwdevicecontrastlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameGWDeviceContrast.SGWDeviceContrastlist)
  return sgwdevicecontrastlist_.Get(index);
}
inline ::ServerProtocol::SGWDeviceContrast* SFrameGWDeviceContrast::add_sgwdevicecontrastlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameGWDeviceContrast.SGWDeviceContrastlist)
  return sgwdevicecontrastlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SGWDeviceContrast >&
SFrameGWDeviceContrast::sgwdevicecontrastlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameGWDeviceContrast.SGWDeviceContrastlist)
  return sgwdevicecontrastlist_;
}

// -------------------------------------------------------------------

// SGWDeviceContrast

// uint64 Id = 1;
inline void SGWDeviceContrast::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SGWDeviceContrast::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SGWDeviceContrast.Id)
  return id_;
}
inline void SGWDeviceContrast::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SGWDeviceContrast.Id)
}

// uint64 GWId = 2;
inline void SGWDeviceContrast::clear_gwid() {
  gwid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SGWDeviceContrast::gwid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SGWDeviceContrast.GWId)
  return gwid_;
}
inline void SGWDeviceContrast::set_gwid(::google::protobuf::uint64 value) {
  
  gwid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SGWDeviceContrast.GWId)
}

// uint64 DeviceId = 3;
inline void SGWDeviceContrast::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SGWDeviceContrast::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SGWDeviceContrast.DeviceId)
  return deviceid_;
}
inline void SGWDeviceContrast::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SGWDeviceContrast.DeviceId)
}

// int32 State = 4;
inline void SGWDeviceContrast::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SGWDeviceContrast::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SGWDeviceContrast.State)
  return state_;
}
inline void SGWDeviceContrast::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SGWDeviceContrast.State)
}

// -------------------------------------------------------------------

// SFrameDeviceFetNickName

// repeated .ServerProtocol.SDevFetNickName SDevFetNickNamelist = 1;
inline int SFrameDeviceFetNickName::sdevfetnicknamelist_size() const {
  return sdevfetnicknamelist_.size();
}
inline void SFrameDeviceFetNickName::clear_sdevfetnicknamelist() {
  sdevfetnicknamelist_.Clear();
}
inline ::ServerProtocol::SDevFetNickName* SFrameDeviceFetNickName::mutable_sdevfetnicknamelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceFetNickName.SDevFetNickNamelist)
  return sdevfetnicknamelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevFetNickName >*
SFrameDeviceFetNickName::mutable_sdevfetnicknamelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceFetNickName.SDevFetNickNamelist)
  return &sdevfetnicknamelist_;
}
inline const ::ServerProtocol::SDevFetNickName& SFrameDeviceFetNickName::sdevfetnicknamelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceFetNickName.SDevFetNickNamelist)
  return sdevfetnicknamelist_.Get(index);
}
inline ::ServerProtocol::SDevFetNickName* SFrameDeviceFetNickName::add_sdevfetnicknamelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceFetNickName.SDevFetNickNamelist)
  return sdevfetnicknamelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevFetNickName >&
SFrameDeviceFetNickName::sdevfetnicknamelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceFetNickName.SDevFetNickNamelist)
  return sdevfetnicknamelist_;
}

// -------------------------------------------------------------------

// SDevFetNickName

// uint64 Id = 1;
inline void SDevFetNickName::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDevFetNickName::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevFetNickName.Id)
  return id_;
}
inline void SDevFetNickName::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevFetNickName.Id)
}

// string Mac = 2;
inline void SDevFetNickName::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDevFetNickName::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevFetNickName.Mac)
  return mac_.GetNoArena();
}
inline void SDevFetNickName::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevFetNickName.Mac)
}
#if LANG_CXX11
inline void SDevFetNickName::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDevFetNickName.Mac)
}
#endif
inline void SDevFetNickName::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDevFetNickName.Mac)
}
inline void SDevFetNickName::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDevFetNickName.Mac)
}
inline ::std::string* SDevFetNickName::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDevFetNickName.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDevFetNickName::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDevFetNickName.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDevFetNickName::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDevFetNickName.Mac)
}

// int32 FetSort = 3;
inline void SDevFetNickName::clear_fetsort() {
  fetsort_ = 0;
}
inline ::google::protobuf::int32 SDevFetNickName::fetsort() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevFetNickName.FetSort)
  return fetsort_;
}
inline void SDevFetNickName::set_fetsort(::google::protobuf::int32 value) {
  
  fetsort_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevFetNickName.FetSort)
}

// string NickName = 4;
inline void SDevFetNickName::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDevFetNickName::nickname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevFetNickName.NickName)
  return nickname_.GetNoArena();
}
inline void SDevFetNickName::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevFetNickName.NickName)
}
#if LANG_CXX11
inline void SDevFetNickName::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDevFetNickName.NickName)
}
#endif
inline void SDevFetNickName::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDevFetNickName.NickName)
}
inline void SDevFetNickName::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDevFetNickName.NickName)
}
inline ::std::string* SDevFetNickName::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDevFetNickName.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDevFetNickName::release_nickname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDevFetNickName.NickName)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDevFetNickName::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDevFetNickName.NickName)
}

// int32 State = 5;
inline void SDevFetNickName::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SDevFetNickName::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevFetNickName.State)
  return state_;
}
inline void SDevFetNickName::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevFetNickName.State)
}

// -------------------------------------------------------------------

// SFrameDeviceFet

// repeated .ServerProtocol.SDeviceFet SDeviceFetlist = 1;
inline int SFrameDeviceFet::sdevicefetlist_size() const {
  return sdevicefetlist_.size();
}
inline void SFrameDeviceFet::clear_sdevicefetlist() {
  sdevicefetlist_.Clear();
}
inline ::ServerProtocol::SDeviceFet* SFrameDeviceFet::mutable_sdevicefetlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceFet.SDeviceFetlist)
  return sdevicefetlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceFet >*
SFrameDeviceFet::mutable_sdevicefetlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceFet.SDeviceFetlist)
  return &sdevicefetlist_;
}
inline const ::ServerProtocol::SDeviceFet& SFrameDeviceFet::sdevicefetlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceFet.SDeviceFetlist)
  return sdevicefetlist_.Get(index);
}
inline ::ServerProtocol::SDeviceFet* SFrameDeviceFet::add_sdevicefetlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceFet.SDeviceFetlist)
  return sdevicefetlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceFet >&
SFrameDeviceFet::sdevicefetlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceFet.SDeviceFetlist)
  return sdevicefetlist_;
}

// -------------------------------------------------------------------

// SDeviceFet

// uint64 Id = 1;
inline void SDeviceFet::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceFet::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.Id)
  return id_;
}
inline void SDeviceFet::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.Id)
}

// int32 Level = 2;
inline void SDeviceFet::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::level() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.Level)
  return level_;
}
inline void SDeviceFet::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.Level)
}

// int32 FetNumber = 3;
inline void SDeviceFet::clear_fetnumber() {
  fetnumber_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::fetnumber() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.FetNumber)
  return fetnumber_;
}
inline void SDeviceFet::set_fetnumber(::google::protobuf::int32 value) {
  
  fetnumber_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.FetNumber)
}

// int32 RootIdx = 4;
inline void SDeviceFet::clear_rootidx() {
  rootidx_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::rootidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.RootIdx)
  return rootidx_;
}
inline void SDeviceFet::set_rootidx(::google::protobuf::int32 value) {
  
  rootidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.RootIdx)
}

// int32 DevSort = 5;
inline void SDeviceFet::clear_devsort() {
  devsort_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::devsort() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.DevSort)
  return devsort_;
}
inline void SDeviceFet::set_devsort(::google::protobuf::int32 value) {
  
  devsort_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.DevSort)
}

// int32 SortNumber = 6;
inline void SDeviceFet::clear_sortnumber() {
  sortnumber_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::sortnumber() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.SortNumber)
  return sortnumber_;
}
inline void SDeviceFet::set_sortnumber(::google::protobuf::int32 value) {
  
  sortnumber_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.SortNumber)
}

// int32 State = 7;
inline void SDeviceFet::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.State)
  return state_;
}
inline void SDeviceFet::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.State)
}

// string DivMac = 8;
inline void SDeviceFet::clear_divmac() {
  divmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceFet::divmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.DivMac)
  return divmac_.GetNoArena();
}
inline void SDeviceFet::set_divmac(const ::std::string& value) {
  
  divmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.DivMac)
}
#if LANG_CXX11
inline void SDeviceFet::set_divmac(::std::string&& value) {
  
  divmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceFet.DivMac)
}
#endif
inline void SDeviceFet::set_divmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  divmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceFet.DivMac)
}
inline void SDeviceFet::set_divmac(const char* value, size_t size) {
  
  divmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceFet.DivMac)
}
inline ::std::string* SDeviceFet::mutable_divmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceFet.DivMac)
  return divmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceFet::release_divmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceFet.DivMac)
  
  return divmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceFet::set_allocated_divmac(::std::string* divmac) {
  if (divmac != NULL) {
    
  } else {
    
  }
  divmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), divmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceFet.DivMac)
}

// int32 DBState = 9;
inline void SDeviceFet::clear_dbstate() {
  dbstate_ = 0;
}
inline ::google::protobuf::int32 SDeviceFet::dbstate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.DBState)
  return dbstate_;
}
inline void SDeviceFet::set_dbstate(::google::protobuf::int32 value) {
  
  dbstate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.DBState)
}

// uint32 Crc = 10;
inline void SDeviceFet::clear_crc() {
  crc_ = 0u;
}
inline ::google::protobuf::uint32 SDeviceFet::crc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceFet.Crc)
  return crc_;
}
inline void SDeviceFet::set_crc(::google::protobuf::uint32 value) {
  
  crc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceFet.Crc)
}

// -------------------------------------------------------------------

// SFrameDeviceProperty

// repeated .ServerProtocol.SDeviceProperty SDevicePropertylist = 1;
inline int SFrameDeviceProperty::sdevicepropertylist_size() const {
  return sdevicepropertylist_.size();
}
inline void SFrameDeviceProperty::clear_sdevicepropertylist() {
  sdevicepropertylist_.Clear();
}
inline ::ServerProtocol::SDeviceProperty* SFrameDeviceProperty::mutable_sdevicepropertylist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceProperty.SDevicePropertylist)
  return sdevicepropertylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceProperty >*
SFrameDeviceProperty::mutable_sdevicepropertylist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceProperty.SDevicePropertylist)
  return &sdevicepropertylist_;
}
inline const ::ServerProtocol::SDeviceProperty& SFrameDeviceProperty::sdevicepropertylist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceProperty.SDevicePropertylist)
  return sdevicepropertylist_.Get(index);
}
inline ::ServerProtocol::SDeviceProperty* SFrameDeviceProperty::add_sdevicepropertylist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceProperty.SDevicePropertylist)
  return sdevicepropertylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceProperty >&
SFrameDeviceProperty::sdevicepropertylist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceProperty.SDevicePropertylist)
  return sdevicepropertylist_;
}

// -------------------------------------------------------------------

// SDeviceProperty

// uint64 Id = 1;
inline void SDeviceProperty::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceProperty::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.Id)
  return id_;
}
inline void SDeviceProperty::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.Id)
}

// uint64 DeviceID = 2;
inline void SDeviceProperty::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceProperty::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.DeviceID)
  return deviceid_;
}
inline void SDeviceProperty::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.DeviceID)
}

// int32 RootFetIdx = 3;
inline void SDeviceProperty::clear_rootfetidx() {
  rootfetidx_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::rootfetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.RootFetIdx)
  return rootfetidx_;
}
inline void SDeviceProperty::set_rootfetidx(::google::protobuf::int32 value) {
  
  rootfetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.RootFetIdx)
}

// int32 DevID = 4;
inline void SDeviceProperty::clear_devid() {
  devid_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::devid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.DevID)
  return devid_;
}
inline void SDeviceProperty::set_devid(::google::protobuf::int32 value) {
  
  devid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.DevID)
}

// int32 DrvIdx = 5;
inline void SDeviceProperty::clear_drvidx() {
  drvidx_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::drvidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.DrvIdx)
  return drvidx_;
}
inline void SDeviceProperty::set_drvidx(::google::protobuf::int32 value) {
  
  drvidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.DrvIdx)
}

// int32 PowerLevel = 6;
inline void SDeviceProperty::clear_powerlevel() {
  powerlevel_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::powerlevel() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.PowerLevel)
  return powerlevel_;
}
inline void SDeviceProperty::set_powerlevel(::google::protobuf::int32 value) {
  
  powerlevel_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.PowerLevel)
}

// int32 Online = 7;
inline void SDeviceProperty::clear_online() {
  online_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::online() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.Online)
  return online_;
}
inline void SDeviceProperty::set_online(::google::protobuf::int32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.Online)
}

// int32 FetCRC = 8;
inline void SDeviceProperty::clear_fetcrc() {
  fetcrc_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::fetcrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.FetCRC)
  return fetcrc_;
}
inline void SDeviceProperty::set_fetcrc(::google::protobuf::int32 value) {
  
  fetcrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.FetCRC)
}

// int32 GrpFet = 9;
inline void SDeviceProperty::clear_grpfet() {
  grpfet_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::grpfet() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.GrpFet)
  return grpfet_;
}
inline void SDeviceProperty::set_grpfet(::google::protobuf::int32 value) {
  
  grpfet_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.GrpFet)
}

// int32 State = 10;
inline void SDeviceProperty::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SDeviceProperty::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceProperty.State)
  return state_;
}
inline void SDeviceProperty::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceProperty.State)
}

// -------------------------------------------------------------------

// SFrameAppRoleContrastInfo

// repeated .ServerProtocol.SAppRoleContrastInfo SAppRoleContrastInfolist = 1;
inline int SFrameAppRoleContrastInfo::sapprolecontrastinfolist_size() const {
  return sapprolecontrastinfolist_.size();
}
inline void SFrameAppRoleContrastInfo::clear_sapprolecontrastinfolist() {
  sapprolecontrastinfolist_.Clear();
}
inline ::ServerProtocol::SAppRoleContrastInfo* SFrameAppRoleContrastInfo::mutable_sapprolecontrastinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAppRoleContrastInfo.SAppRoleContrastInfolist)
  return sapprolecontrastinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleContrastInfo >*
SFrameAppRoleContrastInfo::mutable_sapprolecontrastinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAppRoleContrastInfo.SAppRoleContrastInfolist)
  return &sapprolecontrastinfolist_;
}
inline const ::ServerProtocol::SAppRoleContrastInfo& SFrameAppRoleContrastInfo::sapprolecontrastinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAppRoleContrastInfo.SAppRoleContrastInfolist)
  return sapprolecontrastinfolist_.Get(index);
}
inline ::ServerProtocol::SAppRoleContrastInfo* SFrameAppRoleContrastInfo::add_sapprolecontrastinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAppRoleContrastInfo.SAppRoleContrastInfolist)
  return sapprolecontrastinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleContrastInfo >&
SFrameAppRoleContrastInfo::sapprolecontrastinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAppRoleContrastInfo.SAppRoleContrastInfolist)
  return sapprolecontrastinfolist_;
}

// -------------------------------------------------------------------

// SAppRoleContrastInfo

// uint64 id = 1;
inline void SAppRoleContrastInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleContrastInfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleContrastInfo.id)
  return id_;
}
inline void SAppRoleContrastInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleContrastInfo.id)
}

// uint64 RoleTypeID = 2;
inline void SAppRoleContrastInfo::clear_roletypeid() {
  roletypeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleContrastInfo::roletypeid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleContrastInfo.RoleTypeID)
  return roletypeid_;
}
inline void SAppRoleContrastInfo::set_roletypeid(::google::protobuf::uint64 value) {
  
  roletypeid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleContrastInfo.RoleTypeID)
}

// uint64 RoleID = 3;
inline void SAppRoleContrastInfo::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleContrastInfo::roleid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleContrastInfo.RoleID)
  return roleid_;
}
inline void SAppRoleContrastInfo::set_roleid(::google::protobuf::uint64 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleContrastInfo.RoleID)
}

// int32 state = 4;
inline void SAppRoleContrastInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAppRoleContrastInfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleContrastInfo.state)
  return state_;
}
inline void SAppRoleContrastInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleContrastInfo.state)
}

// -------------------------------------------------------------------

// SFrameAppRoleFunBaseInfo

// repeated .ServerProtocol.SAppRoleFunBaseInfo SAppRoleFunBaseInfolist = 1;
inline int SFrameAppRoleFunBaseInfo::sapprolefunbaseinfolist_size() const {
  return sapprolefunbaseinfolist_.size();
}
inline void SFrameAppRoleFunBaseInfo::clear_sapprolefunbaseinfolist() {
  sapprolefunbaseinfolist_.Clear();
}
inline ::ServerProtocol::SAppRoleFunBaseInfo* SFrameAppRoleFunBaseInfo::mutable_sapprolefunbaseinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAppRoleFunBaseInfo.SAppRoleFunBaseInfolist)
  return sapprolefunbaseinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFunBaseInfo >*
SFrameAppRoleFunBaseInfo::mutable_sapprolefunbaseinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAppRoleFunBaseInfo.SAppRoleFunBaseInfolist)
  return &sapprolefunbaseinfolist_;
}
inline const ::ServerProtocol::SAppRoleFunBaseInfo& SFrameAppRoleFunBaseInfo::sapprolefunbaseinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAppRoleFunBaseInfo.SAppRoleFunBaseInfolist)
  return sapprolefunbaseinfolist_.Get(index);
}
inline ::ServerProtocol::SAppRoleFunBaseInfo* SFrameAppRoleFunBaseInfo::add_sapprolefunbaseinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAppRoleFunBaseInfo.SAppRoleFunBaseInfolist)
  return sapprolefunbaseinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFunBaseInfo >&
SFrameAppRoleFunBaseInfo::sapprolefunbaseinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAppRoleFunBaseInfo.SAppRoleFunBaseInfolist)
  return sapprolefunbaseinfolist_;
}

// -------------------------------------------------------------------

// SAppRoleFunBaseInfo

// uint64 id = 1;
inline void SAppRoleFunBaseInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleFunBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFunBaseInfo.id)
  return id_;
}
inline void SAppRoleFunBaseInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFunBaseInfo.id)
}

// string name = 2;
inline void SAppRoleFunBaseInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAppRoleFunBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFunBaseInfo.name)
  return name_.GetNoArena();
}
inline void SAppRoleFunBaseInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFunBaseInfo.name)
}
#if LANG_CXX11
inline void SAppRoleFunBaseInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAppRoleFunBaseInfo.name)
}
#endif
inline void SAppRoleFunBaseInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAppRoleFunBaseInfo.name)
}
inline void SAppRoleFunBaseInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAppRoleFunBaseInfo.name)
}
inline ::std::string* SAppRoleFunBaseInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAppRoleFunBaseInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAppRoleFunBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAppRoleFunBaseInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAppRoleFunBaseInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAppRoleFunBaseInfo.name)
}

// int32 number = 3;
inline void SAppRoleFunBaseInfo::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 SAppRoleFunBaseInfo::number() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFunBaseInfo.number)
  return number_;
}
inline void SAppRoleFunBaseInfo::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFunBaseInfo.number)
}

// int32 state = 4;
inline void SAppRoleFunBaseInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAppRoleFunBaseInfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFunBaseInfo.state)
  return state_;
}
inline void SAppRoleFunBaseInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFunBaseInfo.state)
}

// -------------------------------------------------------------------

// SFrameRoleDeviceRecord

// repeated .ServerProtocol.SRoleDeviceRecord SRoleDeviceRecordlist = 1;
inline int SFrameRoleDeviceRecord::sroledevicerecordlist_size() const {
  return sroledevicerecordlist_.size();
}
inline void SFrameRoleDeviceRecord::clear_sroledevicerecordlist() {
  sroledevicerecordlist_.Clear();
}
inline ::ServerProtocol::SRoleDeviceRecord* SFrameRoleDeviceRecord::mutable_sroledevicerecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameRoleDeviceRecord.SRoleDeviceRecordlist)
  return sroledevicerecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleDeviceRecord >*
SFrameRoleDeviceRecord::mutable_sroledevicerecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameRoleDeviceRecord.SRoleDeviceRecordlist)
  return &sroledevicerecordlist_;
}
inline const ::ServerProtocol::SRoleDeviceRecord& SFrameRoleDeviceRecord::sroledevicerecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameRoleDeviceRecord.SRoleDeviceRecordlist)
  return sroledevicerecordlist_.Get(index);
}
inline ::ServerProtocol::SRoleDeviceRecord* SFrameRoleDeviceRecord::add_sroledevicerecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameRoleDeviceRecord.SRoleDeviceRecordlist)
  return sroledevicerecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleDeviceRecord >&
SFrameRoleDeviceRecord::sroledevicerecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameRoleDeviceRecord.SRoleDeviceRecordlist)
  return sroledevicerecordlist_;
}

// -------------------------------------------------------------------

// SRoleDeviceRecord

// uint64 id = 1;
inline void SRoleDeviceRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleDeviceRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleDeviceRecord.id)
  return id_;
}
inline void SRoleDeviceRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleDeviceRecord.id)
}

// uint64 RoleTypeId = 2;
inline void SRoleDeviceRecord::clear_roletypeid() {
  roletypeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleDeviceRecord::roletypeid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleDeviceRecord.RoleTypeId)
  return roletypeid_;
}
inline void SRoleDeviceRecord::set_roletypeid(::google::protobuf::uint64 value) {
  
  roletypeid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleDeviceRecord.RoleTypeId)
}

// uint64 DeviceId = 3;
inline void SRoleDeviceRecord::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleDeviceRecord::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleDeviceRecord.DeviceId)
  return deviceid_;
}
inline void SRoleDeviceRecord::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleDeviceRecord.DeviceId)
}

// int32 State = 4;
inline void SRoleDeviceRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SRoleDeviceRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleDeviceRecord.State)
  return state_;
}
inline void SRoleDeviceRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleDeviceRecord.State)
}

// -------------------------------------------------------------------

// SFrameItem

// repeated .ServerProtocol.SItemInfo SItemInfolist = 1;
inline int SFrameItem::siteminfolist_size() const {
  return siteminfolist_.size();
}
inline void SFrameItem::clear_siteminfolist() {
  siteminfolist_.Clear();
}
inline ::ServerProtocol::SItemInfo* SFrameItem::mutable_siteminfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameItem.SItemInfolist)
  return siteminfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SItemInfo >*
SFrameItem::mutable_siteminfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameItem.SItemInfolist)
  return &siteminfolist_;
}
inline const ::ServerProtocol::SItemInfo& SFrameItem::siteminfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameItem.SItemInfolist)
  return siteminfolist_.Get(index);
}
inline ::ServerProtocol::SItemInfo* SFrameItem::add_siteminfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameItem.SItemInfolist)
  return siteminfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SItemInfo >&
SFrameItem::siteminfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameItem.SItemInfolist)
  return siteminfolist_;
}

// -------------------------------------------------------------------

// SItemInfo

// uint64 Id = 1;
inline void SItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SItemInfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Id)
  return id_;
}
inline void SItemInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Id)
}

// string Name = 2;
inline void SItemInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Name)
  return name_.GetNoArena();
}
inline void SItemInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Name)
}
#if LANG_CXX11
inline void SItemInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.Name)
}
#endif
inline void SItemInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.Name)
}
inline void SItemInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.Name)
}
inline ::std::string* SItemInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.Name)
}

// uint64 MechId = 3;
inline void SItemInfo::clear_mechid() {
  mechid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SItemInfo::mechid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.MechId)
  return mechid_;
}
inline void SItemInfo::set_mechid(::google::protobuf::uint64 value) {
  
  mechid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.MechId)
}

// string MechName = 4;
inline void SItemInfo::clear_mechname() {
  mechname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::mechname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.MechName)
  return mechname_.GetNoArena();
}
inline void SItemInfo::set_mechname(const ::std::string& value) {
  
  mechname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.MechName)
}
#if LANG_CXX11
inline void SItemInfo::set_mechname(::std::string&& value) {
  
  mechname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.MechName)
}
#endif
inline void SItemInfo::set_mechname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mechname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.MechName)
}
inline void SItemInfo::set_mechname(const char* value, size_t size) {
  
  mechname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.MechName)
}
inline ::std::string* SItemInfo::mutable_mechname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.MechName)
  return mechname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_mechname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.MechName)
  
  return mechname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_mechname(::std::string* mechname) {
  if (mechname != NULL) {
    
  } else {
    
  }
  mechname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mechname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.MechName)
}

// string Address = 5;
inline void SItemInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::address() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Address)
  return address_.GetNoArena();
}
inline void SItemInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Address)
}
#if LANG_CXX11
inline void SItemInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.Address)
}
#endif
inline void SItemInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.Address)
}
inline void SItemInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.Address)
}
inline ::std::string* SItemInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_address() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.Address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.Address)
}

// int32 State = 6;
inline void SItemInfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SItemInfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.State)
  return state_;
}
inline void SItemInfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.State)
}

// string phone = 7;
inline void SItemInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.phone)
  return phone_.GetNoArena();
}
inline void SItemInfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.phone)
}
#if LANG_CXX11
inline void SItemInfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.phone)
}
#endif
inline void SItemInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.phone)
}
inline void SItemInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.phone)
}
inline ::std::string* SItemInfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.phone)
}

// int32 RoomCount = 8;
inline void SItemInfo::clear_roomcount() {
  roomcount_ = 0;
}
inline ::google::protobuf::int32 SItemInfo::roomcount() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.RoomCount)
  return roomcount_;
}
inline void SItemInfo::set_roomcount(::google::protobuf::int32 value) {
  
  roomcount_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.RoomCount)
}

// int32 FloorCount = 9;
inline void SItemInfo::clear_floorcount() {
  floorcount_ = 0;
}
inline ::google::protobuf::int32 SItemInfo::floorcount() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.FloorCount)
  return floorcount_;
}
inline void SItemInfo::set_floorcount(::google::protobuf::int32 value) {
  
  floorcount_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.FloorCount)
}

// string Provincial = 10;
inline void SItemInfo::clear_provincial() {
  provincial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::provincial() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Provincial)
  return provincial_.GetNoArena();
}
inline void SItemInfo::set_provincial(const ::std::string& value) {
  
  provincial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Provincial)
}
#if LANG_CXX11
inline void SItemInfo::set_provincial(::std::string&& value) {
  
  provincial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.Provincial)
}
#endif
inline void SItemInfo::set_provincial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provincial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.Provincial)
}
inline void SItemInfo::set_provincial(const char* value, size_t size) {
  
  provincial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.Provincial)
}
inline ::std::string* SItemInfo::mutable_provincial() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.Provincial)
  return provincial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_provincial() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.Provincial)
  
  return provincial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_provincial(::std::string* provincial) {
  if (provincial != NULL) {
    
  } else {
    
  }
  provincial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provincial);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.Provincial)
}

// string Urban = 11;
inline void SItemInfo::clear_urban() {
  urban_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::urban() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Urban)
  return urban_.GetNoArena();
}
inline void SItemInfo::set_urban(const ::std::string& value) {
  
  urban_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Urban)
}
#if LANG_CXX11
inline void SItemInfo::set_urban(::std::string&& value) {
  
  urban_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.Urban)
}
#endif
inline void SItemInfo::set_urban(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  urban_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.Urban)
}
inline void SItemInfo::set_urban(const char* value, size_t size) {
  
  urban_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.Urban)
}
inline ::std::string* SItemInfo::mutable_urban() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.Urban)
  return urban_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_urban() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.Urban)
  
  return urban_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_urban(::std::string* urban) {
  if (urban != NULL) {
    
  } else {
    
  }
  urban_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), urban);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.Urban)
}

// string Area = 12;
inline void SItemInfo::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SItemInfo::area() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.Area)
  return area_.GetNoArena();
}
inline void SItemInfo::set_area(const ::std::string& value) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.Area)
}
#if LANG_CXX11
inline void SItemInfo::set_area(::std::string&& value) {
  
  area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SItemInfo.Area)
}
#endif
inline void SItemInfo::set_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SItemInfo.Area)
}
inline void SItemInfo::set_area(const char* value, size_t size) {
  
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SItemInfo.Area)
}
inline ::std::string* SItemInfo::mutable_area() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SItemInfo.Area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SItemInfo::release_area() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SItemInfo.Area)
  
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SItemInfo::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    
  } else {
    
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SItemInfo.Area)
}

// int32 ItemType = 13;
inline void SItemInfo::clear_itemtype() {
  itemtype_ = 0;
}
inline ::google::protobuf::int32 SItemInfo::itemtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SItemInfo.ItemType)
  return itemtype_;
}
inline void SItemInfo::set_itemtype(::google::protobuf::int32 value) {
  
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SItemInfo.ItemType)
}

// -------------------------------------------------------------------

// SFrameAppRoleType

// repeated .ServerProtocol.SAppRoleType AppRoleTypelist = 1;
inline int SFrameAppRoleType::approletypelist_size() const {
  return approletypelist_.size();
}
inline void SFrameAppRoleType::clear_approletypelist() {
  approletypelist_.Clear();
}
inline ::ServerProtocol::SAppRoleType* SFrameAppRoleType::mutable_approletypelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAppRoleType.AppRoleTypelist)
  return approletypelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleType >*
SFrameAppRoleType::mutable_approletypelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAppRoleType.AppRoleTypelist)
  return &approletypelist_;
}
inline const ::ServerProtocol::SAppRoleType& SFrameAppRoleType::approletypelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAppRoleType.AppRoleTypelist)
  return approletypelist_.Get(index);
}
inline ::ServerProtocol::SAppRoleType* SFrameAppRoleType::add_approletypelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAppRoleType.AppRoleTypelist)
  return approletypelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleType >&
SFrameAppRoleType::approletypelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAppRoleType.AppRoleTypelist)
  return approletypelist_;
}

// -------------------------------------------------------------------

// SAppRoleType

// uint64 id = 1;
inline void SAppRoleType::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleType::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleType.id)
  return id_;
}
inline void SAppRoleType::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleType.id)
}

// string name = 2;
inline void SAppRoleType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAppRoleType::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleType.name)
  return name_.GetNoArena();
}
inline void SAppRoleType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleType.name)
}
#if LANG_CXX11
inline void SAppRoleType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAppRoleType.name)
}
#endif
inline void SAppRoleType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAppRoleType.name)
}
inline void SAppRoleType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAppRoleType.name)
}
inline ::std::string* SAppRoleType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAppRoleType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAppRoleType::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAppRoleType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAppRoleType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAppRoleType.name)
}

// uint64 MechId = 3;
inline void SAppRoleType::clear_mechid() {
  mechid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleType::mechid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleType.MechId)
  return mechid_;
}
inline void SAppRoleType::set_mechid(::google::protobuf::uint64 value) {
  
  mechid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleType.MechId)
}

// int32 Type = 4;
inline void SAppRoleType::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SAppRoleType::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleType.Type)
  return type_;
}
inline void SAppRoleType::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleType.Type)
}

// int32 State = 5;
inline void SAppRoleType::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAppRoleType::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleType.State)
  return state_;
}
inline void SAppRoleType::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleType.State)
}

// -------------------------------------------------------------------

// SFrameAppRoleFun

// repeated .ServerProtocol.SAppRoleFun AppRoleFunlist = 1;
inline int SFrameAppRoleFun::approlefunlist_size() const {
  return approlefunlist_.size();
}
inline void SFrameAppRoleFun::clear_approlefunlist() {
  approlefunlist_.Clear();
}
inline ::ServerProtocol::SAppRoleFun* SFrameAppRoleFun::mutable_approlefunlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAppRoleFun.AppRoleFunlist)
  return approlefunlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFun >*
SFrameAppRoleFun::mutable_approlefunlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAppRoleFun.AppRoleFunlist)
  return &approlefunlist_;
}
inline const ::ServerProtocol::SAppRoleFun& SFrameAppRoleFun::approlefunlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAppRoleFun.AppRoleFunlist)
  return approlefunlist_.Get(index);
}
inline ::ServerProtocol::SAppRoleFun* SFrameAppRoleFun::add_approlefunlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAppRoleFun.AppRoleFunlist)
  return approlefunlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAppRoleFun >&
SFrameAppRoleFun::approlefunlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAppRoleFun.AppRoleFunlist)
  return approlefunlist_;
}

// -------------------------------------------------------------------

// SAppRoleFun

// uint64 id = 1;
inline void SAppRoleFun::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleFun::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFun.id)
  return id_;
}
inline void SAppRoleFun::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFun.id)
}

// uint64 RoleId = 2;
inline void SAppRoleFun::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleFun::roleid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFun.RoleId)
  return roleid_;
}
inline void SAppRoleFun::set_roleid(::google::protobuf::uint64 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFun.RoleId)
}

// uint64 FunID = 3;
inline void SAppRoleFun::clear_funid() {
  funid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAppRoleFun::funid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFun.FunID)
  return funid_;
}
inline void SAppRoleFun::set_funid(::google::protobuf::uint64 value) {
  
  funid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFun.FunID)
}

// int32 Type = 4;
inline void SAppRoleFun::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SAppRoleFun::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFun.Type)
  return type_;
}
inline void SAppRoleFun::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFun.Type)
}

// int32 State = 5;
inline void SAppRoleFun::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAppRoleFun::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAppRoleFun.State)
  return state_;
}
inline void SAppRoleFun::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAppRoleFun.State)
}

// -------------------------------------------------------------------

// SFrameDeviceGroup

// repeated .ServerProtocol.SDeviceGroup DeviceGrouplist = 1;
inline int SFrameDeviceGroup::devicegrouplist_size() const {
  return devicegrouplist_.size();
}
inline void SFrameDeviceGroup::clear_devicegrouplist() {
  devicegrouplist_.Clear();
}
inline ::ServerProtocol::SDeviceGroup* SFrameDeviceGroup::mutable_devicegrouplist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceGroup.DeviceGrouplist)
  return devicegrouplist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceGroup >*
SFrameDeviceGroup::mutable_devicegrouplist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceGroup.DeviceGrouplist)
  return &devicegrouplist_;
}
inline const ::ServerProtocol::SDeviceGroup& SFrameDeviceGroup::devicegrouplist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceGroup.DeviceGrouplist)
  return devicegrouplist_.Get(index);
}
inline ::ServerProtocol::SDeviceGroup* SFrameDeviceGroup::add_devicegrouplist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceGroup.DeviceGrouplist)
  return devicegrouplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceGroup >&
SFrameDeviceGroup::devicegrouplist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceGroup.DeviceGrouplist)
  return devicegrouplist_;
}

// -------------------------------------------------------------------

// SDeviceGroup

// uint64 id = 1;
inline void SDeviceGroup::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceGroup::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceGroup.id)
  return id_;
}
inline void SDeviceGroup::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceGroup.id)
}

// uint64 MechID = 2;
inline void SDeviceGroup::clear_mechid() {
  mechid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceGroup::mechid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceGroup.MechID)
  return mechid_;
}
inline void SDeviceGroup::set_mechid(::google::protobuf::uint64 value) {
  
  mechid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceGroup.MechID)
}

// string name = 3;
inline void SDeviceGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceGroup::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceGroup.name)
  return name_.GetNoArena();
}
inline void SDeviceGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceGroup.name)
}
#if LANG_CXX11
inline void SDeviceGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceGroup.name)
}
#endif
inline void SDeviceGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceGroup.name)
}
inline void SDeviceGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceGroup.name)
}
inline ::std::string* SDeviceGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceGroup::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceGroup.name)
}

// -------------------------------------------------------------------

// SFrameAreabase

// repeated .ServerProtocol.SAreabaseinfo SAreabaseinfolist = 1;
inline int SFrameAreabase::sareabaseinfolist_size() const {
  return sareabaseinfolist_.size();
}
inline void SFrameAreabase::clear_sareabaseinfolist() {
  sareabaseinfolist_.Clear();
}
inline ::ServerProtocol::SAreabaseinfo* SFrameAreabase::mutable_sareabaseinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAreabase.SAreabaseinfolist)
  return sareabaseinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreabaseinfo >*
SFrameAreabase::mutable_sareabaseinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAreabase.SAreabaseinfolist)
  return &sareabaseinfolist_;
}
inline const ::ServerProtocol::SAreabaseinfo& SFrameAreabase::sareabaseinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAreabase.SAreabaseinfolist)
  return sareabaseinfolist_.Get(index);
}
inline ::ServerProtocol::SAreabaseinfo* SFrameAreabase::add_sareabaseinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAreabase.SAreabaseinfolist)
  return sareabaseinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreabaseinfo >&
SFrameAreabase::sareabaseinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAreabase.SAreabaseinfolist)
  return sareabaseinfolist_;
}

// -------------------------------------------------------------------

// SAreabaseinfo

// uint64 id = 1;
inline void SAreabaseinfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreabaseinfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.id)
  return id_;
}
inline void SAreabaseinfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.id)
}

// uint64 itemid = 2;
inline void SAreabaseinfo::clear_itemid() {
  itemid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreabaseinfo::itemid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.itemid)
  return itemid_;
}
inline void SAreabaseinfo::set_itemid(::google::protobuf::uint64 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.itemid)
}

// uint64 CreateUserID = 3;
inline void SAreabaseinfo::clear_createuserid() {
  createuserid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreabaseinfo::createuserid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.CreateUserID)
  return createuserid_;
}
inline void SAreabaseinfo::set_createuserid(::google::protobuf::uint64 value) {
  
  createuserid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.CreateUserID)
}

// string name = 4;
inline void SAreabaseinfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAreabaseinfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.name)
  return name_.GetNoArena();
}
inline void SAreabaseinfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.name)
}
#if LANG_CXX11
inline void SAreabaseinfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAreabaseinfo.name)
}
#endif
inline void SAreabaseinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAreabaseinfo.name)
}
inline void SAreabaseinfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAreabaseinfo.name)
}
inline ::std::string* SAreabaseinfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAreabaseinfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAreabaseinfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAreabaseinfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAreabaseinfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAreabaseinfo.name)
}

// int32 State = 5;
inline void SAreabaseinfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAreabaseinfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.State)
  return state_;
}
inline void SAreabaseinfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.State)
}

// int32 type = 6;
inline void SAreabaseinfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SAreabaseinfo::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.type)
  return type_;
}
inline void SAreabaseinfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.type)
}

// string remark = 7;
inline void SAreabaseinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAreabaseinfo::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreabaseinfo.remark)
  return remark_.GetNoArena();
}
inline void SAreabaseinfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreabaseinfo.remark)
}
#if LANG_CXX11
inline void SAreabaseinfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAreabaseinfo.remark)
}
#endif
inline void SAreabaseinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAreabaseinfo.remark)
}
inline void SAreabaseinfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAreabaseinfo.remark)
}
inline ::std::string* SAreabaseinfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAreabaseinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAreabaseinfo::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAreabaseinfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAreabaseinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAreabaseinfo.remark)
}

// -------------------------------------------------------------------

// SFrameAreaDevice

// repeated .ServerProtocol.SAreaDeviceinfo SAreaDeviceinfolist = 1;
inline int SFrameAreaDevice::sareadeviceinfolist_size() const {
  return sareadeviceinfolist_.size();
}
inline void SFrameAreaDevice::clear_sareadeviceinfolist() {
  sareadeviceinfolist_.Clear();
}
inline ::ServerProtocol::SAreaDeviceinfo* SFrameAreaDevice::mutable_sareadeviceinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAreaDevice.SAreaDeviceinfolist)
  return sareadeviceinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaDeviceinfo >*
SFrameAreaDevice::mutable_sareadeviceinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAreaDevice.SAreaDeviceinfolist)
  return &sareadeviceinfolist_;
}
inline const ::ServerProtocol::SAreaDeviceinfo& SFrameAreaDevice::sareadeviceinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAreaDevice.SAreaDeviceinfolist)
  return sareadeviceinfolist_.Get(index);
}
inline ::ServerProtocol::SAreaDeviceinfo* SFrameAreaDevice::add_sareadeviceinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAreaDevice.SAreaDeviceinfolist)
  return sareadeviceinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaDeviceinfo >&
SFrameAreaDevice::sareadeviceinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAreaDevice.SAreaDeviceinfolist)
  return sareadeviceinfolist_;
}

// -------------------------------------------------------------------

// SAreaDeviceinfo

// uint64 id = 1;
inline void SAreaDeviceinfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaDeviceinfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.id)
  return id_;
}
inline void SAreaDeviceinfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.id)
}

// uint64 deviceid = 2;
inline void SAreaDeviceinfo::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaDeviceinfo::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.deviceid)
  return deviceid_;
}
inline void SAreaDeviceinfo::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.deviceid)
}

// uint64 areaid = 3;
inline void SAreaDeviceinfo::clear_areaid() {
  areaid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaDeviceinfo::areaid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.areaid)
  return areaid_;
}
inline void SAreaDeviceinfo::set_areaid(::google::protobuf::uint64 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.areaid)
}

// int32 state = 4;
inline void SAreaDeviceinfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAreaDeviceinfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.state)
  return state_;
}
inline void SAreaDeviceinfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.state)
}

// int64 InstallTime = 5;
inline void SAreaDeviceinfo::clear_installtime() {
  installtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SAreaDeviceinfo::installtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.InstallTime)
  return installtime_;
}
inline void SAreaDeviceinfo::set_installtime(::google::protobuf::int64 value) {
  
  installtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.InstallTime)
}

// int32 Electricity = 6;
inline void SAreaDeviceinfo::clear_electricity() {
  electricity_ = 0;
}
inline ::google::protobuf::int32 SAreaDeviceinfo::electricity() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.Electricity)
  return electricity_;
}
inline void SAreaDeviceinfo::set_electricity(::google::protobuf::int32 value) {
  
  electricity_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.Electricity)
}

// string remark = 7;
inline void SAreaDeviceinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAreaDeviceinfo::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.remark)
  return remark_.GetNoArena();
}
inline void SAreaDeviceinfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.remark)
}
#if LANG_CXX11
inline void SAreaDeviceinfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAreaDeviceinfo.remark)
}
#endif
inline void SAreaDeviceinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAreaDeviceinfo.remark)
}
inline void SAreaDeviceinfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAreaDeviceinfo.remark)
}
inline ::std::string* SAreaDeviceinfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAreaDeviceinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAreaDeviceinfo::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAreaDeviceinfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAreaDeviceinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAreaDeviceinfo.remark)
}

// uint64 InstallUserID = 8;
inline void SAreaDeviceinfo::clear_installuserid() {
  installuserid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaDeviceinfo::installuserid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.InstallUserID)
  return installuserid_;
}
inline void SAreaDeviceinfo::set_installuserid(::google::protobuf::uint64 value) {
  
  installuserid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.InstallUserID)
}

// uint64 ManagerUserID = 9;
inline void SAreaDeviceinfo::clear_manageruserid() {
  manageruserid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaDeviceinfo::manageruserid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.ManagerUserID)
  return manageruserid_;
}
inline void SAreaDeviceinfo::set_manageruserid(::google::protobuf::uint64 value) {
  
  manageruserid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.ManagerUserID)
}

// string NickName = 10;
inline void SAreaDeviceinfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAreaDeviceinfo::nickname() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.NickName)
  return nickname_.GetNoArena();
}
inline void SAreaDeviceinfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.NickName)
}
#if LANG_CXX11
inline void SAreaDeviceinfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAreaDeviceinfo.NickName)
}
#endif
inline void SAreaDeviceinfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAreaDeviceinfo.NickName)
}
inline void SAreaDeviceinfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAreaDeviceinfo.NickName)
}
inline ::std::string* SAreaDeviceinfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAreaDeviceinfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAreaDeviceinfo::release_nickname() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAreaDeviceinfo.NickName)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAreaDeviceinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAreaDeviceinfo.NickName)
}

// int32 LockPush = 11;
inline void SAreaDeviceinfo::clear_lockpush() {
  lockpush_ = 0;
}
inline ::google::protobuf::int32 SAreaDeviceinfo::lockpush() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.LockPush)
  return lockpush_;
}
inline void SAreaDeviceinfo::set_lockpush(::google::protobuf::int32 value) {
  
  lockpush_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.LockPush)
}

// int32 AlarmPush = 12;
inline void SAreaDeviceinfo::clear_alarmpush() {
  alarmpush_ = 0;
}
inline ::google::protobuf::int32 SAreaDeviceinfo::alarmpush() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.AlarmPush)
  return alarmpush_;
}
inline void SAreaDeviceinfo::set_alarmpush(::google::protobuf::int32 value) {
  
  alarmpush_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.AlarmPush)
}

// int32 InstallUserType = 13;
inline void SAreaDeviceinfo::clear_installusertype() {
  installusertype_ = 0;
}
inline ::google::protobuf::int32 SAreaDeviceinfo::installusertype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaDeviceinfo.InstallUserType)
  return installusertype_;
}
inline void SAreaDeviceinfo::set_installusertype(::google::protobuf::int32 value) {
  
  installusertype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaDeviceinfo.InstallUserType)
}

// -------------------------------------------------------------------

// SFrameAreaUseRecord

// repeated .ServerProtocol.SAreaUseRecord SAreaUseRecordlist = 1;
inline int SFrameAreaUseRecord::sareauserecordlist_size() const {
  return sareauserecordlist_.size();
}
inline void SFrameAreaUseRecord::clear_sareauserecordlist() {
  sareauserecordlist_.Clear();
}
inline ::ServerProtocol::SAreaUseRecord* SFrameAreaUseRecord::mutable_sareauserecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameAreaUseRecord.SAreaUseRecordlist)
  return sareauserecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaUseRecord >*
SFrameAreaUseRecord::mutable_sareauserecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameAreaUseRecord.SAreaUseRecordlist)
  return &sareauserecordlist_;
}
inline const ::ServerProtocol::SAreaUseRecord& SFrameAreaUseRecord::sareauserecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameAreaUseRecord.SAreaUseRecordlist)
  return sareauserecordlist_.Get(index);
}
inline ::ServerProtocol::SAreaUseRecord* SFrameAreaUseRecord::add_sareauserecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameAreaUseRecord.SAreaUseRecordlist)
  return sareauserecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SAreaUseRecord >&
SFrameAreaUseRecord::sareauserecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameAreaUseRecord.SAreaUseRecordlist)
  return sareauserecordlist_;
}

// -------------------------------------------------------------------

// SAreaUseRecord

// uint64 id = 1;
inline void SAreaUseRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaUseRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.id)
  return id_;
}
inline void SAreaUseRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.id)
}

// uint64 AreaID = 2;
inline void SAreaUseRecord::clear_areaid() {
  areaid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaUseRecord::areaid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.AreaID)
  return areaid_;
}
inline void SAreaUseRecord::set_areaid(::google::protobuf::uint64 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.AreaID)
}

// int64 time = 3;
inline void SAreaUseRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SAreaUseRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.time)
  return time_;
}
inline void SAreaUseRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.time)
}

// int64 timestep = 4;
inline void SAreaUseRecord::clear_timestep() {
  timestep_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SAreaUseRecord::timestep() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.timestep)
  return timestep_;
}
inline void SAreaUseRecord::set_timestep(::google::protobuf::int64 value) {
  
  timestep_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.timestep)
}

// uint64 userID = 5;
inline void SAreaUseRecord::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SAreaUseRecord::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.userID)
  return userid_;
}
inline void SAreaUseRecord::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.userID)
}

// int32 state = 6;
inline void SAreaUseRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SAreaUseRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.state)
  return state_;
}
inline void SAreaUseRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.state)
}

// string remark = 7;
inline void SAreaUseRecord::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SAreaUseRecord::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SAreaUseRecord.remark)
  return remark_.GetNoArena();
}
inline void SAreaUseRecord::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SAreaUseRecord.remark)
}
#if LANG_CXX11
inline void SAreaUseRecord::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SAreaUseRecord.remark)
}
#endif
inline void SAreaUseRecord::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SAreaUseRecord.remark)
}
inline void SAreaUseRecord::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SAreaUseRecord.remark)
}
inline ::std::string* SAreaUseRecord::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SAreaUseRecord.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SAreaUseRecord::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SAreaUseRecord.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SAreaUseRecord::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SAreaUseRecord.remark)
}

// -------------------------------------------------------------------

// SFrameBuildPsw

// repeated .ServerProtocol.SBuildPsw SBuildPswlist = 1;
inline int SFrameBuildPsw::sbuildpswlist_size() const {
  return sbuildpswlist_.size();
}
inline void SFrameBuildPsw::clear_sbuildpswlist() {
  sbuildpswlist_.Clear();
}
inline ::ServerProtocol::SBuildPsw* SFrameBuildPsw::mutable_sbuildpswlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameBuildPsw.SBuildPswlist)
  return sbuildpswlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SBuildPsw >*
SFrameBuildPsw::mutable_sbuildpswlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameBuildPsw.SBuildPswlist)
  return &sbuildpswlist_;
}
inline const ::ServerProtocol::SBuildPsw& SFrameBuildPsw::sbuildpswlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameBuildPsw.SBuildPswlist)
  return sbuildpswlist_.Get(index);
}
inline ::ServerProtocol::SBuildPsw* SFrameBuildPsw::add_sbuildpswlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameBuildPsw.SBuildPswlist)
  return sbuildpswlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SBuildPsw >&
SFrameBuildPsw::sbuildpswlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameBuildPsw.SBuildPswlist)
  return sbuildpswlist_;
}

// -------------------------------------------------------------------

// SBuildPsw

// uint64 id = 1;
inline void SBuildPsw::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SBuildPsw::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SBuildPsw.id)
  return id_;
}
inline void SBuildPsw::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SBuildPsw.id)
}

// int64 time = 2;
inline void SBuildPsw::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SBuildPsw::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SBuildPsw.time)
  return time_;
}
inline void SBuildPsw::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SBuildPsw.time)
}

// uint64 deviceid = 3;
inline void SBuildPsw::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SBuildPsw::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SBuildPsw.deviceid)
  return deviceid_;
}
inline void SBuildPsw::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SBuildPsw.deviceid)
}

// uint64 userid = 4;
inline void SBuildPsw::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SBuildPsw::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SBuildPsw.userid)
  return userid_;
}
inline void SBuildPsw::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SBuildPsw.userid)
}

// int32 State = 5;
inline void SBuildPsw::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SBuildPsw::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SBuildPsw.State)
  return state_;
}
inline void SBuildPsw::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SBuildPsw.State)
}

// -------------------------------------------------------------------

// SFrameDeviceBase

// repeated .ServerProtocol.SDeviceBaseinfo SDeviceBaseinfolist = 1;
inline int SFrameDeviceBase::sdevicebaseinfolist_size() const {
  return sdevicebaseinfolist_.size();
}
inline void SFrameDeviceBase::clear_sdevicebaseinfolist() {
  sdevicebaseinfolist_.Clear();
}
inline ::ServerProtocol::SDeviceBaseinfo* SFrameDeviceBase::mutable_sdevicebaseinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDeviceBase.SDeviceBaseinfolist)
  return sdevicebaseinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceBaseinfo >*
SFrameDeviceBase::mutable_sdevicebaseinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDeviceBase.SDeviceBaseinfolist)
  return &sdevicebaseinfolist_;
}
inline const ::ServerProtocol::SDeviceBaseinfo& SFrameDeviceBase::sdevicebaseinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDeviceBase.SDeviceBaseinfolist)
  return sdevicebaseinfolist_.Get(index);
}
inline ::ServerProtocol::SDeviceBaseinfo* SFrameDeviceBase::add_sdevicebaseinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDeviceBase.SDeviceBaseinfolist)
  return sdevicebaseinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDeviceBaseinfo >&
SFrameDeviceBase::sdevicebaseinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDeviceBase.SDeviceBaseinfolist)
  return sdevicebaseinfolist_;
}

// -------------------------------------------------------------------

// SDeviceBaseinfo

// uint64 id = 1;
inline void SDeviceBaseinfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceBaseinfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.id)
  return id_;
}
inline void SDeviceBaseinfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.id)
}

// string name = 2;
inline void SDeviceBaseinfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.name)
  return name_.GetNoArena();
}
inline void SDeviceBaseinfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.name)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.name)
}
#endif
inline void SDeviceBaseinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.name)
}
inline void SDeviceBaseinfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.name)
}
inline ::std::string* SDeviceBaseinfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.name)
}

// string Mac = 3;
inline void SDeviceBaseinfo::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Mac)
  return mac_.GetNoArena();
}
inline void SDeviceBaseinfo::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Mac)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.Mac)
}
#endif
inline void SDeviceBaseinfo::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.Mac)
}
inline void SDeviceBaseinfo::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.Mac)
}
inline ::std::string* SDeviceBaseinfo::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.Mac)
}

// int32 Type = 4;
inline void SDeviceBaseinfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Type)
  return type_;
}
inline void SDeviceBaseinfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Type)
}

// int64 time = 5;
inline void SDeviceBaseinfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SDeviceBaseinfo::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.time)
  return time_;
}
inline void SDeviceBaseinfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.time)
}

// int32 key = 6;
inline void SDeviceBaseinfo::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::key() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.key)
  return key_;
}
inline void SDeviceBaseinfo::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.key)
}

// int32 Curkey = 7;
inline void SDeviceBaseinfo::clear_curkey() {
  curkey_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::curkey() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Curkey)
  return curkey_;
}
inline void SDeviceBaseinfo::set_curkey(::google::protobuf::int32 value) {
  
  curkey_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Curkey)
}

// string Electronickey = 8;
inline void SDeviceBaseinfo::clear_electronickey() {
  electronickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::electronickey() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Electronickey)
  return electronickey_.GetNoArena();
}
inline void SDeviceBaseinfo::set_electronickey(const ::std::string& value) {
  
  electronickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Electronickey)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_electronickey(::std::string&& value) {
  
  electronickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.Electronickey)
}
#endif
inline void SDeviceBaseinfo::set_electronickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  electronickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.Electronickey)
}
inline void SDeviceBaseinfo::set_electronickey(const char* value, size_t size) {
  
  electronickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.Electronickey)
}
inline ::std::string* SDeviceBaseinfo::mutable_electronickey() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.Electronickey)
  return electronickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_electronickey() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.Electronickey)
  
  return electronickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_electronickey(::std::string* electronickey) {
  if (electronickey != NULL) {
    
  } else {
    
  }
  electronickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), electronickey);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.Electronickey)
}

// int32 state = 9;
inline void SDeviceBaseinfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.state)
  return state_;
}
inline void SDeviceBaseinfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.state)
}

// bytes DevModel = 10;
inline void SDeviceBaseinfo::clear_devmodel() {
  devmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::devmodel() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.DevModel)
  return devmodel_.GetNoArena();
}
inline void SDeviceBaseinfo::set_devmodel(const ::std::string& value) {
  
  devmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.DevModel)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_devmodel(::std::string&& value) {
  
  devmodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.DevModel)
}
#endif
inline void SDeviceBaseinfo::set_devmodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.DevModel)
}
inline void SDeviceBaseinfo::set_devmodel(const void* value, size_t size) {
  
  devmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.DevModel)
}
inline ::std::string* SDeviceBaseinfo::mutable_devmodel() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.DevModel)
  return devmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_devmodel() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.DevModel)
  
  return devmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_devmodel(::std::string* devmodel) {
  if (devmodel != NULL) {
    
  } else {
    
  }
  devmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devmodel);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.DevModel)
}

// int32 FwVer = 11;
inline void SDeviceBaseinfo::clear_fwver() {
  fwver_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::fwver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.FwVer)
  return fwver_;
}
inline void SDeviceBaseinfo::set_fwver(::google::protobuf::int32 value) {
  
  fwver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.FwVer)
}

// int32 Hwver = 12;
inline void SDeviceBaseinfo::clear_hwver() {
  hwver_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::hwver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Hwver)
  return hwver_;
}
inline void SDeviceBaseinfo::set_hwver(::google::protobuf::int32 value) {
  
  hwver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Hwver)
}

// int32 SysVer = 13;
inline void SDeviceBaseinfo::clear_sysver() {
  sysver_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::sysver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.SysVer)
  return sysver_;
}
inline void SDeviceBaseinfo::set_sysver(::google::protobuf::int32 value) {
  
  sysver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.SysVer)
}

// int32 OtherVer = 14;
inline void SDeviceBaseinfo::clear_otherver() {
  otherver_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::otherver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.OtherVer)
  return otherver_;
}
inline void SDeviceBaseinfo::set_otherver(::google::protobuf::int32 value) {
  
  otherver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.OtherVer)
}

// int32 Tvoice = 15;
inline void SDeviceBaseinfo::clear_tvoice() {
  tvoice_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::tvoice() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Tvoice)
  return tvoice_;
}
inline void SDeviceBaseinfo::set_tvoice(::google::protobuf::int32 value) {
  
  tvoice_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Tvoice)
}

// int32 Temperature = 16;
inline void SDeviceBaseinfo::clear_temperature() {
  temperature_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::temperature() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Temperature)
  return temperature_;
}
inline void SDeviceBaseinfo::set_temperature(::google::protobuf::int32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Temperature)
}

// int32 Tvoltage = 17;
inline void SDeviceBaseinfo::clear_tvoltage() {
  tvoltage_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::tvoltage() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Tvoltage)
  return tvoltage_;
}
inline void SDeviceBaseinfo::set_tvoltage(::google::protobuf::int32 value) {
  
  tvoltage_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Tvoltage)
}

// int64 CurTime = 18;
inline void SDeviceBaseinfo::clear_curtime() {
  curtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SDeviceBaseinfo::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.CurTime)
  return curtime_;
}
inline void SDeviceBaseinfo::set_curtime(::google::protobuf::int64 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.CurTime)
}

// bytes Message = 19;
inline void SDeviceBaseinfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::message() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Message)
  return message_.GetNoArena();
}
inline void SDeviceBaseinfo::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Message)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.Message)
}
#endif
inline void SDeviceBaseinfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.Message)
}
inline void SDeviceBaseinfo::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.Message)
}
inline ::std::string* SDeviceBaseinfo::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_message() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.Message)
}

// string remark = 20;
inline void SDeviceBaseinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.remark)
  return remark_.GetNoArena();
}
inline void SDeviceBaseinfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.remark)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.remark)
}
#endif
inline void SDeviceBaseinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.remark)
}
inline void SDeviceBaseinfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.remark)
}
inline ::std::string* SDeviceBaseinfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.remark)
}

// string NBDeviceID = 21;
inline void SDeviceBaseinfo::clear_nbdeviceid() {
  nbdeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::nbdeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
  return nbdeviceid_.GetNoArena();
}
inline void SDeviceBaseinfo::set_nbdeviceid(const ::std::string& value) {
  
  nbdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_nbdeviceid(::std::string&& value) {
  
  nbdeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
}
#endif
inline void SDeviceBaseinfo::set_nbdeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nbdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
}
inline void SDeviceBaseinfo::set_nbdeviceid(const char* value, size_t size) {
  
  nbdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
}
inline ::std::string* SDeviceBaseinfo::mutable_nbdeviceid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
  return nbdeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_nbdeviceid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
  
  return nbdeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_nbdeviceid(::std::string* nbdeviceid) {
  if (nbdeviceid != NULL) {
    
  } else {
    
  }
  nbdeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nbdeviceid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.NBDeviceID)
}

// int32 IdentyCodeKey = 22;
inline void SDeviceBaseinfo::clear_identycodekey() {
  identycodekey_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::identycodekey() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.IdentyCodeKey)
  return identycodekey_;
}
inline void SDeviceBaseinfo::set_identycodekey(::google::protobuf::int32 value) {
  
  identycodekey_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.IdentyCodeKey)
}

// uint64 IdentyCode = 23;
inline void SDeviceBaseinfo::clear_identycode() {
  identycode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDeviceBaseinfo::identycode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.IdentyCode)
  return identycode_;
}
inline void SDeviceBaseinfo::set_identycode(::google::protobuf::uint64 value) {
  
  identycode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.IdentyCode)
}

// string Imei = 24;
inline void SDeviceBaseinfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDeviceBaseinfo::imei() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.Imei)
  return imei_.GetNoArena();
}
inline void SDeviceBaseinfo::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.Imei)
}
#if LANG_CXX11
inline void SDeviceBaseinfo::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SDeviceBaseinfo.Imei)
}
#endif
inline void SDeviceBaseinfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SDeviceBaseinfo.Imei)
}
inline void SDeviceBaseinfo::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SDeviceBaseinfo.Imei)
}
inline ::std::string* SDeviceBaseinfo::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SDeviceBaseinfo.Imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDeviceBaseinfo::release_imei() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SDeviceBaseinfo.Imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDeviceBaseinfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SDeviceBaseinfo.Imei)
}

// int32 DeviceCrc = 25;
inline void SDeviceBaseinfo::clear_devicecrc() {
  devicecrc_ = 0;
}
inline ::google::protobuf::int32 SDeviceBaseinfo::devicecrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDeviceBaseinfo.DeviceCrc)
  return devicecrc_;
}
inline void SDeviceBaseinfo::set_devicecrc(::google::protobuf::int32 value) {
  
  devicecrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDeviceBaseinfo.DeviceCrc)
}

// -------------------------------------------------------------------

// SFrameDevicePassword

// repeated .ServerProtocol.SDevicePassword SDevicePasswordlist = 1;
inline int SFrameDevicePassword::sdevicepasswordlist_size() const {
  return sdevicepasswordlist_.size();
}
inline void SFrameDevicePassword::clear_sdevicepasswordlist() {
  sdevicepasswordlist_.Clear();
}
inline ::ServerProtocol::SDevicePassword* SFrameDevicePassword::mutable_sdevicepasswordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFrameDevicePassword.SDevicePasswordlist)
  return sdevicepasswordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevicePassword >*
SFrameDevicePassword::mutable_sdevicepasswordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFrameDevicePassword.SDevicePasswordlist)
  return &sdevicepasswordlist_;
}
inline const ::ServerProtocol::SDevicePassword& SFrameDevicePassword::sdevicepasswordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFrameDevicePassword.SDevicePasswordlist)
  return sdevicepasswordlist_.Get(index);
}
inline ::ServerProtocol::SDevicePassword* SFrameDevicePassword::add_sdevicepasswordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFrameDevicePassword.SDevicePasswordlist)
  return sdevicepasswordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SDevicePassword >&
SFrameDevicePassword::sdevicepasswordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFrameDevicePassword.SDevicePasswordlist)
  return sdevicepasswordlist_;
}

// -------------------------------------------------------------------

// SDevicePassword

// uint64 id = 1;
inline void SDevicePassword::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDevicePassword::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.id)
  return id_;
}
inline void SDevicePassword::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.id)
}

// int32 psw = 2;
inline void SDevicePassword::clear_psw() {
  psw_ = 0;
}
inline ::google::protobuf::int32 SDevicePassword::psw() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.psw)
  return psw_;
}
inline void SDevicePassword::set_psw(::google::protobuf::int32 value) {
  
  psw_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.psw)
}

// uint64 bid = 3;
inline void SDevicePassword::clear_bid() {
  bid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SDevicePassword::bid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.bid)
  return bid_;
}
inline void SDevicePassword::set_bid(::google::protobuf::uint64 value) {
  
  bid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.bid)
}

// int32 state = 4;
inline void SDevicePassword::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SDevicePassword::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.state)
  return state_;
}
inline void SDevicePassword::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.state)
}

// int64 Starttime = 5;
inline void SDevicePassword::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SDevicePassword::starttime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.Starttime)
  return starttime_;
}
inline void SDevicePassword::set_starttime(::google::protobuf::int64 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.Starttime)
}

// int64 timestep = 6;
inline void SDevicePassword::clear_timestep() {
  timestep_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SDevicePassword::timestep() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SDevicePassword.timestep)
  return timestep_;
}
inline void SDevicePassword::set_timestep(::google::protobuf::int64 value) {
  
  timestep_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SDevicePassword.timestep)
}

// -------------------------------------------------------------------

// SFramEleSendRecord

// repeated .ServerProtocol.SEleSendRecord SEleSendRecordlist = 1;
inline int SFramEleSendRecord::selesendrecordlist_size() const {
  return selesendrecordlist_.size();
}
inline void SFramEleSendRecord::clear_selesendrecordlist() {
  selesendrecordlist_.Clear();
}
inline ::ServerProtocol::SEleSendRecord* SFramEleSendRecord::mutable_selesendrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramEleSendRecord.SEleSendRecordlist)
  return selesendrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SEleSendRecord >*
SFramEleSendRecord::mutable_selesendrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramEleSendRecord.SEleSendRecordlist)
  return &selesendrecordlist_;
}
inline const ::ServerProtocol::SEleSendRecord& SFramEleSendRecord::selesendrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramEleSendRecord.SEleSendRecordlist)
  return selesendrecordlist_.Get(index);
}
inline ::ServerProtocol::SEleSendRecord* SFramEleSendRecord::add_selesendrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramEleSendRecord.SEleSendRecordlist)
  return selesendrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SEleSendRecord >&
SFramEleSendRecord::selesendrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramEleSendRecord.SEleSendRecordlist)
  return selesendrecordlist_;
}

// -------------------------------------------------------------------

// SEleSendRecord

// uint64 id = 1;
inline void SEleSendRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SEleSendRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.id)
  return id_;
}
inline void SEleSendRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.id)
}

// uint64 DeviceID = 2;
inline void SEleSendRecord::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SEleSendRecord::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.DeviceID)
  return deviceid_;
}
inline void SEleSendRecord::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.DeviceID)
}

// int64 time = 3;
inline void SEleSendRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SEleSendRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.time)
  return time_;
}
inline void SEleSendRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.time)
}

// uint64 UserID = 4;
inline void SEleSendRecord::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SEleSendRecord::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.UserID)
  return userid_;
}
inline void SEleSendRecord::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.UserID)
}

// int32 State = 5;
inline void SEleSendRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SEleSendRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.State)
  return state_;
}
inline void SEleSendRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.State)
}

// int64 StateTime = 6;
inline void SEleSendRecord::clear_statetime() {
  statetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SEleSendRecord::statetime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.StateTime)
  return statetime_;
}
inline void SEleSendRecord::set_statetime(::google::protobuf::int64 value) {
  
  statetime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.StateTime)
}

// int64 EndTime = 7;
inline void SEleSendRecord::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SEleSendRecord::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.EndTime)
  return endtime_;
}
inline void SEleSendRecord::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.EndTime)
}

// uint64 SRoleId = 8;
inline void SEleSendRecord::clear_sroleid() {
  sroleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SEleSendRecord::sroleid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SEleSendRecord.SRoleId)
  return sroleid_;
}
inline void SEleSendRecord::set_sroleid(::google::protobuf::uint64 value) {
  
  sroleid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SEleSendRecord.SRoleId)
}

// -------------------------------------------------------------------

// SFramMechanism

// repeated .ServerProtocol.SMechanism SMechanismlist = 1;
inline int SFramMechanism::smechanismlist_size() const {
  return smechanismlist_.size();
}
inline void SFramMechanism::clear_smechanismlist() {
  smechanismlist_.Clear();
}
inline ::ServerProtocol::SMechanism* SFramMechanism::mutable_smechanismlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramMechanism.SMechanismlist)
  return smechanismlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SMechanism >*
SFramMechanism::mutable_smechanismlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramMechanism.SMechanismlist)
  return &smechanismlist_;
}
inline const ::ServerProtocol::SMechanism& SFramMechanism::smechanismlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramMechanism.SMechanismlist)
  return smechanismlist_.Get(index);
}
inline ::ServerProtocol::SMechanism* SFramMechanism::add_smechanismlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramMechanism.SMechanismlist)
  return smechanismlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SMechanism >&
SFramMechanism::smechanismlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramMechanism.SMechanismlist)
  return smechanismlist_;
}

// -------------------------------------------------------------------

// SMechanism

// uint64 id = 1;
inline void SMechanism::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SMechanism::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.id)
  return id_;
}
inline void SMechanism::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.id)
}

// int32 Number = 2;
inline void SMechanism::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 SMechanism::number() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.Number)
  return number_;
}
inline void SMechanism::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.Number)
}

// string name = 3;
inline void SMechanism::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.name)
  return name_.GetNoArena();
}
inline void SMechanism::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.name)
}
#if LANG_CXX11
inline void SMechanism::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.name)
}
#endif
inline void SMechanism::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.name)
}
inline void SMechanism::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.name)
}
inline ::std::string* SMechanism::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.name)
}

// uint64 fmech = 4;
inline void SMechanism::clear_fmech() {
  fmech_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SMechanism::fmech() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.fmech)
  return fmech_;
}
inline void SMechanism::set_fmech(::google::protobuf::uint64 value) {
  
  fmech_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.fmech)
}

// int32 lvl = 5;
inline void SMechanism::clear_lvl() {
  lvl_ = 0;
}
inline ::google::protobuf::int32 SMechanism::lvl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.lvl)
  return lvl_;
}
inline void SMechanism::set_lvl(::google::protobuf::int32 value) {
  
  lvl_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.lvl)
}

// int32 type = 6;
inline void SMechanism::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SMechanism::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.type)
  return type_;
}
inline void SMechanism::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.type)
}

// int32 State = 7;
inline void SMechanism::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SMechanism::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.State)
  return state_;
}
inline void SMechanism::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.State)
}

// int32 config = 8;
inline void SMechanism::clear_config() {
  config_ = 0;
}
inline ::google::protobuf::int32 SMechanism::config() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.config)
  return config_;
}
inline void SMechanism::set_config(::google::protobuf::int32 value) {
  
  config_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.config)
}

// string userName = 9;
inline void SMechanism::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::username() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.userName)
  return username_.GetNoArena();
}
inline void SMechanism::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.userName)
}
#if LANG_CXX11
inline void SMechanism::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.userName)
}
#endif
inline void SMechanism::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.userName)
}
inline void SMechanism::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.userName)
}
inline ::std::string* SMechanism::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_username() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.userName)
}

// string phone = 10;
inline void SMechanism::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.phone)
  return phone_.GetNoArena();
}
inline void SMechanism::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.phone)
}
#if LANG_CXX11
inline void SMechanism::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.phone)
}
#endif
inline void SMechanism::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.phone)
}
inline void SMechanism::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.phone)
}
inline ::std::string* SMechanism::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.phone)
}

// string address = 11;
inline void SMechanism::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::address() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.address)
  return address_.GetNoArena();
}
inline void SMechanism::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.address)
}
#if LANG_CXX11
inline void SMechanism::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.address)
}
#endif
inline void SMechanism::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.address)
}
inline void SMechanism::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.address)
}
inline ::std::string* SMechanism::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_address() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.address)
}

// string remark = 12;
inline void SMechanism::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.remark)
  return remark_.GetNoArena();
}
inline void SMechanism::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.remark)
}
#if LANG_CXX11
inline void SMechanism::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.remark)
}
#endif
inline void SMechanism::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.remark)
}
inline void SMechanism::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.remark)
}
inline ::std::string* SMechanism::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.remark)
}

// string PictureUrl = 13;
inline void SMechanism::clear_pictureurl() {
  pictureurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::pictureurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.PictureUrl)
  return pictureurl_.GetNoArena();
}
inline void SMechanism::set_pictureurl(const ::std::string& value) {
  
  pictureurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.PictureUrl)
}
#if LANG_CXX11
inline void SMechanism::set_pictureurl(::std::string&& value) {
  
  pictureurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.PictureUrl)
}
#endif
inline void SMechanism::set_pictureurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pictureurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.PictureUrl)
}
inline void SMechanism::set_pictureurl(const char* value, size_t size) {
  
  pictureurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.PictureUrl)
}
inline ::std::string* SMechanism::mutable_pictureurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.PictureUrl)
  return pictureurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_pictureurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.PictureUrl)
  
  return pictureurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_pictureurl(::std::string* pictureurl) {
  if (pictureurl != NULL) {
    
  } else {
    
  }
  pictureurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pictureurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.PictureUrl)
}

// string CallUrl = 14;
inline void SMechanism::clear_callurl() {
  callurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMechanism::callurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SMechanism.CallUrl)
  return callurl_.GetNoArena();
}
inline void SMechanism::set_callurl(const ::std::string& value) {
  
  callurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SMechanism.CallUrl)
}
#if LANG_CXX11
inline void SMechanism::set_callurl(::std::string&& value) {
  
  callurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SMechanism.CallUrl)
}
#endif
inline void SMechanism::set_callurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SMechanism.CallUrl)
}
inline void SMechanism::set_callurl(const char* value, size_t size) {
  
  callurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SMechanism.CallUrl)
}
inline ::std::string* SMechanism::mutable_callurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SMechanism.CallUrl)
  return callurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMechanism::release_callurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SMechanism.CallUrl)
  
  return callurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMechanism::set_allocated_callurl(::std::string* callurl) {
  if (callurl != NULL) {
    
  } else {
    
  }
  callurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SMechanism.CallUrl)
}

// -------------------------------------------------------------------

// SFramPswKeyRecord

// repeated .ServerProtocol.SPswKeyRecord SPswKeyRecordlist = 1;
inline int SFramPswKeyRecord::spswkeyrecordlist_size() const {
  return spswkeyrecordlist_.size();
}
inline void SFramPswKeyRecord::clear_spswkeyrecordlist() {
  spswkeyrecordlist_.Clear();
}
inline ::ServerProtocol::SPswKeyRecord* SFramPswKeyRecord::mutable_spswkeyrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramPswKeyRecord.SPswKeyRecordlist)
  return spswkeyrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswKeyRecord >*
SFramPswKeyRecord::mutable_spswkeyrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramPswKeyRecord.SPswKeyRecordlist)
  return &spswkeyrecordlist_;
}
inline const ::ServerProtocol::SPswKeyRecord& SFramPswKeyRecord::spswkeyrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramPswKeyRecord.SPswKeyRecordlist)
  return spswkeyrecordlist_.Get(index);
}
inline ::ServerProtocol::SPswKeyRecord* SFramPswKeyRecord::add_spswkeyrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramPswKeyRecord.SPswKeyRecordlist)
  return spswkeyrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswKeyRecord >&
SFramPswKeyRecord::spswkeyrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramPswKeyRecord.SPswKeyRecordlist)
  return spswkeyrecordlist_;
}

// -------------------------------------------------------------------

// SPswKeyRecord

// uint64 id = 1;
inline void SPswKeyRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswKeyRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswKeyRecord.id)
  return id_;
}
inline void SPswKeyRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswKeyRecord.id)
}

// uint64 userid = 2;
inline void SPswKeyRecord::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswKeyRecord::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswKeyRecord.userid)
  return userid_;
}
inline void SPswKeyRecord::set_userid(::google::protobuf::uint64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswKeyRecord.userid)
}

// int64 time = 3;
inline void SPswKeyRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SPswKeyRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswKeyRecord.time)
  return time_;
}
inline void SPswKeyRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswKeyRecord.time)
}

// uint64 deviceID = 4;
inline void SPswKeyRecord::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswKeyRecord::deviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswKeyRecord.deviceID)
  return deviceid_;
}
inline void SPswKeyRecord::set_deviceid(::google::protobuf::uint64 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswKeyRecord.deviceID)
}

// -------------------------------------------------------------------

// SFramPswSendRecord

// repeated .ServerProtocol.SPswSendRecord SPswSendRecordlist = 1;
inline int SFramPswSendRecord::spswsendrecordlist_size() const {
  return spswsendrecordlist_.size();
}
inline void SFramPswSendRecord::clear_spswsendrecordlist() {
  spswsendrecordlist_.Clear();
}
inline ::ServerProtocol::SPswSendRecord* SFramPswSendRecord::mutable_spswsendrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramPswSendRecord.SPswSendRecordlist)
  return spswsendrecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswSendRecord >*
SFramPswSendRecord::mutable_spswsendrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramPswSendRecord.SPswSendRecordlist)
  return &spswsendrecordlist_;
}
inline const ::ServerProtocol::SPswSendRecord& SFramPswSendRecord::spswsendrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramPswSendRecord.SPswSendRecordlist)
  return spswsendrecordlist_.Get(index);
}
inline ::ServerProtocol::SPswSendRecord* SFramPswSendRecord::add_spswsendrecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramPswSendRecord.SPswSendRecordlist)
  return spswsendrecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SPswSendRecord >&
SFramPswSendRecord::spswsendrecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramPswSendRecord.SPswSendRecordlist)
  return spswsendrecordlist_;
}

// -------------------------------------------------------------------

// SPswSendRecord

// uint64 id = 1;
inline void SPswSendRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswSendRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.id)
  return id_;
}
inline void SPswSendRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.id)
}

// uint64 pswID = 2;
inline void SPswSendRecord::clear_pswid() {
  pswid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswSendRecord::pswid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.pswID)
  return pswid_;
}
inline void SPswSendRecord::set_pswid(::google::protobuf::uint64 value) {
  
  pswid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.pswID)
}

// int64 time = 3;
inline void SPswSendRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SPswSendRecord::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.time)
  return time_;
}
inline void SPswSendRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.time)
}

// int32 State = 4;
inline void SPswSendRecord::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SPswSendRecord::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.State)
  return state_;
}
inline void SPswSendRecord::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.State)
}

// string phone = 5;
inline void SPswSendRecord::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SPswSendRecord::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.phone)
  return phone_.GetNoArena();
}
inline void SPswSendRecord::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.phone)
}
#if LANG_CXX11
inline void SPswSendRecord::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SPswSendRecord.phone)
}
#endif
inline void SPswSendRecord::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SPswSendRecord.phone)
}
inline void SPswSendRecord::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SPswSendRecord.phone)
}
inline ::std::string* SPswSendRecord::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SPswSendRecord.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SPswSendRecord::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SPswSendRecord.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SPswSendRecord::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SPswSendRecord.phone)
}

// uint64 SRoleId = 6;
inline void SPswSendRecord::clear_sroleid() {
  sroleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SPswSendRecord::sroleid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SPswSendRecord.SRoleId)
  return sroleid_;
}
inline void SPswSendRecord::set_sroleid(::google::protobuf::uint64 value) {
  
  sroleid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SPswSendRecord.SRoleId)
}

// -------------------------------------------------------------------

// SFramRoleinfo

// repeated .ServerProtocol.SRoleinfo SRoleinfolist = 1;
inline int SFramRoleinfo::sroleinfolist_size() const {
  return sroleinfolist_.size();
}
inline void SFramRoleinfo::clear_sroleinfolist() {
  sroleinfolist_.Clear();
}
inline ::ServerProtocol::SRoleinfo* SFramRoleinfo::mutable_sroleinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramRoleinfo.SRoleinfolist)
  return sroleinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleinfo >*
SFramRoleinfo::mutable_sroleinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramRoleinfo.SRoleinfolist)
  return &sroleinfolist_;
}
inline const ::ServerProtocol::SRoleinfo& SFramRoleinfo::sroleinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramRoleinfo.SRoleinfolist)
  return sroleinfolist_.Get(index);
}
inline ::ServerProtocol::SRoleinfo* SFramRoleinfo::add_sroleinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramRoleinfo.SRoleinfolist)
  return sroleinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleinfo >&
SFramRoleinfo::sroleinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramRoleinfo.SRoleinfolist)
  return sroleinfolist_;
}

// -------------------------------------------------------------------

// SRoleinfo

// uint64 id = 1;
inline void SRoleinfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleinfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.id)
  return id_;
}
inline void SRoleinfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.id)
}

// string Name = 2;
inline void SRoleinfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.Name)
  return name_.GetNoArena();
}
inline void SRoleinfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.Name)
}
#if LANG_CXX11
inline void SRoleinfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.Name)
}
#endif
inline void SRoleinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.Name)
}
inline void SRoleinfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.Name)
}
inline ::std::string* SRoleinfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.Name)
}

// string CardID = 3;
inline void SRoleinfo::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::cardid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.CardID)
  return cardid_.GetNoArena();
}
inline void SRoleinfo::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.CardID)
}
#if LANG_CXX11
inline void SRoleinfo::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.CardID)
}
#endif
inline void SRoleinfo::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.CardID)
}
inline void SRoleinfo::set_cardid(const char* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.CardID)
}
inline ::std::string* SRoleinfo::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.CardID)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_cardid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.CardID)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.CardID)
}

// string phone = 4;
inline void SRoleinfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.phone)
  return phone_.GetNoArena();
}
inline void SRoleinfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.phone)
}
#if LANG_CXX11
inline void SRoleinfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.phone)
}
#endif
inline void SRoleinfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.phone)
}
inline void SRoleinfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.phone)
}
inline ::std::string* SRoleinfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.phone)
}

// int32 sex = 5;
inline void SRoleinfo::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 SRoleinfo::sex() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.sex)
  return sex_;
}
inline void SRoleinfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.sex)
}

// int32 Birthday = 7;
inline void SRoleinfo::clear_birthday() {
  birthday_ = 0;
}
inline ::google::protobuf::int32 SRoleinfo::birthday() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.Birthday)
  return birthday_;
}
inline void SRoleinfo::set_birthday(::google::protobuf::int32 value) {
  
  birthday_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.Birthday)
}

// int64 LoginTime = 8;
inline void SRoleinfo::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SRoleinfo::logintime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.LoginTime)
  return logintime_;
}
inline void SRoleinfo::set_logintime(::google::protobuf::int64 value) {
  
  logintime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.LoginTime)
}

// int64 Regtime = 9;
inline void SRoleinfo::clear_regtime() {
  regtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SRoleinfo::regtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.Regtime)
  return regtime_;
}
inline void SRoleinfo::set_regtime(::google::protobuf::int64 value) {
  
  regtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.Regtime)
}

// uint64 CreateUserID = 10;
inline void SRoleinfo::clear_createuserid() {
  createuserid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleinfo::createuserid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.CreateUserID)
  return createuserid_;
}
inline void SRoleinfo::set_createuserid(::google::protobuf::uint64 value) {
  
  createuserid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.CreateUserID)
}

// int32 state = 11;
inline void SRoleinfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SRoleinfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.state)
  return state_;
}
inline void SRoleinfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.state)
}

// string pwd = 12;
inline void SRoleinfo::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::pwd() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.pwd)
  return pwd_.GetNoArena();
}
inline void SRoleinfo::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.pwd)
}
#if LANG_CXX11
inline void SRoleinfo::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.pwd)
}
#endif
inline void SRoleinfo::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.pwd)
}
inline void SRoleinfo::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.pwd)
}
inline ::std::string* SRoleinfo::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_pwd() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.pwd)
}

// uint64 CountryCode = 13;
inline void SRoleinfo::clear_countrycode() {
  countrycode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleinfo::countrycode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.CountryCode)
  return countrycode_;
}
inline void SRoleinfo::set_countrycode(::google::protobuf::uint64 value) {
  
  countrycode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.CountryCode)
}

// string RegisTration = 14;
inline void SRoleinfo::clear_registration() {
  registration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::registration() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.RegisTration)
  return registration_.GetNoArena();
}
inline void SRoleinfo::set_registration(const ::std::string& value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.RegisTration)
}
#if LANG_CXX11
inline void SRoleinfo::set_registration(::std::string&& value) {
  
  registration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.RegisTration)
}
#endif
inline void SRoleinfo::set_registration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.RegisTration)
}
inline void SRoleinfo::set_registration(const char* value, size_t size) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.RegisTration)
}
inline ::std::string* SRoleinfo::mutable_registration() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.RegisTration)
  return registration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_registration() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.RegisTration)
  
  return registration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_registration(::std::string* registration) {
  if (registration != NULL) {
    
  } else {
    
  }
  registration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.RegisTration)
}

// string Email = 15;
inline void SRoleinfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::email() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.Email)
  return email_.GetNoArena();
}
inline void SRoleinfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.Email)
}
#if LANG_CXX11
inline void SRoleinfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.Email)
}
#endif
inline void SRoleinfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.Email)
}
inline void SRoleinfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.Email)
}
inline ::std::string* SRoleinfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_email() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.Email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.Email)
}

// string remark = 16;
inline void SRoleinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleinfo::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.remark)
  return remark_.GetNoArena();
}
inline void SRoleinfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.remark)
}
#if LANG_CXX11
inline void SRoleinfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleinfo.remark)
}
#endif
inline void SRoleinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleinfo.remark)
}
inline void SRoleinfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleinfo.remark)
}
inline ::std::string* SRoleinfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleinfo::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleinfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleinfo.remark)
}

// uint64 Identycode = 17;
inline void SRoleinfo::clear_identycode() {
  identycode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleinfo::identycode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.Identycode)
  return identycode_;
}
inline void SRoleinfo::set_identycode(::google::protobuf::uint64 value) {
  
  identycode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.Identycode)
}

// int32 AppType = 18;
inline void SRoleinfo::clear_apptype() {
  apptype_ = 0;
}
inline ::google::protobuf::int32 SRoleinfo::apptype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleinfo.AppType)
  return apptype_;
}
inline void SRoleinfo::set_apptype(::google::protobuf::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleinfo.AppType)
}

// -------------------------------------------------------------------

// SFramRoleType

// repeated .ServerProtocol.SRoleType SRoleTypelist = 1;
inline int SFramRoleType::sroletypelist_size() const {
  return sroletypelist_.size();
}
inline void SFramRoleType::clear_sroletypelist() {
  sroletypelist_.Clear();
}
inline ::ServerProtocol::SRoleType* SFramRoleType::mutable_sroletypelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramRoleType.SRoleTypelist)
  return sroletypelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleType >*
SFramRoleType::mutable_sroletypelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramRoleType.SRoleTypelist)
  return &sroletypelist_;
}
inline const ::ServerProtocol::SRoleType& SFramRoleType::sroletypelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramRoleType.SRoleTypelist)
  return sroletypelist_.Get(index);
}
inline ::ServerProtocol::SRoleType* SFramRoleType::add_sroletypelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramRoleType.SRoleTypelist)
  return sroletypelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SRoleType >&
SFramRoleType::sroletypelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramRoleType.SRoleTypelist)
  return sroletypelist_;
}

// -------------------------------------------------------------------

// SRoleType

// uint64 id = 1;
inline void SRoleType::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleType::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleType.id)
  return id_;
}
inline void SRoleType::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleType.id)
}

// string Name = 2;
inline void SRoleType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SRoleType::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleType.Name)
  return name_.GetNoArena();
}
inline void SRoleType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleType.Name)
}
#if LANG_CXX11
inline void SRoleType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SRoleType.Name)
}
#endif
inline void SRoleType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SRoleType.Name)
}
inline void SRoleType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SRoleType.Name)
}
inline ::std::string* SRoleType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SRoleType.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SRoleType::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SRoleType.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SRoleType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SRoleType.Name)
}

// uint64 authority = 3;
inline void SRoleType::clear_authority() {
  authority_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SRoleType::authority() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleType.authority)
  return authority_;
}
inline void SRoleType::set_authority(::google::protobuf::uint64 value) {
  
  authority_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleType.authority)
}

// int32 state = 4;
inline void SRoleType::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SRoleType::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleType.state)
  return state_;
}
inline void SRoleType::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleType.state)
}

// int32 Type = 5;
inline void SRoleType::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SRoleType::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SRoleType.Type)
  return type_;
}
inline void SRoleType::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SRoleType.Type)
}

// -------------------------------------------------------------------

// SFramToolAuthority

// repeated .ServerProtocol.SToolAuthority SToolAuthoritylist = 1;
inline int SFramToolAuthority::stoolauthoritylist_size() const {
  return stoolauthoritylist_.size();
}
inline void SFramToolAuthority::clear_stoolauthoritylist() {
  stoolauthoritylist_.Clear();
}
inline ::ServerProtocol::SToolAuthority* SFramToolAuthority::mutable_stoolauthoritylist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramToolAuthority.SToolAuthoritylist)
  return stoolauthoritylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SToolAuthority >*
SFramToolAuthority::mutable_stoolauthoritylist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramToolAuthority.SToolAuthoritylist)
  return &stoolauthoritylist_;
}
inline const ::ServerProtocol::SToolAuthority& SFramToolAuthority::stoolauthoritylist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramToolAuthority.SToolAuthoritylist)
  return stoolauthoritylist_.Get(index);
}
inline ::ServerProtocol::SToolAuthority* SFramToolAuthority::add_stoolauthoritylist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramToolAuthority.SToolAuthoritylist)
  return stoolauthoritylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SToolAuthority >&
SFramToolAuthority::stoolauthoritylist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramToolAuthority.SToolAuthoritylist)
  return stoolauthoritylist_;
}

// -------------------------------------------------------------------

// SToolAuthority

// uint64 id = 1;
inline void SToolAuthority::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SToolAuthority::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.id)
  return id_;
}
inline void SToolAuthority::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.id)
}

// string Name = 2;
inline void SToolAuthority::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SToolAuthority::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.Name)
  return name_.GetNoArena();
}
inline void SToolAuthority::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.Name)
}
#if LANG_CXX11
inline void SToolAuthority::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SToolAuthority.Name)
}
#endif
inline void SToolAuthority::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SToolAuthority.Name)
}
inline void SToolAuthority::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SToolAuthority.Name)
}
inline ::std::string* SToolAuthority::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SToolAuthority.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SToolAuthority::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SToolAuthority.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SToolAuthority::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SToolAuthority.Name)
}

// uint64 value = 3;
inline void SToolAuthority::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SToolAuthority::value() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.value)
  return value_;
}
inline void SToolAuthority::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.value)
}

// int32 ToolType = 4;
inline void SToolAuthority::clear_tooltype() {
  tooltype_ = 0;
}
inline ::google::protobuf::int32 SToolAuthority::tooltype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.ToolType)
  return tooltype_;
}
inline void SToolAuthority::set_tooltype(::google::protobuf::int32 value) {
  
  tooltype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.ToolType)
}

// uint64 FID = 5;
inline void SToolAuthority::clear_fid() {
  fid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SToolAuthority::fid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.FID)
  return fid_;
}
inline void SToolAuthority::set_fid(::google::protobuf::uint64 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.FID)
}

// string Url = 6;
inline void SToolAuthority::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SToolAuthority::url() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.Url)
  return url_.GetNoArena();
}
inline void SToolAuthority::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.Url)
}
#if LANG_CXX11
inline void SToolAuthority::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SToolAuthority.Url)
}
#endif
inline void SToolAuthority::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SToolAuthority.Url)
}
inline void SToolAuthority::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SToolAuthority.Url)
}
inline ::std::string* SToolAuthority::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SToolAuthority.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SToolAuthority::release_url() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SToolAuthority.Url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SToolAuthority::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SToolAuthority.Url)
}

// int32 sort = 7;
inline void SToolAuthority::clear_sort() {
  sort_ = 0;
}
inline ::google::protobuf::int32 SToolAuthority::sort() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SToolAuthority.sort)
  return sort_;
}
inline void SToolAuthority::set_sort(::google::protobuf::int32 value) {
  
  sort_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SToolAuthority.sort)
}

// -------------------------------------------------------------------

// SFramUseRecord

// repeated .ServerProtocol.SUseRecord SUseRecordlist = 1;
inline int SFramUseRecord::suserecordlist_size() const {
  return suserecordlist_.size();
}
inline void SFramUseRecord::clear_suserecordlist() {
  suserecordlist_.Clear();
}
inline ::ServerProtocol::SUseRecord* SFramUseRecord::mutable_suserecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramUseRecord.SUseRecordlist)
  return suserecordlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUseRecord >*
SFramUseRecord::mutable_suserecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramUseRecord.SUseRecordlist)
  return &suserecordlist_;
}
inline const ::ServerProtocol::SUseRecord& SFramUseRecord::suserecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramUseRecord.SUseRecordlist)
  return suserecordlist_.Get(index);
}
inline ::ServerProtocol::SUseRecord* SFramUseRecord::add_suserecordlist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramUseRecord.SUseRecordlist)
  return suserecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUseRecord >&
SFramUseRecord::suserecordlist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramUseRecord.SUseRecordlist)
  return suserecordlist_;
}

// -------------------------------------------------------------------

// SUseRecord

// uint64 id = 1;
inline void SUseRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SUseRecord::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.id)
  return id_;
}
inline void SUseRecord::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.id)
}

// string User = 2;
inline void SUseRecord::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUseRecord::user() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.User)
  return user_.GetNoArena();
}
inline void SUseRecord::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.User)
}
#if LANG_CXX11
inline void SUseRecord::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUseRecord.User)
}
#endif
inline void SUseRecord::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUseRecord.User)
}
inline void SUseRecord::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUseRecord.User)
}
inline ::std::string* SUseRecord::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUseRecord.User)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUseRecord::release_user() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUseRecord.User)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUseRecord::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUseRecord.User)
}

// string Mac = 3;
inline void SUseRecord::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUseRecord::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.Mac)
  return mac_.GetNoArena();
}
inline void SUseRecord::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.Mac)
}
#if LANG_CXX11
inline void SUseRecord::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUseRecord.Mac)
}
#endif
inline void SUseRecord::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUseRecord.Mac)
}
inline void SUseRecord::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUseRecord.Mac)
}
inline ::std::string* SUseRecord::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUseRecord.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUseRecord::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUseRecord.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUseRecord::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUseRecord.Mac)
}

// int32 usetype = 4;
inline void SUseRecord::clear_usetype() {
  usetype_ = 0;
}
inline ::google::protobuf::int32 SUseRecord::usetype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.usetype)
  return usetype_;
}
inline void SUseRecord::set_usetype(::google::protobuf::int32 value) {
  
  usetype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.usetype)
}

// int64 usertime = 5;
inline void SUseRecord::clear_usertime() {
  usertime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUseRecord::usertime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.usertime)
  return usertime_;
}
inline void SUseRecord::set_usertime(::google::protobuf::int64 value) {
  
  usertime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.usertime)
}

// int64 uptime = 6;
inline void SUseRecord::clear_uptime() {
  uptime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUseRecord::uptime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.uptime)
  return uptime_;
}
inline void SUseRecord::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.uptime)
}

// int32 LogType = 7;
inline void SUseRecord::clear_logtype() {
  logtype_ = 0;
}
inline ::google::protobuf::int32 SUseRecord::logtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.LogType)
  return logtype_;
}
inline void SUseRecord::set_logtype(::google::protobuf::int32 value) {
  
  logtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.LogType)
}

// int32 CarType = 8;
inline void SUseRecord::clear_cartype() {
  cartype_ = 0;
}
inline ::google::protobuf::int32 SUseRecord::cartype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.CarType)
  return cartype_;
}
inline void SUseRecord::set_cartype(::google::protobuf::int32 value) {
  
  cartype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.CarType)
}

// string remark = 9;
inline void SUseRecord::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUseRecord::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.remark)
  return remark_.GetNoArena();
}
inline void SUseRecord::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.remark)
}
#if LANG_CXX11
inline void SUseRecord::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUseRecord.remark)
}
#endif
inline void SUseRecord::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUseRecord.remark)
}
inline void SUseRecord::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUseRecord.remark)
}
inline ::std::string* SUseRecord::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUseRecord.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUseRecord::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUseRecord.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUseRecord::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUseRecord.remark)
}

// string GwMac = 10;
inline void SUseRecord::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUseRecord::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.GwMac)
  return gwmac_.GetNoArena();
}
inline void SUseRecord::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.GwMac)
}
#if LANG_CXX11
inline void SUseRecord::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUseRecord.GwMac)
}
#endif
inline void SUseRecord::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUseRecord.GwMac)
}
inline void SUseRecord::set_gwmac(const char* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUseRecord.GwMac)
}
inline ::std::string* SUseRecord::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUseRecord.GwMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUseRecord::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUseRecord.GwMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUseRecord::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUseRecord.GwMac)
}

// uint64 AreaDeviceID = 11;
inline void SUseRecord::clear_areadeviceid() {
  areadeviceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SUseRecord::areadeviceid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUseRecord.AreaDeviceID)
  return areadeviceid_;
}
inline void SUseRecord::set_areadeviceid(::google::protobuf::uint64 value) {
  
  areadeviceid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUseRecord.AreaDeviceID)
}

// -------------------------------------------------------------------

// SFramUserinfo

// repeated .ServerProtocol.SUserinfo SUserinfolist = 1;
inline int SFramUserinfo::suserinfolist_size() const {
  return suserinfolist_.size();
}
inline void SFramUserinfo::clear_suserinfolist() {
  suserinfolist_.Clear();
}
inline ::ServerProtocol::SUserinfo* SFramUserinfo::mutable_suserinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramUserinfo.SUserinfolist)
  return suserinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUserinfo >*
SFramUserinfo::mutable_suserinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SFramUserinfo.SUserinfolist)
  return &suserinfolist_;
}
inline const ::ServerProtocol::SUserinfo& SFramUserinfo::suserinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramUserinfo.SUserinfolist)
  return suserinfolist_.Get(index);
}
inline ::ServerProtocol::SUserinfo* SFramUserinfo::add_suserinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.SFramUserinfo.SUserinfolist)
  return suserinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SUserinfo >&
SFramUserinfo::suserinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SFramUserinfo.SUserinfolist)
  return suserinfolist_;
}

// -------------------------------------------------------------------

// SUserinfo

// uint64 id = 1;
inline void SUserinfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SUserinfo::id() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.id)
  return id_;
}
inline void SUserinfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.id)
}

// string Name = 2;
inline void SUserinfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::name() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Name)
  return name_.GetNoArena();
}
inline void SUserinfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Name)
}
#if LANG_CXX11
inline void SUserinfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.Name)
}
#endif
inline void SUserinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.Name)
}
inline void SUserinfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.Name)
}
inline ::std::string* SUserinfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_name() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.Name)
}

// string CardID = 3;
inline void SUserinfo::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::cardid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.CardID)
  return cardid_.GetNoArena();
}
inline void SUserinfo::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.CardID)
}
#if LANG_CXX11
inline void SUserinfo::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.CardID)
}
#endif
inline void SUserinfo::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.CardID)
}
inline void SUserinfo::set_cardid(const char* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.CardID)
}
inline ::std::string* SUserinfo::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.CardID)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_cardid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.CardID)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.CardID)
}

// string phone = 4;
inline void SUserinfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.phone)
  return phone_.GetNoArena();
}
inline void SUserinfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.phone)
}
#if LANG_CXX11
inline void SUserinfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.phone)
}
#endif
inline void SUserinfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.phone)
}
inline void SUserinfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.phone)
}
inline ::std::string* SUserinfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.phone)
}

// int32 sex = 5;
inline void SUserinfo::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::sex() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.sex)
  return sex_;
}
inline void SUserinfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.sex)
}

// int32 type = 6;
inline void SUserinfo::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.type)
  return type_;
}
inline void SUserinfo::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.type)
}

// int32 Birthday = 7;
inline void SUserinfo::clear_birthday() {
  birthday_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::birthday() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Birthday)
  return birthday_;
}
inline void SUserinfo::set_birthday(::google::protobuf::int32 value) {
  
  birthday_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Birthday)
}

// int64 LoginTime = 8;
inline void SUserinfo::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUserinfo::logintime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.LoginTime)
  return logintime_;
}
inline void SUserinfo::set_logintime(::google::protobuf::int64 value) {
  
  logintime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.LoginTime)
}

// int64 Regtime = 9;
inline void SUserinfo::clear_regtime() {
  regtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUserinfo::regtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Regtime)
  return regtime_;
}
inline void SUserinfo::set_regtime(::google::protobuf::int64 value) {
  
  regtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Regtime)
}

// int32 State = 10;
inline void SUserinfo::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.State)
  return state_;
}
inline void SUserinfo::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.State)
}

// string pwd = 11;
inline void SUserinfo::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::pwd() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.pwd)
  return pwd_.GetNoArena();
}
inline void SUserinfo::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.pwd)
}
#if LANG_CXX11
inline void SUserinfo::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.pwd)
}
#endif
inline void SUserinfo::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.pwd)
}
inline void SUserinfo::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.pwd)
}
inline ::std::string* SUserinfo::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_pwd() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.pwd)
}

// string Ico = 12;
inline void SUserinfo::clear_ico() {
  ico_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::ico() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Ico)
  return ico_.GetNoArena();
}
inline void SUserinfo::set_ico(const ::std::string& value) {
  
  ico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Ico)
}
#if LANG_CXX11
inline void SUserinfo::set_ico(::std::string&& value) {
  
  ico_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.Ico)
}
#endif
inline void SUserinfo::set_ico(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.Ico)
}
inline void SUserinfo::set_ico(const char* value, size_t size) {
  
  ico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.Ico)
}
inline ::std::string* SUserinfo::mutable_ico() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.Ico)
  return ico_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_ico() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.Ico)
  
  return ico_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_ico(::std::string* ico) {
  if (ico != NULL) {
    
  } else {
    
  }
  ico_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ico);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.Ico)
}

// string remark = 13;
inline void SUserinfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.remark)
  return remark_.GetNoArena();
}
inline void SUserinfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.remark)
}
#if LANG_CXX11
inline void SUserinfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.remark)
}
#endif
inline void SUserinfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.remark)
}
inline void SUserinfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.remark)
}
inline ::std::string* SUserinfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.remark)
}

// uint64 CountryCode = 14;
inline void SUserinfo::clear_countrycode() {
  countrycode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SUserinfo::countrycode() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.CountryCode)
  return countrycode_;
}
inline void SUserinfo::set_countrycode(::google::protobuf::uint64 value) {
  
  countrycode_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.CountryCode)
}

// string RegisTration = 15;
inline void SUserinfo::clear_registration() {
  registration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::registration() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.RegisTration)
  return registration_.GetNoArena();
}
inline void SUserinfo::set_registration(const ::std::string& value) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.RegisTration)
}
#if LANG_CXX11
inline void SUserinfo::set_registration(::std::string&& value) {
  
  registration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.RegisTration)
}
#endif
inline void SUserinfo::set_registration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.RegisTration)
}
inline void SUserinfo::set_registration(const char* value, size_t size) {
  
  registration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.RegisTration)
}
inline ::std::string* SUserinfo::mutable_registration() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.RegisTration)
  return registration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_registration() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.RegisTration)
  
  return registration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_registration(::std::string* registration) {
  if (registration != NULL) {
    
  } else {
    
  }
  registration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registration);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.RegisTration)
}

// string Email = 16;
inline void SUserinfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::email() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Email)
  return email_.GetNoArena();
}
inline void SUserinfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Email)
}
#if LANG_CXX11
inline void SUserinfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.Email)
}
#endif
inline void SUserinfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.Email)
}
inline void SUserinfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.Email)
}
inline ::std::string* SUserinfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_email() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.Email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.Email)
}

// int32 UpdateState = 17;
inline void SUserinfo::clear_updatestate() {
  updatestate_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::updatestate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.UpdateState)
  return updatestate_;
}
inline void SUserinfo::set_updatestate(::google::protobuf::int32 value) {
  
  updatestate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.UpdateState)
}

// string Token = 18;
inline void SUserinfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::token() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.Token)
  return token_.GetNoArena();
}
inline void SUserinfo::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.Token)
}
#if LANG_CXX11
inline void SUserinfo::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.Token)
}
#endif
inline void SUserinfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.Token)
}
inline void SUserinfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.Token)
}
inline ::std::string* SUserinfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.Token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_token() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.Token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.Token)
}

// int64 TokenTime = 19;
inline void SUserinfo::clear_tokentime() {
  tokentime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUserinfo::tokentime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.TokenTime)
  return tokentime_;
}
inline void SUserinfo::set_tokentime(::google::protobuf::int64 value) {
  
  tokentime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.TokenTime)
}

// string LoginEquip = 20;
inline void SUserinfo::clear_loginequip() {
  loginequip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::loginequip() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.LoginEquip)
  return loginequip_.GetNoArena();
}
inline void SUserinfo::set_loginequip(const ::std::string& value) {
  
  loginequip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.LoginEquip)
}
#if LANG_CXX11
inline void SUserinfo::set_loginequip(::std::string&& value) {
  
  loginequip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.LoginEquip)
}
#endif
inline void SUserinfo::set_loginequip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginequip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.LoginEquip)
}
inline void SUserinfo::set_loginequip(const char* value, size_t size) {
  
  loginequip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.LoginEquip)
}
inline ::std::string* SUserinfo::mutable_loginequip() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.LoginEquip)
  return loginequip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_loginequip() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.LoginEquip)
  
  return loginequip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_loginequip(::std::string* loginequip) {
  if (loginequip != NULL) {
    
  } else {
    
  }
  loginequip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginequip);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.LoginEquip)
}

// string FaceUrl = 21;
inline void SUserinfo::clear_faceurl() {
  faceurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::faceurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.FaceUrl)
  return faceurl_.GetNoArena();
}
inline void SUserinfo::set_faceurl(const ::std::string& value) {
  
  faceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.FaceUrl)
}
#if LANG_CXX11
inline void SUserinfo::set_faceurl(::std::string&& value) {
  
  faceurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.FaceUrl)
}
#endif
inline void SUserinfo::set_faceurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  faceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.FaceUrl)
}
inline void SUserinfo::set_faceurl(const char* value, size_t size) {
  
  faceurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.FaceUrl)
}
inline ::std::string* SUserinfo::mutable_faceurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.FaceUrl)
  return faceurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_faceurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.FaceUrl)
  
  return faceurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_faceurl(::std::string* faceurl) {
  if (faceurl != NULL) {
    
  } else {
    
  }
  faceurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faceurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.FaceUrl)
}

// string FaceConditionUrl = 22;
inline void SUserinfo::clear_faceconditionurl() {
  faceconditionurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::faceconditionurl() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.FaceConditionUrl)
  return faceconditionurl_.GetNoArena();
}
inline void SUserinfo::set_faceconditionurl(const ::std::string& value) {
  
  faceconditionurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.FaceConditionUrl)
}
#if LANG_CXX11
inline void SUserinfo::set_faceconditionurl(::std::string&& value) {
  
  faceconditionurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.FaceConditionUrl)
}
#endif
inline void SUserinfo::set_faceconditionurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  faceconditionurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.FaceConditionUrl)
}
inline void SUserinfo::set_faceconditionurl(const char* value, size_t size) {
  
  faceconditionurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.FaceConditionUrl)
}
inline ::std::string* SUserinfo::mutable_faceconditionurl() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.FaceConditionUrl)
  return faceconditionurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_faceconditionurl() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.FaceConditionUrl)
  
  return faceconditionurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_faceconditionurl(::std::string* faceconditionurl) {
  if (faceconditionurl != NULL) {
    
  } else {
    
  }
  faceconditionurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faceconditionurl);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.FaceConditionUrl)
}

// int64 UpFaceImageTime = 23;
inline void SUserinfo::clear_upfaceimagetime() {
  upfaceimagetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SUserinfo::upfaceimagetime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.UpFaceImageTime)
  return upfaceimagetime_;
}
inline void SUserinfo::set_upfaceimagetime(::google::protobuf::int64 value) {
  
  upfaceimagetime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.UpFaceImageTime)
}

// string HMCondition = 24;
inline void SUserinfo::clear_hmcondition() {
  hmcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SUserinfo::hmcondition() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.HMCondition)
  return hmcondition_.GetNoArena();
}
inline void SUserinfo::set_hmcondition(const ::std::string& value) {
  
  hmcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.HMCondition)
}
#if LANG_CXX11
inline void SUserinfo::set_hmcondition(::std::string&& value) {
  
  hmcondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SUserinfo.HMCondition)
}
#endif
inline void SUserinfo::set_hmcondition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hmcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SUserinfo.HMCondition)
}
inline void SUserinfo::set_hmcondition(const char* value, size_t size) {
  
  hmcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SUserinfo.HMCondition)
}
inline ::std::string* SUserinfo::mutable_hmcondition() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SUserinfo.HMCondition)
  return hmcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SUserinfo::release_hmcondition() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SUserinfo.HMCondition)
  
  return hmcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SUserinfo::set_allocated_hmcondition(::std::string* hmcondition) {
  if (hmcondition != NULL) {
    
  } else {
    
  }
  hmcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmcondition);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SUserinfo.HMCondition)
}

// int32 AppType = 25;
inline void SUserinfo::clear_apptype() {
  apptype_ = 0;
}
inline ::google::protobuf::int32 SUserinfo::apptype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SUserinfo.AppType)
  return apptype_;
}
inline void SUserinfo::set_apptype(::google::protobuf::int32 value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SUserinfo.AppType)
}

// -------------------------------------------------------------------

// SFramShareKey

// string ShareContext = 1;
inline void SFramShareKey::clear_sharecontext() {
  sharecontext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFramShareKey::sharecontext() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramShareKey.ShareContext)
  return sharecontext_.GetNoArena();
}
inline void SFramShareKey::set_sharecontext(const ::std::string& value) {
  
  sharecontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFramShareKey.ShareContext)
}
#if LANG_CXX11
inline void SFramShareKey::set_sharecontext(::std::string&& value) {
  
  sharecontext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFramShareKey.ShareContext)
}
#endif
inline void SFramShareKey::set_sharecontext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sharecontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFramShareKey.ShareContext)
}
inline void SFramShareKey::set_sharecontext(const char* value, size_t size) {
  
  sharecontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFramShareKey.ShareContext)
}
inline ::std::string* SFramShareKey::mutable_sharecontext() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramShareKey.ShareContext)
  return sharecontext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFramShareKey::release_sharecontext() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFramShareKey.ShareContext)
  
  return sharecontext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFramShareKey::set_allocated_sharecontext(::std::string* sharecontext) {
  if (sharecontext != NULL) {
    
  } else {
    
  }
  sharecontext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sharecontext);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFramShareKey.ShareContext)
}

// string Phone = 2;
inline void SFramShareKey::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SFramShareKey::phone() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SFramShareKey.Phone)
  return phone_.GetNoArena();
}
inline void SFramShareKey::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SFramShareKey.Phone)
}
#if LANG_CXX11
inline void SFramShareKey::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SFramShareKey.Phone)
}
#endif
inline void SFramShareKey::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SFramShareKey.Phone)
}
inline void SFramShareKey::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SFramShareKey.Phone)
}
inline ::std::string* SFramShareKey::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SFramShareKey.Phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SFramShareKey::release_phone() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SFramShareKey.Phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SFramShareKey::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SFramShareKey.Phone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerProtocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ServerProtocol::ServerCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ServerCode>() {
  return ::ServerProtocol::ServerCode_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::HttpActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::HttpActionType>() {
  return ::ServerProtocol::HttpActionType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::HttpErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::HttpErrorCode>() {
  return ::ServerProtocol::HttpErrorCode_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ItemType>() {
  return ::ServerProtocol::ItemType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::messagestate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::messagestate>() {
  return ::ServerProtocol::messagestate_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::DumpState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::DumpState>() {
  return ::ServerProtocol::DumpState_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::ServerID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ServerID>() {
  return ::ServerProtocol::ServerID_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ServerType>() {
  return ::ServerProtocol::ServerType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::DeviceType>() {
  return ::ServerProtocol::DeviceType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::ServerUseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ServerUseType>() {
  return ::ServerProtocol::ServerUseType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::WBListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::WBListType>() {
  return ::ServerProtocol::WBListType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::InstallUserType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::InstallUserType>() {
  return ::ServerProtocol::InstallUserType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::JgTempType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::JgTempType>() {
  return ::ServerProtocol::JgTempType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::AppType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::AppType>() {
  return ::ServerProtocol::AppType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ServerProtocol_2eproto
