// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceProtocol.proto

#ifndef PROTOBUF_INCLUDED_DeviceProtocol_2eproto
#define PROTOBUF_INCLUDED_DeviceProtocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto 

namespace protobuf_DeviceProtocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[34];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DeviceProtocol_2eproto
namespace ServerProtocol {
class AIOT;
class AIOTDefaultTypeInternal;
extern AIOTDefaultTypeInternal _AIOT_default_instance_;
class ControlResponse;
class ControlResponseDefaultTypeInternal;
extern ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
class D2SCalibrationTime;
class D2SCalibrationTimeDefaultTypeInternal;
extern D2SCalibrationTimeDefaultTypeInternal _D2SCalibrationTime_default_instance_;
class DeleteGwDevice;
class DeleteGwDeviceDefaultTypeInternal;
extern DeleteGwDeviceDefaultTypeInternal _DeleteGwDevice_default_instance_;
class DeviceConfig;
class DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class DeviceCrcVerification;
class DeviceCrcVerificationDefaultTypeInternal;
extern DeviceCrcVerificationDefaultTypeInternal _DeviceCrcVerification_default_instance_;
class DeviceDelete;
class DeviceDeleteDefaultTypeInternal;
extern DeviceDeleteDefaultTypeInternal _DeviceDelete_default_instance_;
class DeviceLog;
class DeviceLogDefaultTypeInternal;
extern DeviceLogDefaultTypeInternal _DeviceLog_default_instance_;
class DeviceOffline;
class DeviceOfflineDefaultTypeInternal;
extern DeviceOfflineDefaultTypeInternal _DeviceOffline_default_instance_;
class DeviceTable;
class DeviceTableDefaultTypeInternal;
extern DeviceTableDefaultTypeInternal _DeviceTable_default_instance_;
class DispatchWBListResult;
class DispatchWBListResultDefaultTypeInternal;
extern DispatchWBListResultDefaultTypeInternal _DispatchWBListResult_default_instance_;
class FeatureTable;
class FeatureTableDefaultTypeInternal;
extern FeatureTableDefaultTypeInternal _FeatureTable_default_instance_;
class GWDeviceInfo;
class GWDeviceInfoDefaultTypeInternal;
extern GWDeviceInfoDefaultTypeInternal _GWDeviceInfo_default_instance_;
class GWDeviceProperty;
class GWDevicePropertyDefaultTypeInternal;
extern GWDevicePropertyDefaultTypeInternal _GWDeviceProperty_default_instance_;
class GWFeature;
class GWFeatureDefaultTypeInternal;
extern GWFeatureDefaultTypeInternal _GWFeature_default_instance_;
class GWUPDeviceData;
class GWUPDeviceDataDefaultTypeInternal;
extern GWUPDeviceDataDefaultTypeInternal _GWUPDeviceData_default_instance_;
class HmDataReponse;
class HmDataReponseDefaultTypeInternal;
extern HmDataReponseDefaultTypeInternal _HmDataReponse_default_instance_;
class HmDataRequest;
class HmDataRequestDefaultTypeInternal;
extern HmDataRequestDefaultTypeInternal _HmDataRequest_default_instance_;
class ModifyDeviceState;
class ModifyDeviceStateDefaultTypeInternal;
extern ModifyDeviceStateDefaultTypeInternal _ModifyDeviceState_default_instance_;
class MqttSubscribeInit;
class MqttSubscribeInitDefaultTypeInternal;
extern MqttSubscribeInitDefaultTypeInternal _MqttSubscribeInit_default_instance_;
class NBAnswer;
class NBAnswerDefaultTypeInternal;
extern NBAnswerDefaultTypeInternal _NBAnswer_default_instance_;
class NBDeviceDataRequest;
class NBDeviceDataRequestDefaultTypeInternal;
extern NBDeviceDataRequestDefaultTypeInternal _NBDeviceDataRequest_default_instance_;
class RemoteOpen;
class RemoteOpenDefaultTypeInternal;
extern RemoteOpenDefaultTypeInternal _RemoteOpen_default_instance_;
class SensorState;
class SensorStateDefaultTypeInternal;
extern SensorStateDefaultTypeInternal _SensorState_default_instance_;
class StateTable;
class StateTableDefaultTypeInternal;
extern StateTableDefaultTypeInternal _StateTable_default_instance_;
class SubscribeInitData;
class SubscribeInitDataDefaultTypeInternal;
extern SubscribeInitDataDefaultTypeInternal _SubscribeInitData_default_instance_;
class SystemCommonResponse;
class SystemCommonResponseDefaultTypeInternal;
extern SystemCommonResponseDefaultTypeInternal _SystemCommonResponse_default_instance_;
class Transmission;
class TransmissionDefaultTypeInternal;
extern TransmissionDefaultTypeInternal _Transmission_default_instance_;
class TransmissionResponse;
class TransmissionResponseDefaultTypeInternal;
extern TransmissionResponseDefaultTypeInternal _TransmissionResponse_default_instance_;
class UpDeviceHeartReponse;
class UpDeviceHeartReponseDefaultTypeInternal;
extern UpDeviceHeartReponseDefaultTypeInternal _UpDeviceHeartReponse_default_instance_;
class UpLogResponse;
class UpLogResponseDefaultTypeInternal;
extern UpLogResponseDefaultTypeInternal _UpLogResponse_default_instance_;
class UpLogTable;
class UpLogTableDefaultTypeInternal;
extern UpLogTableDefaultTypeInternal _UpLogTable_default_instance_;
class VersionManager;
class VersionManagerDefaultTypeInternal;
extern VersionManagerDefaultTypeInternal _VersionManager_default_instance_;
class WhiteBlackList;
class WhiteBlackListDefaultTypeInternal;
extern WhiteBlackListDefaultTypeInternal _WhiteBlackList_default_instance_;
}  // namespace ServerProtocol
namespace google {
namespace protobuf {
template<> ::ServerProtocol::AIOT* Arena::CreateMaybeMessage<::ServerProtocol::AIOT>(Arena*);
template<> ::ServerProtocol::ControlResponse* Arena::CreateMaybeMessage<::ServerProtocol::ControlResponse>(Arena*);
template<> ::ServerProtocol::D2SCalibrationTime* Arena::CreateMaybeMessage<::ServerProtocol::D2SCalibrationTime>(Arena*);
template<> ::ServerProtocol::DeleteGwDevice* Arena::CreateMaybeMessage<::ServerProtocol::DeleteGwDevice>(Arena*);
template<> ::ServerProtocol::DeviceConfig* Arena::CreateMaybeMessage<::ServerProtocol::DeviceConfig>(Arena*);
template<> ::ServerProtocol::DeviceCrcVerification* Arena::CreateMaybeMessage<::ServerProtocol::DeviceCrcVerification>(Arena*);
template<> ::ServerProtocol::DeviceDelete* Arena::CreateMaybeMessage<::ServerProtocol::DeviceDelete>(Arena*);
template<> ::ServerProtocol::DeviceLog* Arena::CreateMaybeMessage<::ServerProtocol::DeviceLog>(Arena*);
template<> ::ServerProtocol::DeviceOffline* Arena::CreateMaybeMessage<::ServerProtocol::DeviceOffline>(Arena*);
template<> ::ServerProtocol::DeviceTable* Arena::CreateMaybeMessage<::ServerProtocol::DeviceTable>(Arena*);
template<> ::ServerProtocol::DispatchWBListResult* Arena::CreateMaybeMessage<::ServerProtocol::DispatchWBListResult>(Arena*);
template<> ::ServerProtocol::FeatureTable* Arena::CreateMaybeMessage<::ServerProtocol::FeatureTable>(Arena*);
template<> ::ServerProtocol::GWDeviceInfo* Arena::CreateMaybeMessage<::ServerProtocol::GWDeviceInfo>(Arena*);
template<> ::ServerProtocol::GWDeviceProperty* Arena::CreateMaybeMessage<::ServerProtocol::GWDeviceProperty>(Arena*);
template<> ::ServerProtocol::GWFeature* Arena::CreateMaybeMessage<::ServerProtocol::GWFeature>(Arena*);
template<> ::ServerProtocol::GWUPDeviceData* Arena::CreateMaybeMessage<::ServerProtocol::GWUPDeviceData>(Arena*);
template<> ::ServerProtocol::HmDataReponse* Arena::CreateMaybeMessage<::ServerProtocol::HmDataReponse>(Arena*);
template<> ::ServerProtocol::HmDataRequest* Arena::CreateMaybeMessage<::ServerProtocol::HmDataRequest>(Arena*);
template<> ::ServerProtocol::ModifyDeviceState* Arena::CreateMaybeMessage<::ServerProtocol::ModifyDeviceState>(Arena*);
template<> ::ServerProtocol::MqttSubscribeInit* Arena::CreateMaybeMessage<::ServerProtocol::MqttSubscribeInit>(Arena*);
template<> ::ServerProtocol::NBAnswer* Arena::CreateMaybeMessage<::ServerProtocol::NBAnswer>(Arena*);
template<> ::ServerProtocol::NBDeviceDataRequest* Arena::CreateMaybeMessage<::ServerProtocol::NBDeviceDataRequest>(Arena*);
template<> ::ServerProtocol::RemoteOpen* Arena::CreateMaybeMessage<::ServerProtocol::RemoteOpen>(Arena*);
template<> ::ServerProtocol::SensorState* Arena::CreateMaybeMessage<::ServerProtocol::SensorState>(Arena*);
template<> ::ServerProtocol::StateTable* Arena::CreateMaybeMessage<::ServerProtocol::StateTable>(Arena*);
template<> ::ServerProtocol::SubscribeInitData* Arena::CreateMaybeMessage<::ServerProtocol::SubscribeInitData>(Arena*);
template<> ::ServerProtocol::SystemCommonResponse* Arena::CreateMaybeMessage<::ServerProtocol::SystemCommonResponse>(Arena*);
template<> ::ServerProtocol::Transmission* Arena::CreateMaybeMessage<::ServerProtocol::Transmission>(Arena*);
template<> ::ServerProtocol::TransmissionResponse* Arena::CreateMaybeMessage<::ServerProtocol::TransmissionResponse>(Arena*);
template<> ::ServerProtocol::UpDeviceHeartReponse* Arena::CreateMaybeMessage<::ServerProtocol::UpDeviceHeartReponse>(Arena*);
template<> ::ServerProtocol::UpLogResponse* Arena::CreateMaybeMessage<::ServerProtocol::UpLogResponse>(Arena*);
template<> ::ServerProtocol::UpLogTable* Arena::CreateMaybeMessage<::ServerProtocol::UpLogTable>(Arena*);
template<> ::ServerProtocol::VersionManager* Arena::CreateMaybeMessage<::ServerProtocol::VersionManager>(Arena*);
template<> ::ServerProtocol::WhiteBlackList* Arena::CreateMaybeMessage<::ServerProtocol::WhiteBlackList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ServerProtocol {

enum CmdCode {
  D2S_CORRECTION_DEFAULT = 0,
  D2S_CORRECTION_TIME = 5000,
  D2S_MODIFY_DEVICESTATE = 5001,
  D2S_UP_DEVICELOG = 5003,
  D2S_UP_DEVICEWARING = 5004,
  D2S_UP_DEVICEINFO = 5005,
  D2S_DELETE_DEVICE = 5006,
  D2S_UP_FET = 5007,
  D2S_GETWAY_INIT = 5008,
  D2S_UP_CONTROL_RESPONESE = 5009,
  D2S_DEVICE_OFFLINE = 5010,
  D2S_WBLIST_RESULT = 5011,
  D2S_DEVICE_UNONLINE = 5012,
  D2S_NB_DEVICE_REQUEST = 5013,
  D2S_HM_TEMPLATE_REQUEST = 5014,
  D2S_HM_TEMPLATE_REPONSE = 5015,
  D2S_DEVICE_CRC_HEART = 5016,
  D2S_UP_DEVICEINFO_CRC = 5017,
  D2S_UP_FET_CRC = 5018,
  S2D_DOWN_CONFIG = 6000,
  S2D_TRANS_CMD = 6001,
  S2D_DOWN_DATACMD = 6002,
  S2D_DOWN_DEVICETABLE = 6003,
  S2D_OPEN_DOOR = 6004,
  S2D_ACTION_AIOT = 6005,
  S2D_UP_LOG_RESPONSE = 6006,
  S2D_GETWAY_INIT = 6007,
  S2D_READ_DEVICE_COLLECT = 6008,
  S2D_NB_DATA_ANSWER = 6009,
  S2D_DEVICE_CRC_ANSWER = 6010,
  S2D_DELETE_GWDEVICE = 6011,
  S2D_VERSION_MANAGER = 6012,
  CmdCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdCode_IsValid(int value);
const CmdCode CmdCode_MIN = D2S_CORRECTION_DEFAULT;
const CmdCode CmdCode_MAX = S2D_VERSION_MANAGER;
const int CmdCode_ARRAYSIZE = CmdCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdCode_descriptor();
inline const ::std::string& CmdCode_Name(CmdCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdCode_descriptor(), value);
}
inline bool CmdCode_Parse(
    const ::std::string& name, CmdCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdCode>(
    CmdCode_descriptor(), name, value);
}
enum ControlCommand {
  DEFAULT = 0,
  DevOnOff = 128,
  DevBrightness = 129,
  DevColor = 130,
  DevRemoteOpen = 131,
  FetchEnerge = 132,
  BIBO = 133,
  Mode = 134,
  PermitPair = 135,
  CounterConfig = 136,
  CounterModify = 137,
  BlockData = 138,
  DelFet = 139,
  ControlCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlCommand_IsValid(int value);
const ControlCommand ControlCommand_MIN = DEFAULT;
const ControlCommand ControlCommand_MAX = DelFet;
const int ControlCommand_ARRAYSIZE = ControlCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlCommand_descriptor();
inline const ::std::string& ControlCommand_Name(ControlCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlCommand_descriptor(), value);
}
inline bool ControlCommand_Parse(
    const ::std::string& name, ControlCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlCommand>(
    ControlCommand_descriptor(), name, value);
}
enum IRISCmdType {
  IRIS_DEFAULT = 0,
  IRIS_BLOCK = 1,
  IRIS_DEL = 2,
  IRIS_CONFIG = 3,
  IRISCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IRISCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IRISCmdType_IsValid(int value);
const IRISCmdType IRISCmdType_MIN = IRIS_DEFAULT;
const IRISCmdType IRISCmdType_MAX = IRIS_CONFIG;
const int IRISCmdType_ARRAYSIZE = IRISCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IRISCmdType_descriptor();
inline const ::std::string& IRISCmdType_Name(IRISCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IRISCmdType_descriptor(), value);
}
inline bool IRISCmdType_Parse(
    const ::std::string& name, IRISCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IRISCmdType>(
    IRISCmdType_descriptor(), name, value);
}
enum GeneralDataBlockCharacteristics {
  IFT_DEFAULT = 0,
  IFT_UPDATE_MCU = 208,
  IFT_UPDATE_BT = 209,
  IFT_IRIS_TEMPLATE = 210,
  IFT_FACE_TEMPLATE = 211,
  IFT_FINGERPRINT_TEMPLATE = 212,
  GeneralDataBlockCharacteristics_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GeneralDataBlockCharacteristics_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GeneralDataBlockCharacteristics_IsValid(int value);
const GeneralDataBlockCharacteristics GeneralDataBlockCharacteristics_MIN = IFT_DEFAULT;
const GeneralDataBlockCharacteristics GeneralDataBlockCharacteristics_MAX = IFT_FINGERPRINT_TEMPLATE;
const int GeneralDataBlockCharacteristics_ARRAYSIZE = GeneralDataBlockCharacteristics_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeneralDataBlockCharacteristics_descriptor();
inline const ::std::string& GeneralDataBlockCharacteristics_Name(GeneralDataBlockCharacteristics value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeneralDataBlockCharacteristics_descriptor(), value);
}
inline bool GeneralDataBlockCharacteristics_Parse(
    const ::std::string& name, GeneralDataBlockCharacteristics* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeneralDataBlockCharacteristics>(
    GeneralDataBlockCharacteristics_descriptor(), name, value);
}
enum CardsWhiteListState {
  CARDS_STATE_DEFAULT = 0,
  CARDS_STATE_0 = 1,
  CARDS_STATE_1 = 2,
  CARDS_STATE_2 = 3,
  CARDS_STATE_3 = 4,
  CardsWhiteListState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CardsWhiteListState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CardsWhiteListState_IsValid(int value);
const CardsWhiteListState CardsWhiteListState_MIN = CARDS_STATE_DEFAULT;
const CardsWhiteListState CardsWhiteListState_MAX = CARDS_STATE_3;
const int CardsWhiteListState_ARRAYSIZE = CardsWhiteListState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CardsWhiteListState_descriptor();
inline const ::std::string& CardsWhiteListState_Name(CardsWhiteListState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CardsWhiteListState_descriptor(), value);
}
inline bool CardsWhiteListState_Parse(
    const ::std::string& name, CardsWhiteListState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CardsWhiteListState>(
    CardsWhiteListState_descriptor(), name, value);
}
enum UpDataTypes {
  UDT_DEFAULT = 0,
  UDT_IR = 1,
  UDTDoorMagnetic = 2,
  UDTTemperature = 3,
  UDTHumidity = 4,
  UDSmoke = 5,
  UDTVoltage = 6,
  UDTCurrent = 7,
  UDTPower = 8,
  UDTEnerge = 9,
  UDTPowerFactor = 10,
  UpDataTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UpDataTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UpDataTypes_IsValid(int value);
const UpDataTypes UpDataTypes_MIN = UDT_DEFAULT;
const UpDataTypes UpDataTypes_MAX = UDTPowerFactor;
const int UpDataTypes_ARRAYSIZE = UpDataTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpDataTypes_descriptor();
inline const ::std::string& UpDataTypes_Name(UpDataTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpDataTypes_descriptor(), value);
}
inline bool UpDataTypes_Parse(
    const ::std::string& name, UpDataTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpDataTypes>(
    UpDataTypes_descriptor(), name, value);
}
// ===================================================================

class VersionManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.VersionManager) */ {
 public:
  VersionManager();
  virtual ~VersionManager();

  VersionManager(const VersionManager& from);

  inline VersionManager& operator=(const VersionManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionManager(VersionManager&& from) noexcept
    : VersionManager() {
    *this = ::std::move(from);
  }

  inline VersionManager& operator=(VersionManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionManager* internal_default_instance() {
    return reinterpret_cast<const VersionManager*>(
               &_VersionManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VersionManager* other);
  friend void swap(VersionManager& a, VersionManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionManager* New() const final {
    return CreateMaybeMessage<VersionManager>(NULL);
  }

  VersionManager* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionManager>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionManager& from);
  void MergeFrom(const VersionManager& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string InterFaceName = 2;
  void clear_interfacename();
  static const int kInterFaceNameFieldNumber = 2;
  const ::std::string& interfacename() const;
  void set_interfacename(const ::std::string& value);
  #if LANG_CXX11
  void set_interfacename(::std::string&& value);
  #endif
  void set_interfacename(const char* value);
  void set_interfacename(const char* value, size_t size);
  ::std::string* mutable_interfacename();
  ::std::string* release_interfacename();
  void set_allocated_interfacename(::std::string* interfacename);

  // int32 VerType = 1;
  void clear_vertype();
  static const int kVerTypeFieldNumber = 1;
  ::google::protobuf::int32 vertype() const;
  void set_vertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.VersionManager)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interfacename_;
  ::google::protobuf::int32 vertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteGwDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeleteGwDevice) */ {
 public:
  DeleteGwDevice();
  virtual ~DeleteGwDevice();

  DeleteGwDevice(const DeleteGwDevice& from);

  inline DeleteGwDevice& operator=(const DeleteGwDevice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteGwDevice(DeleteGwDevice&& from) noexcept
    : DeleteGwDevice() {
    *this = ::std::move(from);
  }

  inline DeleteGwDevice& operator=(DeleteGwDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteGwDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGwDevice* internal_default_instance() {
    return reinterpret_cast<const DeleteGwDevice*>(
               &_DeleteGwDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DeleteGwDevice* other);
  friend void swap(DeleteGwDevice& a, DeleteGwDevice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteGwDevice* New() const final {
    return CreateMaybeMessage<DeleteGwDevice>(NULL);
  }

  DeleteGwDevice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGwDevice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteGwDevice& from);
  void MergeFrom(const DeleteGwDevice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGwDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GatewayMac = 1;
  void clear_gatewaymac();
  static const int kGatewayMacFieldNumber = 1;
  const ::std::string& gatewaymac() const;
  void set_gatewaymac(const ::std::string& value);
  #if LANG_CXX11
  void set_gatewaymac(::std::string&& value);
  #endif
  void set_gatewaymac(const char* value);
  void set_gatewaymac(const char* value, size_t size);
  ::std::string* mutable_gatewaymac();
  ::std::string* release_gatewaymac();
  void set_allocated_gatewaymac(::std::string* gatewaymac);

  // string DeviceMac = 2;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeleteGwDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gatewaymac_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceCrcVerification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceCrcVerification) */ {
 public:
  DeviceCrcVerification();
  virtual ~DeviceCrcVerification();

  DeviceCrcVerification(const DeviceCrcVerification& from);

  inline DeviceCrcVerification& operator=(const DeviceCrcVerification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceCrcVerification(DeviceCrcVerification&& from) noexcept
    : DeviceCrcVerification() {
    *this = ::std::move(from);
  }

  inline DeviceCrcVerification& operator=(DeviceCrcVerification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCrcVerification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceCrcVerification* internal_default_instance() {
    return reinterpret_cast<const DeviceCrcVerification*>(
               &_DeviceCrcVerification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DeviceCrcVerification* other);
  friend void swap(DeviceCrcVerification& a, DeviceCrcVerification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceCrcVerification* New() const final {
    return CreateMaybeMessage<DeviceCrcVerification>(NULL);
  }

  DeviceCrcVerification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceCrcVerification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceCrcVerification& from);
  void MergeFrom(const DeviceCrcVerification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceCrcVerification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GatewayMac = 1;
  void clear_gatewaymac();
  static const int kGatewayMacFieldNumber = 1;
  const ::std::string& gatewaymac() const;
  void set_gatewaymac(const ::std::string& value);
  #if LANG_CXX11
  void set_gatewaymac(::std::string&& value);
  #endif
  void set_gatewaymac(const char* value);
  void set_gatewaymac(const char* value, size_t size);
  ::std::string* mutable_gatewaymac();
  ::std::string* release_gatewaymac();
  void set_allocated_gatewaymac(::std::string* gatewaymac);

  // int32 DeviceCrc = 2;
  void clear_devicecrc();
  static const int kDeviceCrcFieldNumber = 2;
  ::google::protobuf::int32 devicecrc() const;
  void set_devicecrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceCrcVerification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gatewaymac_;
  ::google::protobuf::int32 devicecrc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpDeviceHeartReponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.UpDeviceHeartReponse) */ {
 public:
  UpDeviceHeartReponse();
  virtual ~UpDeviceHeartReponse();

  UpDeviceHeartReponse(const UpDeviceHeartReponse& from);

  inline UpDeviceHeartReponse& operator=(const UpDeviceHeartReponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpDeviceHeartReponse(UpDeviceHeartReponse&& from) noexcept
    : UpDeviceHeartReponse() {
    *this = ::std::move(from);
  }

  inline UpDeviceHeartReponse& operator=(UpDeviceHeartReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpDeviceHeartReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpDeviceHeartReponse* internal_default_instance() {
    return reinterpret_cast<const UpDeviceHeartReponse*>(
               &_UpDeviceHeartReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpDeviceHeartReponse* other);
  friend void swap(UpDeviceHeartReponse& a, UpDeviceHeartReponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpDeviceHeartReponse* New() const final {
    return CreateMaybeMessage<UpDeviceHeartReponse>(NULL);
  }

  UpDeviceHeartReponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpDeviceHeartReponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpDeviceHeartReponse& from);
  void MergeFrom(const UpDeviceHeartReponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpDeviceHeartReponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string GatewayMac = 1;
  void clear_gatewaymac();
  static const int kGatewayMacFieldNumber = 1;
  const ::std::string& gatewaymac() const;
  void set_gatewaymac(const ::std::string& value);
  #if LANG_CXX11
  void set_gatewaymac(::std::string&& value);
  #endif
  void set_gatewaymac(const char* value);
  void set_gatewaymac(const char* value, size_t size);
  ::std::string* mutable_gatewaymac();
  ::std::string* release_gatewaymac();
  void set_allocated_gatewaymac(::std::string* gatewaymac);

  // int32 State = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.UpDeviceHeartReponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gatewaymac_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.HmDataRequest) */ {
 public:
  HmDataRequest();
  virtual ~HmDataRequest();

  HmDataRequest(const HmDataRequest& from);

  inline HmDataRequest& operator=(const HmDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmDataRequest(HmDataRequest&& from) noexcept
    : HmDataRequest() {
    *this = ::std::move(from);
  }

  inline HmDataRequest& operator=(HmDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmDataRequest* internal_default_instance() {
    return reinterpret_cast<const HmDataRequest*>(
               &_HmDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HmDataRequest* other);
  friend void swap(HmDataRequest& a, HmDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmDataRequest* New() const final {
    return CreateMaybeMessage<HmDataRequest>(NULL);
  }

  HmDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmDataRequest& from);
  void MergeFrom(const HmDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // bytes DevMac = 2;
  void clear_devmac();
  static const int kDevMacFieldNumber = 2;
  const ::std::string& devmac() const;
  void set_devmac(const ::std::string& value);
  #if LANG_CXX11
  void set_devmac(::std::string&& value);
  #endif
  void set_devmac(const char* value);
  void set_devmac(const void* value, size_t size);
  ::std::string* mutable_devmac();
  ::std::string* release_devmac();
  void set_allocated_devmac(::std::string* devmac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.HmDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::internal::ArenaStringPtr devmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmDataReponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.HmDataReponse) */ {
 public:
  HmDataReponse();
  virtual ~HmDataReponse();

  HmDataReponse(const HmDataReponse& from);

  inline HmDataReponse& operator=(const HmDataReponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmDataReponse(HmDataReponse&& from) noexcept
    : HmDataReponse() {
    *this = ::std::move(from);
  }

  inline HmDataReponse& operator=(HmDataReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmDataReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmDataReponse* internal_default_instance() {
    return reinterpret_cast<const HmDataReponse*>(
               &_HmDataReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HmDataReponse* other);
  friend void swap(HmDataReponse& a, HmDataReponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmDataReponse* New() const final {
    return CreateMaybeMessage<HmDataReponse>(NULL);
  }

  HmDataReponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmDataReponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmDataReponse& from);
  void MergeFrom(const HmDataReponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmDataReponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DevMac = 2;
  void clear_devmac();
  static const int kDevMacFieldNumber = 2;
  const ::std::string& devmac() const;
  void set_devmac(const ::std::string& value);
  #if LANG_CXX11
  void set_devmac(::std::string&& value);
  #endif
  void set_devmac(const char* value);
  void set_devmac(const void* value, size_t size);
  ::std::string* mutable_devmac();
  ::std::string* release_devmac();
  void set_allocated_devmac(::std::string* devmac);

  // int64 UserId = 3;
  void clear_userid();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.HmDataReponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devmac_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NBDeviceDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.NBDeviceDataRequest) */ {
 public:
  NBDeviceDataRequest();
  virtual ~NBDeviceDataRequest();

  NBDeviceDataRequest(const NBDeviceDataRequest& from);

  inline NBDeviceDataRequest& operator=(const NBDeviceDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NBDeviceDataRequest(NBDeviceDataRequest&& from) noexcept
    : NBDeviceDataRequest() {
    *this = ::std::move(from);
  }

  inline NBDeviceDataRequest& operator=(NBDeviceDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NBDeviceDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NBDeviceDataRequest* internal_default_instance() {
    return reinterpret_cast<const NBDeviceDataRequest*>(
               &_NBDeviceDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NBDeviceDataRequest* other);
  friend void swap(NBDeviceDataRequest& a, NBDeviceDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NBDeviceDataRequest* New() const final {
    return CreateMaybeMessage<NBDeviceDataRequest>(NULL);
  }

  NBDeviceDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NBDeviceDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NBDeviceDataRequest& from);
  void MergeFrom(const NBDeviceDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NBDeviceDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.NBDeviceDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceOffline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceOffline) */ {
 public:
  DeviceOffline();
  virtual ~DeviceOffline();

  DeviceOffline(const DeviceOffline& from);

  inline DeviceOffline& operator=(const DeviceOffline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceOffline(DeviceOffline&& from) noexcept
    : DeviceOffline() {
    *this = ::std::move(from);
  }

  inline DeviceOffline& operator=(DeviceOffline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceOffline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceOffline* internal_default_instance() {
    return reinterpret_cast<const DeviceOffline*>(
               &_DeviceOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeviceOffline* other);
  friend void swap(DeviceOffline& a, DeviceOffline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceOffline* New() const final {
    return CreateMaybeMessage<DeviceOffline>(NULL);
  }

  DeviceOffline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceOffline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceOffline& from);
  void MergeFrom(const DeviceOffline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceOffline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceOffline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemCommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SystemCommonResponse) */ {
 public:
  SystemCommonResponse();
  virtual ~SystemCommonResponse();

  SystemCommonResponse(const SystemCommonResponse& from);

  inline SystemCommonResponse& operator=(const SystemCommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemCommonResponse(SystemCommonResponse&& from) noexcept
    : SystemCommonResponse() {
    *this = ::std::move(from);
  }

  inline SystemCommonResponse& operator=(SystemCommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemCommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemCommonResponse* internal_default_instance() {
    return reinterpret_cast<const SystemCommonResponse*>(
               &_SystemCommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SystemCommonResponse* other);
  friend void swap(SystemCommonResponse& a, SystemCommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemCommonResponse* New() const final {
    return CreateMaybeMessage<SystemCommonResponse>(NULL);
  }

  SystemCommonResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SystemCommonResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SystemCommonResponse& from);
  void MergeFrom(const SystemCommonResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemCommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Remark = 3;
  void clear_remark();
  static const int kRemarkFieldNumber = 3;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // int32 CurTime = 2;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 2;
  ::google::protobuf::int32 curtime() const;
  void set_curtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SystemCommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 curtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class D2SCalibrationTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.D2SCalibrationTime) */ {
 public:
  D2SCalibrationTime();
  virtual ~D2SCalibrationTime();

  D2SCalibrationTime(const D2SCalibrationTime& from);

  inline D2SCalibrationTime& operator=(const D2SCalibrationTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  D2SCalibrationTime(D2SCalibrationTime&& from) noexcept
    : D2SCalibrationTime() {
    *this = ::std::move(from);
  }

  inline D2SCalibrationTime& operator=(D2SCalibrationTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const D2SCalibrationTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const D2SCalibrationTime* internal_default_instance() {
    return reinterpret_cast<const D2SCalibrationTime*>(
               &_D2SCalibrationTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(D2SCalibrationTime* other);
  friend void swap(D2SCalibrationTime& a, D2SCalibrationTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline D2SCalibrationTime* New() const final {
    return CreateMaybeMessage<D2SCalibrationTime>(NULL);
  }

  D2SCalibrationTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<D2SCalibrationTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const D2SCalibrationTime& from);
  void MergeFrom(const D2SCalibrationTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D2SCalibrationTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MacAddress = 1;
  void clear_macaddress();
  static const int kMacAddressFieldNumber = 1;
  const ::std::string& macaddress() const;
  void set_macaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddress(::std::string&& value);
  #endif
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  ::std::string* mutable_macaddress();
  ::std::string* release_macaddress();
  void set_allocated_macaddress(::std::string* macaddress);

  // @@protoc_insertion_point(class_scope:ServerProtocol.D2SCalibrationTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr macaddress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyDeviceState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.ModifyDeviceState) */ {
 public:
  ModifyDeviceState();
  virtual ~ModifyDeviceState();

  ModifyDeviceState(const ModifyDeviceState& from);

  inline ModifyDeviceState& operator=(const ModifyDeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyDeviceState(ModifyDeviceState&& from) noexcept
    : ModifyDeviceState() {
    *this = ::std::move(from);
  }

  inline ModifyDeviceState& operator=(ModifyDeviceState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyDeviceState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyDeviceState* internal_default_instance() {
    return reinterpret_cast<const ModifyDeviceState*>(
               &_ModifyDeviceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ModifyDeviceState* other);
  friend void swap(ModifyDeviceState& a, ModifyDeviceState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyDeviceState* New() const final {
    return CreateMaybeMessage<ModifyDeviceState>(NULL);
  }

  ModifyDeviceState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModifyDeviceState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModifyDeviceState& from);
  void MergeFrom(const ModifyDeviceState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyDeviceState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes SeviceMac = 1;
  void clear_sevicemac();
  static const int kSeviceMacFieldNumber = 1;
  const ::std::string& sevicemac() const;
  void set_sevicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_sevicemac(::std::string&& value);
  #endif
  void set_sevicemac(const char* value);
  void set_sevicemac(const void* value, size_t size);
  ::std::string* mutable_sevicemac();
  ::std::string* release_sevicemac();
  void set_allocated_sevicemac(::std::string* sevicemac);

  // int32 State = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.ModifyDeviceState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sevicemac_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceLog) */ {
 public:
  DeviceLog();
  virtual ~DeviceLog();

  DeviceLog(const DeviceLog& from);

  inline DeviceLog& operator=(const DeviceLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceLog(DeviceLog&& from) noexcept
    : DeviceLog() {
    *this = ::std::move(from);
  }

  inline DeviceLog& operator=(DeviceLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceLog* internal_default_instance() {
    return reinterpret_cast<const DeviceLog*>(
               &_DeviceLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DeviceLog* other);
  friend void swap(DeviceLog& a, DeviceLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceLog* New() const final {
    return CreateMaybeMessage<DeviceLog>(NULL);
  }

  DeviceLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceLog& from);
  void MergeFrom(const DeviceLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes CardId = 3;
  void clear_cardid();
  static const int kCardIdFieldNumber = 3;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const void* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // bytes Message = 7;
  void clear_message();
  static const int kMessageFieldNumber = 7;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 LogTime = 2;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 2;
  ::google::protobuf::int32 logtime() const;
  void set_logtime(::google::protobuf::int32 value);

  // int32 CardType = 4;
  void clear_cardtype();
  static const int kCardTypeFieldNumber = 4;
  ::google::protobuf::int32 cardtype() const;
  void set_cardtype(::google::protobuf::int32 value);

  // int32 FunType = 5;
  void clear_funtype();
  static const int kFunTypeFieldNumber = 5;
  ::google::protobuf::int32 funtype() const;
  void set_funtype(::google::protobuf::int32 value);

  // int32 LogType = 6;
  void clear_logtype();
  static const int kLogTypeFieldNumber = 6;
  ::google::protobuf::int32 logtype() const;
  void set_logtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 logtime_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 funtype_;
  ::google::protobuf::int32 logtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpLogTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.UpLogTable) */ {
 public:
  UpLogTable();
  virtual ~UpLogTable();

  UpLogTable(const UpLogTable& from);

  inline UpLogTable& operator=(const UpLogTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpLogTable(UpLogTable&& from) noexcept
    : UpLogTable() {
    *this = ::std::move(from);
  }

  inline UpLogTable& operator=(UpLogTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpLogTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpLogTable* internal_default_instance() {
    return reinterpret_cast<const UpLogTable*>(
               &_UpLogTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpLogTable* other);
  friend void swap(UpLogTable& a, UpLogTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpLogTable* New() const final {
    return CreateMaybeMessage<UpLogTable>(NULL);
  }

  UpLogTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpLogTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpLogTable& from);
  void MergeFrom(const UpLogTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpLogTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.DeviceLog Logs = 1;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 1;
  ::ServerProtocol::DeviceLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceLog >*
      mutable_logs();
  const ::ServerProtocol::DeviceLog& logs(int index) const;
  ::ServerProtocol::DeviceLog* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceLog >&
      logs() const;

  // bytes Mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 DeviceCrc = 4;
  void clear_devicecrc();
  static const int kDeviceCrcFieldNumber = 4;
  ::google::protobuf::int32 devicecrc() const;
  void set_devicecrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.UpLogTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceLog > logs_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 devicecrc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.UpLogResponse) */ {
 public:
  UpLogResponse();
  virtual ~UpLogResponse();

  UpLogResponse(const UpLogResponse& from);

  inline UpLogResponse& operator=(const UpLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpLogResponse(UpLogResponse&& from) noexcept
    : UpLogResponse() {
    *this = ::std::move(from);
  }

  inline UpLogResponse& operator=(UpLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpLogResponse* internal_default_instance() {
    return reinterpret_cast<const UpLogResponse*>(
               &_UpLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UpLogResponse* other);
  friend void swap(UpLogResponse& a, UpLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpLogResponse* New() const final {
    return CreateMaybeMessage<UpLogResponse>(NULL);
  }

  UpLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpLogResponse& from);
  void MergeFrom(const UpLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const void* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // int32 Count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // int32 DeviceCrcState = 3;
  void clear_devicecrcstate();
  static const int kDeviceCrcStateFieldNumber = 3;
  ::google::protobuf::int32 devicecrcstate() const;
  void set_devicecrcstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.UpLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 devicecrcstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GWUPDeviceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.GWUPDeviceData) */ {
 public:
  GWUPDeviceData();
  virtual ~GWUPDeviceData();

  GWUPDeviceData(const GWUPDeviceData& from);

  inline GWUPDeviceData& operator=(const GWUPDeviceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GWUPDeviceData(GWUPDeviceData&& from) noexcept
    : GWUPDeviceData() {
    *this = ::std::move(from);
  }

  inline GWUPDeviceData& operator=(GWUPDeviceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWUPDeviceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GWUPDeviceData* internal_default_instance() {
    return reinterpret_cast<const GWUPDeviceData*>(
               &_GWUPDeviceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GWUPDeviceData* other);
  friend void swap(GWUPDeviceData& a, GWUPDeviceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GWUPDeviceData* New() const final {
    return CreateMaybeMessage<GWUPDeviceData>(NULL);
  }

  GWUPDeviceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GWUPDeviceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GWUPDeviceData& from);
  void MergeFrom(const GWUPDeviceData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GWUPDeviceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
  int gwdeviceinfolist_size() const;
  void clear_gwdeviceinfolist();
  static const int kGWDeviceInfoListFieldNumber = 1;
  ::ServerProtocol::GWDeviceInfo* mutable_gwdeviceinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >*
      mutable_gwdeviceinfolist();
  const ::ServerProtocol::GWDeviceInfo& gwdeviceinfolist(int index) const;
  ::ServerProtocol::GWDeviceInfo* add_gwdeviceinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >&
      gwdeviceinfolist() const;

  // @@protoc_insertion_point(class_scope:ServerProtocol.GWUPDeviceData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo > gwdeviceinfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GWDeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.GWDeviceInfo) */ {
 public:
  GWDeviceInfo();
  virtual ~GWDeviceInfo();

  GWDeviceInfo(const GWDeviceInfo& from);

  inline GWDeviceInfo& operator=(const GWDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GWDeviceInfo(GWDeviceInfo&& from) noexcept
    : GWDeviceInfo() {
    *this = ::std::move(from);
  }

  inline GWDeviceInfo& operator=(GWDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GWDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const GWDeviceInfo*>(
               &_GWDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GWDeviceInfo* other);
  friend void swap(GWDeviceInfo& a, GWDeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GWDeviceInfo* New() const final {
    return CreateMaybeMessage<GWDeviceInfo>(NULL);
  }

  GWDeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GWDeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GWDeviceInfo& from);
  void MergeFrom(const GWDeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GWDeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes DeviceModel = 2;
  void clear_devicemodel();
  static const int kDeviceModelFieldNumber = 2;
  const ::std::string& devicemodel() const;
  void set_devicemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemodel(::std::string&& value);
  #endif
  void set_devicemodel(const char* value);
  void set_devicemodel(const void* value, size_t size);
  ::std::string* mutable_devicemodel();
  ::std::string* release_devicemodel();
  void set_allocated_devicemodel(::std::string* devicemodel);

  // bytes Message = 12;
  void clear_message();
  static const int kMessageFieldNumber = 12;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
  bool has_deviceproperty() const;
  void clear_deviceproperty();
  static const int kDevicePropertyFieldNumber = 13;
  private:
  const ::ServerProtocol::GWDeviceProperty& _internal_deviceproperty() const;
  public:
  const ::ServerProtocol::GWDeviceProperty& deviceproperty() const;
  ::ServerProtocol::GWDeviceProperty* release_deviceproperty();
  ::ServerProtocol::GWDeviceProperty* mutable_deviceproperty();
  void set_allocated_deviceproperty(::ServerProtocol::GWDeviceProperty* deviceproperty);

  // uint32 FwVer = 3;
  void clear_fwver();
  static const int kFwVerFieldNumber = 3;
  ::google::protobuf::uint32 fwver() const;
  void set_fwver(::google::protobuf::uint32 value);

  // uint32 HwVer = 4;
  void clear_hwver();
  static const int kHwVerFieldNumber = 4;
  ::google::protobuf::uint32 hwver() const;
  void set_hwver(::google::protobuf::uint32 value);

  // uint32 SysVer = 5;
  void clear_sysver();
  static const int kSysVerFieldNumber = 5;
  ::google::protobuf::uint32 sysver() const;
  void set_sysver(::google::protobuf::uint32 value);

  // uint32 OtherVer = 6;
  void clear_otherver();
  static const int kOtherVerFieldNumber = 6;
  ::google::protobuf::uint32 otherver() const;
  void set_otherver(::google::protobuf::uint32 value);

  // uint32 CurTime = 7;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 7;
  ::google::protobuf::uint32 curtime() const;
  void set_curtime(::google::protobuf::uint32 value);

  // uint32 State = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // uint32 Voltage = 9;
  void clear_voltage();
  static const int kVoltageFieldNumber = 9;
  ::google::protobuf::uint32 voltage() const;
  void set_voltage(::google::protobuf::uint32 value);

  // uint32 Temperature = 10;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 10;
  ::google::protobuf::uint32 temperature() const;
  void set_temperature(::google::protobuf::uint32 value);

  // uint32 Voice = 11;
  void clear_voice();
  static const int kVoiceFieldNumber = 11;
  ::google::protobuf::uint32 voice() const;
  void set_voice(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.GWDeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr devicemodel_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ServerProtocol::GWDeviceProperty* deviceproperty_;
  ::google::protobuf::uint32 fwver_;
  ::google::protobuf::uint32 hwver_;
  ::google::protobuf::uint32 sysver_;
  ::google::protobuf::uint32 otherver_;
  ::google::protobuf::uint32 curtime_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 voltage_;
  ::google::protobuf::uint32 temperature_;
  ::google::protobuf::uint32 voice_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GWDeviceProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.GWDeviceProperty) */ {
 public:
  GWDeviceProperty();
  virtual ~GWDeviceProperty();

  GWDeviceProperty(const GWDeviceProperty& from);

  inline GWDeviceProperty& operator=(const GWDeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GWDeviceProperty(GWDeviceProperty&& from) noexcept
    : GWDeviceProperty() {
    *this = ::std::move(from);
  }

  inline GWDeviceProperty& operator=(GWDeviceProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWDeviceProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GWDeviceProperty* internal_default_instance() {
    return reinterpret_cast<const GWDeviceProperty*>(
               &_GWDeviceProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GWDeviceProperty* other);
  friend void swap(GWDeviceProperty& a, GWDeviceProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GWDeviceProperty* New() const final {
    return CreateMaybeMessage<GWDeviceProperty>(NULL);
  }

  GWDeviceProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GWDeviceProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GWDeviceProperty& from);
  void MergeFrom(const GWDeviceProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GWDeviceProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 RootFetIdx = 1;
  void clear_rootfetidx();
  static const int kRootFetIdxFieldNumber = 1;
  ::google::protobuf::uint32 rootfetidx() const;
  void set_rootfetidx(::google::protobuf::uint32 value);

  // uint32 DevId = 2;
  void clear_devid();
  static const int kDevIdFieldNumber = 2;
  ::google::protobuf::uint32 devid() const;
  void set_devid(::google::protobuf::uint32 value);

  // uint32 DrvIdx = 3;
  void clear_drvidx();
  static const int kDrvIdxFieldNumber = 3;
  ::google::protobuf::uint32 drvidx() const;
  void set_drvidx(::google::protobuf::uint32 value);

  // uint32 PowerLevel = 4;
  void clear_powerlevel();
  static const int kPowerLevelFieldNumber = 4;
  ::google::protobuf::uint32 powerlevel() const;
  void set_powerlevel(::google::protobuf::uint32 value);

  // bool Active = 5;
  void clear_active();
  static const int kActiveFieldNumber = 5;
  bool active() const;
  void set_active(bool value);

  // uint32 FetCrc = 6;
  void clear_fetcrc();
  static const int kFetCrcFieldNumber = 6;
  ::google::protobuf::uint32 fetcrc() const;
  void set_fetcrc(::google::protobuf::uint32 value);

  // uint32 GrpFeature = 7;
  void clear_grpfeature();
  static const int kGrpFeatureFieldNumber = 7;
  ::google::protobuf::uint32 grpfeature() const;
  void set_grpfeature(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.GWDeviceProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 rootfetidx_;
  ::google::protobuf::uint32 devid_;
  ::google::protobuf::uint32 drvidx_;
  ::google::protobuf::uint32 powerlevel_;
  bool active_;
  ::google::protobuf::uint32 fetcrc_;
  ::google::protobuf::uint32 grpfeature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SensorState) */ {
 public:
  SensorState();
  virtual ~SensorState();

  SensorState(const SensorState& from);

  inline SensorState& operator=(const SensorState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorState(SensorState&& from) noexcept
    : SensorState() {
    *this = ::std::move(from);
  }

  inline SensorState& operator=(SensorState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorState* internal_default_instance() {
    return reinterpret_cast<const SensorState*>(
               &_SensorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SensorState* other);
  friend void swap(SensorState& a, SensorState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorState* New() const final {
    return CreateMaybeMessage<SensorState>(NULL);
  }

  SensorState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorState& from);
  void MergeFrom(const SensorState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Values = 3;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // uint32 FetIdx = 2;
  void clear_fetidx();
  static const int kFetIdxFieldNumber = 2;
  ::google::protobuf::uint32 fetidx() const;
  void set_fetidx(::google::protobuf::uint32 value);

  // uint32 Changed = 4;
  void clear_changed();
  static const int kChangedFieldNumber = 4;
  ::google::protobuf::uint32 changed() const;
  void set_changed(::google::protobuf::uint32 value);

  // uint32 Time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SensorState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  ::google::protobuf::uint32 fetidx_;
  ::google::protobuf::uint32 changed_;
  ::google::protobuf::uint32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.StateTable) */ {
 public:
  StateTable();
  virtual ~StateTable();

  StateTable(const StateTable& from);

  inline StateTable& operator=(const StateTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateTable(StateTable&& from) noexcept
    : StateTable() {
    *this = ::std::move(from);
  }

  inline StateTable& operator=(StateTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateTable* internal_default_instance() {
    return reinterpret_cast<const StateTable*>(
               &_StateTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(StateTable* other);
  friend void swap(StateTable& a, StateTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateTable* New() const final {
    return CreateMaybeMessage<StateTable>(NULL);
  }

  StateTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateTable& from);
  void MergeFrom(const StateTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.SensorState SensorStatelist = 2;
  int sensorstatelist_size() const;
  void clear_sensorstatelist();
  static const int kSensorStatelistFieldNumber = 2;
  ::ServerProtocol::SensorState* mutable_sensorstatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SensorState >*
      mutable_sensorstatelist();
  const ::ServerProtocol::SensorState& sensorstatelist(int index) const;
  ::ServerProtocol::SensorState* add_sensorstatelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SensorState >&
      sensorstatelist() const;

  // bytes GwMac = 1;
  void clear_gwmac();
  static const int kGwMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.StateTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SensorState > sensorstatelist_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceDelete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceDelete) */ {
 public:
  DeviceDelete();
  virtual ~DeviceDelete();

  DeviceDelete(const DeviceDelete& from);

  inline DeviceDelete& operator=(const DeviceDelete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceDelete(DeviceDelete&& from) noexcept
    : DeviceDelete() {
    *this = ::std::move(from);
  }

  inline DeviceDelete& operator=(DeviceDelete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDelete* internal_default_instance() {
    return reinterpret_cast<const DeviceDelete*>(
               &_DeviceDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DeviceDelete* other);
  friend void swap(DeviceDelete& a, DeviceDelete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceDelete* New() const final {
    return CreateMaybeMessage<DeviceDelete>(NULL);
  }

  DeviceDelete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDelete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceDelete& from);
  void MergeFrom(const DeviceDelete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDelete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 2;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 ActionType = 1;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 1;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceDelete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 actiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GWFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.GWFeature) */ {
 public:
  GWFeature();
  virtual ~GWFeature();

  GWFeature(const GWFeature& from);

  inline GWFeature& operator=(const GWFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GWFeature(GWFeature&& from) noexcept
    : GWFeature() {
    *this = ::std::move(from);
  }

  inline GWFeature& operator=(GWFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GWFeature* internal_default_instance() {
    return reinterpret_cast<const GWFeature*>(
               &_GWFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GWFeature* other);
  friend void swap(GWFeature& a, GWFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GWFeature* New() const final {
    return CreateMaybeMessage<GWFeature>(NULL);
  }

  GWFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GWFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GWFeature& from);
  void MergeFrom(const GWFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GWFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 4;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 4;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // int32 Level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 Fet = 2;
  void clear_fet();
  static const int kFetFieldNumber = 2;
  ::google::protobuf::int32 fet() const;
  void set_fet(::google::protobuf::int32 value);

  // int32 RootIndex = 3;
  void clear_rootindex();
  static const int kRootIndexFieldNumber = 3;
  ::google::protobuf::int32 rootindex() const;
  void set_rootindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.GWFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fet_;
  ::google::protobuf::int32 rootindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceConfig) */ {
 public:
  DeviceConfig();
  virtual ~DeviceConfig();

  DeviceConfig(const DeviceConfig& from);

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DeviceConfig* other);
  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return CreateMaybeMessage<DeviceConfig>(NULL);
  }

  DeviceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceConfig& from);
  void MergeFrom(const DeviceConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes ConfigData = 4;
  void clear_configdata();
  static const int kConfigDataFieldNumber = 4;
  const ::std::string& configdata() const;
  void set_configdata(const ::std::string& value);
  #if LANG_CXX11
  void set_configdata(::std::string&& value);
  #endif
  void set_configdata(const char* value);
  void set_configdata(const void* value, size_t size);
  ::std::string* mutable_configdata();
  ::std::string* release_configdata();
  void set_allocated_configdata(::std::string* configdata);

  // int32 CurTime = 2;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 2;
  ::google::protobuf::int32 curtime() const;
  void set_curtime(::google::protobuf::int32 value);

  // int32 ConfigType = 3;
  void clear_configtype();
  static const int kConfigTypeFieldNumber = 3;
  ::google::protobuf::int32 configtype() const;
  void set_configtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr configdata_;
  ::google::protobuf::int32 curtime_;
  ::google::protobuf::int32 configtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transmission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.Transmission) */ {
 public:
  Transmission();
  virtual ~Transmission();

  Transmission(const Transmission& from);

  inline Transmission& operator=(const Transmission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transmission(Transmission&& from) noexcept
    : Transmission() {
    *this = ::std::move(from);
  }

  inline Transmission& operator=(Transmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transmission* internal_default_instance() {
    return reinterpret_cast<const Transmission*>(
               &_Transmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Transmission* other);
  friend void swap(Transmission& a, Transmission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transmission* New() const final {
    return CreateMaybeMessage<Transmission>(NULL);
  }

  Transmission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transmission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transmission& from);
  void MergeFrom(const Transmission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transmission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_operation(::std::string&& value);
  #endif
  void set_operation(const char* value);
  void set_operation(const void* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);

  // bytes Data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 CurTime = 3;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 3;
  ::google::protobuf::int32 curtime() const;
  void set_curtime(::google::protobuf::int32 value);

  // int32 Type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.Transmission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 curtime_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransmissionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.TransmissionResponse) */ {
 public:
  TransmissionResponse();
  virtual ~TransmissionResponse();

  TransmissionResponse(const TransmissionResponse& from);

  inline TransmissionResponse& operator=(const TransmissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransmissionResponse(TransmissionResponse&& from) noexcept
    : TransmissionResponse() {
    *this = ::std::move(from);
  }

  inline TransmissionResponse& operator=(TransmissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransmissionResponse* internal_default_instance() {
    return reinterpret_cast<const TransmissionResponse*>(
               &_TransmissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TransmissionResponse* other);
  friend void swap(TransmissionResponse& a, TransmissionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransmissionResponse* New() const final {
    return CreateMaybeMessage<TransmissionResponse>(NULL);
  }

  TransmissionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransmissionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransmissionResponse& from);
  void MergeFrom(const TransmissionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmissionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  const ::std::string& operation() const;
  void set_operation(const ::std::string& value);
  #if LANG_CXX11
  void set_operation(::std::string&& value);
  #endif
  void set_operation(const char* value);
  void set_operation(const void* value, size_t size);
  ::std::string* mutable_operation();
  ::std::string* release_operation();
  void set_allocated_operation(::std::string* operation);

  // bytes Data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 Type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.TransmissionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr operation_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WhiteBlackList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.WhiteBlackList) */ {
 public:
  WhiteBlackList();
  virtual ~WhiteBlackList();

  WhiteBlackList(const WhiteBlackList& from);

  inline WhiteBlackList& operator=(const WhiteBlackList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WhiteBlackList(WhiteBlackList&& from) noexcept
    : WhiteBlackList() {
    *this = ::std::move(from);
  }

  inline WhiteBlackList& operator=(WhiteBlackList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiteBlackList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhiteBlackList* internal_default_instance() {
    return reinterpret_cast<const WhiteBlackList*>(
               &_WhiteBlackList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(WhiteBlackList* other);
  friend void swap(WhiteBlackList& a, WhiteBlackList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WhiteBlackList* New() const final {
    return CreateMaybeMessage<WhiteBlackList>(NULL);
  }

  WhiteBlackList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WhiteBlackList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WhiteBlackList& from);
  void MergeFrom(const WhiteBlackList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhiteBlackList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // bytes DeviceMac = 2;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes CardId = 3;
  void clear_cardid();
  static const int kCardIdFieldNumber = 3;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const void* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // bytes Data = 11;
  void clear_data();
  static const int kDataFieldNumber = 11;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 FetIdx = 4;
  void clear_fetidx();
  static const int kFetIdxFieldNumber = 4;
  ::google::protobuf::int32 fetidx() const;
  void set_fetidx(::google::protobuf::int32 value);

  // int32 RecordId = 5;
  void clear_recordid();
  static const int kRecordIdFieldNumber = 5;
  ::google::protobuf::int32 recordid() const;
  void set_recordid(::google::protobuf::int32 value);

  // int32 StartTime = 6;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // int32 EndTime = 7;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // int32 CardType = 8;
  void clear_cardtype();
  static const int kCardTypeFieldNumber = 8;
  ::google::protobuf::int32 cardtype() const;
  void set_cardtype(::google::protobuf::int32 value);

  // int32 FunType = 9;
  void clear_funtype();
  static const int kFunTypeFieldNumber = 9;
  ::google::protobuf::int32 funtype() const;
  void set_funtype(::google::protobuf::int32 value);

  // int32 ListType = 10;
  void clear_listtype();
  static const int kListTypeFieldNumber = 10;
  ::google::protobuf::int32 listtype() const;
  void set_listtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.WhiteBlackList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 fetidx_;
  ::google::protobuf::int32 recordid_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 funtype_;
  ::google::protobuf::int32 listtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DispatchWBListResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DispatchWBListResult) */ {
 public:
  DispatchWBListResult();
  virtual ~DispatchWBListResult();

  DispatchWBListResult(const DispatchWBListResult& from);

  inline DispatchWBListResult& operator=(const DispatchWBListResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DispatchWBListResult(DispatchWBListResult&& from) noexcept
    : DispatchWBListResult() {
    *this = ::std::move(from);
  }

  inline DispatchWBListResult& operator=(DispatchWBListResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DispatchWBListResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispatchWBListResult* internal_default_instance() {
    return reinterpret_cast<const DispatchWBListResult*>(
               &_DispatchWBListResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DispatchWBListResult* other);
  friend void swap(DispatchWBListResult& a, DispatchWBListResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DispatchWBListResult* New() const final {
    return CreateMaybeMessage<DispatchWBListResult>(NULL);
  }

  DispatchWBListResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DispatchWBListResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DispatchWBListResult& from);
  void MergeFrom(const DispatchWBListResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispatchWBListResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 RecordId = 1;
  void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  ::google::protobuf::int32 recordid() const;
  void set_recordid(::google::protobuf::int32 value);

  // int32 Result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DispatchWBListResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 recordid_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.DeviceTable) */ {
 public:
  DeviceTable();
  virtual ~DeviceTable();

  DeviceTable(const DeviceTable& from);

  inline DeviceTable& operator=(const DeviceTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceTable(DeviceTable&& from) noexcept
    : DeviceTable() {
    *this = ::std::move(from);
  }

  inline DeviceTable& operator=(DeviceTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceTable* internal_default_instance() {
    return reinterpret_cast<const DeviceTable*>(
               &_DeviceTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DeviceTable* other);
  friend void swap(DeviceTable& a, DeviceTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceTable* New() const final {
    return CreateMaybeMessage<DeviceTable>(NULL);
  }

  DeviceTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceTable& from);
  void MergeFrom(const DeviceTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
  int deviceinfolist_size() const;
  void clear_deviceinfolist();
  static const int kDeviceInfoListFieldNumber = 2;
  ::ServerProtocol::GWDeviceInfo* mutable_deviceinfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >*
      mutable_deviceinfolist();
  const ::ServerProtocol::GWDeviceInfo& deviceinfolist(int index) const;
  ::ServerProtocol::GWDeviceInfo* add_deviceinfolist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >&
      deviceinfolist() const;

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // int32 Type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.DeviceTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo > deviceinfolist_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.FeatureTable) */ {
 public:
  FeatureTable();
  virtual ~FeatureTable();

  FeatureTable(const FeatureTable& from);

  inline FeatureTable& operator=(const FeatureTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureTable(FeatureTable&& from) noexcept
    : FeatureTable() {
    *this = ::std::move(from);
  }

  inline FeatureTable& operator=(FeatureTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureTable* internal_default_instance() {
    return reinterpret_cast<const FeatureTable*>(
               &_FeatureTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(FeatureTable* other);
  friend void swap(FeatureTable& a, FeatureTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureTable* New() const final {
    return CreateMaybeMessage<FeatureTable>(NULL);
  }

  FeatureTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FeatureTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FeatureTable& from);
  void MergeFrom(const FeatureTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerProtocol.GWFeature FeatureList = 2;
  int featurelist_size() const;
  void clear_featurelist();
  static const int kFeatureListFieldNumber = 2;
  ::ServerProtocol::GWFeature* mutable_featurelist(int index);
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWFeature >*
      mutable_featurelist();
  const ::ServerProtocol::GWFeature& featurelist(int index) const;
  ::ServerProtocol::GWFeature* add_featurelist();
  const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWFeature >&
      featurelist() const;

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // int32 Type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 DeviceCrc = 4;
  void clear_devicecrc();
  static const int kDeviceCrcFieldNumber = 4;
  ::google::protobuf::int32 devicecrc() const;
  void set_devicecrc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.FeatureTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWFeature > featurelist_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 devicecrc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoteOpen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.RemoteOpen) */ {
 public:
  RemoteOpen();
  virtual ~RemoteOpen();

  RemoteOpen(const RemoteOpen& from);

  inline RemoteOpen& operator=(const RemoteOpen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteOpen(RemoteOpen&& from) noexcept
    : RemoteOpen() {
    *this = ::std::move(from);
  }

  inline RemoteOpen& operator=(RemoteOpen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteOpen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteOpen* internal_default_instance() {
    return reinterpret_cast<const RemoteOpen*>(
               &_RemoteOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(RemoteOpen* other);
  friend void swap(RemoteOpen& a, RemoteOpen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteOpen* New() const final {
    return CreateMaybeMessage<RemoteOpen>(NULL);
  }

  RemoteOpen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteOpen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteOpen& from);
  void MergeFrom(const RemoteOpen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteOpen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes CardId = 2;
  void clear_cardid();
  static const int kCardIdFieldNumber = 2;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const void* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // bytes Data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 CurTime = 3;
  void clear_curtime();
  static const int kCurTimeFieldNumber = 3;
  ::google::protobuf::int32 curtime() const;
  void set_curtime(::google::protobuf::int32 value);

  // int32 Action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::protobuf::int32 action() const;
  void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.RemoteOpen)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 curtime_;
  ::google::protobuf::int32 action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AIOT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.AIOT) */ {
 public:
  AIOT();
  virtual ~AIOT();

  AIOT(const AIOT& from);

  inline AIOT& operator=(const AIOT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AIOT(AIOT&& from) noexcept
    : AIOT() {
    *this = ::std::move(from);
  }

  inline AIOT& operator=(AIOT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AIOT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIOT* internal_default_instance() {
    return reinterpret_cast<const AIOT*>(
               &_AIOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(AIOT* other);
  friend void swap(AIOT& a, AIOT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AIOT* New() const final {
    return CreateMaybeMessage<AIOT>(NULL);
  }

  AIOT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AIOT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AIOT& from);
  void MergeFrom(const AIOT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIOT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ParaList = 5;
  int paralist_size() const;
  void clear_paralist();
  static const int kParaListFieldNumber = 5;
  ::google::protobuf::uint32 paralist(int index) const;
  void set_paralist(int index, ::google::protobuf::uint32 value);
  void add_paralist(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      paralist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_paralist();

  // bytes DeviceMac = 1;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 1;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes GWMac = 7;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 7;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // .ServerProtocol.RemoteOpen RemoteAoit = 9;
  bool has_remoteaoit() const;
  void clear_remoteaoit();
  static const int kRemoteAoitFieldNumber = 9;
  private:
  const ::ServerProtocol::RemoteOpen& _internal_remoteaoit() const;
  public:
  const ::ServerProtocol::RemoteOpen& remoteaoit() const;
  ::ServerProtocol::RemoteOpen* release_remoteaoit();
  ::ServerProtocol::RemoteOpen* mutable_remoteaoit();
  void set_allocated_remoteaoit(::ServerProtocol::RemoteOpen* remoteaoit);

  // .ServerProtocol.ControlCommand Command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::ServerProtocol::ControlCommand command() const;
  void set_command(::ServerProtocol::ControlCommand value);

  // int32 FetIdx = 3;
  void clear_fetidx();
  static const int kFetIdxFieldNumber = 3;
  ::google::protobuf::int32 fetidx() const;
  void set_fetidx(::google::protobuf::int32 value);

  // int32 Feature = 4;
  void clear_feature();
  static const int kFeatureFieldNumber = 4;
  ::google::protobuf::int32 feature() const;
  void set_feature(::google::protobuf::int32 value);

  // int32 userId = 8;
  void clear_userid();
  static const int kUserIdFieldNumber = 8;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int64 BeginTime = 11;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 11;
  ::google::protobuf::int64 begintime() const;
  void set_begintime(::google::protobuf::int64 value);

  // int64 EndTime = 12;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 12;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // int32 ActionType = 10;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 10;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.AIOT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > paralist_;
  mutable int _paralist_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::ServerProtocol::RemoteOpen* remoteaoit_;
  int command_;
  ::google::protobuf::int32 fetidx_;
  ::google::protobuf::int32 feature_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 actiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NBAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.NBAnswer) */ {
 public:
  NBAnswer();
  virtual ~NBAnswer();

  NBAnswer(const NBAnswer& from);

  inline NBAnswer& operator=(const NBAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NBAnswer(NBAnswer&& from) noexcept
    : NBAnswer() {
    *this = ::std::move(from);
  }

  inline NBAnswer& operator=(NBAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NBAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NBAnswer* internal_default_instance() {
    return reinterpret_cast<const NBAnswer*>(
               &_NBAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(NBAnswer* other);
  friend void swap(NBAnswer& a, NBAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NBAnswer* New() const final {
    return CreateMaybeMessage<NBAnswer>(NULL);
  }

  NBAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NBAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NBAnswer& from);
  void MergeFrom(const NBAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NBAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes AIOTCommand = 2;
  void clear_aiotcommand();
  static const int kAIOTCommandFieldNumber = 2;
  const ::std::string& aiotcommand() const;
  void set_aiotcommand(const ::std::string& value);
  #if LANG_CXX11
  void set_aiotcommand(::std::string&& value);
  #endif
  void set_aiotcommand(const char* value);
  void set_aiotcommand(const void* value, size_t size);
  ::std::string* mutable_aiotcommand();
  ::std::string* release_aiotcommand();
  void set_allocated_aiotcommand(::std::string* aiotcommand);

  // bytes WhiteBlackList = 3;
  void clear_whiteblacklist();
  static const int kWhiteBlackListFieldNumber = 3;
  const ::std::string& whiteblacklist() const;
  void set_whiteblacklist(const ::std::string& value);
  #if LANG_CXX11
  void set_whiteblacklist(::std::string&& value);
  #endif
  void set_whiteblacklist(const char* value);
  void set_whiteblacklist(const void* value, size_t size);
  ::std::string* mutable_whiteblacklist();
  ::std::string* release_whiteblacklist();
  void set_allocated_whiteblacklist(::std::string* whiteblacklist);

  // int32 State = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.NBAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr aiotcommand_;
  ::google::protobuf::internal::ArenaStringPtr whiteblacklist_;
  ::google::protobuf::int32 state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MqttSubscribeInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.MqttSubscribeInit) */ {
 public:
  MqttSubscribeInit();
  virtual ~MqttSubscribeInit();

  MqttSubscribeInit(const MqttSubscribeInit& from);

  inline MqttSubscribeInit& operator=(const MqttSubscribeInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MqttSubscribeInit(MqttSubscribeInit&& from) noexcept
    : MqttSubscribeInit() {
    *this = ::std::move(from);
  }

  inline MqttSubscribeInit& operator=(MqttSubscribeInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MqttSubscribeInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MqttSubscribeInit* internal_default_instance() {
    return reinterpret_cast<const MqttSubscribeInit*>(
               &_MqttSubscribeInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(MqttSubscribeInit* other);
  friend void swap(MqttSubscribeInit& a, MqttSubscribeInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MqttSubscribeInit* New() const final {
    return CreateMaybeMessage<MqttSubscribeInit>(NULL);
  }

  MqttSubscribeInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MqttSubscribeInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MqttSubscribeInit& from);
  void MergeFrom(const MqttSubscribeInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MqttSubscribeInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // @@protoc_insertion_point(class_scope:ServerProtocol.MqttSubscribeInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeInitData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.SubscribeInitData) */ {
 public:
  SubscribeInitData();
  virtual ~SubscribeInitData();

  SubscribeInitData(const SubscribeInitData& from);

  inline SubscribeInitData& operator=(const SubscribeInitData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeInitData(SubscribeInitData&& from) noexcept
    : SubscribeInitData() {
    *this = ::std::move(from);
  }

  inline SubscribeInitData& operator=(SubscribeInitData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeInitData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeInitData* internal_default_instance() {
    return reinterpret_cast<const SubscribeInitData*>(
               &_SubscribeInitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SubscribeInitData* other);
  friend void swap(SubscribeInitData& a, SubscribeInitData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeInitData* New() const final {
    return CreateMaybeMessage<SubscribeInitData>(NULL);
  }

  SubscribeInitData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeInitData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeInitData& from);
  void MergeFrom(const SubscribeInitData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeInitData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes DeviceList = 2;
  int devicelist_size() const;
  void clear_devicelist();
  static const int kDeviceListFieldNumber = 2;
  const ::std::string& devicelist(int index) const;
  ::std::string* mutable_devicelist(int index);
  void set_devicelist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_devicelist(int index, ::std::string&& value);
  #endif
  void set_devicelist(int index, const char* value);
  void set_devicelist(int index, const void* value, size_t size);
  ::std::string* add_devicelist();
  void add_devicelist(const ::std::string& value);
  #if LANG_CXX11
  void add_devicelist(::std::string&& value);
  #endif
  void add_devicelist(const char* value);
  void add_devicelist(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& devicelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_devicelist();

  // bytes GWMac = 1;
  void clear_gwmac();
  static const int kGWMacFieldNumber = 1;
  const ::std::string& gwmac() const;
  void set_gwmac(const ::std::string& value);
  #if LANG_CXX11
  void set_gwmac(::std::string&& value);
  #endif
  void set_gwmac(const char* value);
  void set_gwmac(const void* value, size_t size);
  ::std::string* mutable_gwmac();
  ::std::string* release_gwmac();
  void set_allocated_gwmac(::std::string* gwmac);

  // int32 STime = 3;
  void clear_stime();
  static const int kSTimeFieldNumber = 3;
  ::google::protobuf::int32 stime() const;
  void set_stime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.SubscribeInitData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> devicelist_;
  ::google::protobuf::internal::ArenaStringPtr gwmac_;
  ::google::protobuf::int32 stime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerProtocol.ControlResponse) */ {
 public:
  ControlResponse();
  virtual ~ControlResponse();

  ControlResponse(const ControlResponse& from);

  inline ControlResponse& operator=(const ControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlResponse(ControlResponse&& from) noexcept
    : ControlResponse() {
    *this = ::std::move(from);
  }

  inline ControlResponse& operator=(ControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlResponse* internal_default_instance() {
    return reinterpret_cast<const ControlResponse*>(
               &_ControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ControlResponse* other);
  friend void swap(ControlResponse& a, ControlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlResponse* New() const final {
    return CreateMaybeMessage<ControlResponse>(NULL);
  }

  ControlResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlResponse& from);
  void MergeFrom(const ControlResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeviceMac = 2;
  void clear_devicemac();
  static const int kDeviceMacFieldNumber = 2;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const void* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // bytes Data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 FetIdx = 3;
  void clear_fetidx();
  static const int kFetIdxFieldNumber = 3;
  ::google::protobuf::int32 fetidx() const;
  void set_fetidx(::google::protobuf::int32 value);

  // int32 Time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerProtocol.ControlResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 fetidx_;
  ::google::protobuf::int32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DeviceProtocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionManager

// int32 VerType = 1;
inline void VersionManager::clear_vertype() {
  vertype_ = 0;
}
inline ::google::protobuf::int32 VersionManager::vertype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionManager.VerType)
  return vertype_;
}
inline void VersionManager::set_vertype(::google::protobuf::int32 value) {
  
  vertype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionManager.VerType)
}

// string InterFaceName = 2;
inline void VersionManager::clear_interfacename() {
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VersionManager::interfacename() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.VersionManager.InterFaceName)
  return interfacename_.GetNoArena();
}
inline void VersionManager::set_interfacename(const ::std::string& value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.VersionManager.InterFaceName)
}
#if LANG_CXX11
inline void VersionManager::set_interfacename(::std::string&& value) {
  
  interfacename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.VersionManager.InterFaceName)
}
#endif
inline void VersionManager::set_interfacename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.VersionManager.InterFaceName)
}
inline void VersionManager::set_interfacename(const char* value, size_t size) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.VersionManager.InterFaceName)
}
inline ::std::string* VersionManager::mutable_interfacename() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.VersionManager.InterFaceName)
  return interfacename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionManager::release_interfacename() {
  // @@protoc_insertion_point(field_release:ServerProtocol.VersionManager.InterFaceName)
  
  return interfacename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionManager::set_allocated_interfacename(::std::string* interfacename) {
  if (interfacename != NULL) {
    
  } else {
    
  }
  interfacename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfacename);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.VersionManager.InterFaceName)
}

// -------------------------------------------------------------------

// DeleteGwDevice

// string GatewayMac = 1;
inline void DeleteGwDevice::clear_gatewaymac() {
  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteGwDevice::gatewaymac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeleteGwDevice.GatewayMac)
  return gatewaymac_.GetNoArena();
}
inline void DeleteGwDevice::set_gatewaymac(const ::std::string& value) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeleteGwDevice.GatewayMac)
}
#if LANG_CXX11
inline void DeleteGwDevice::set_gatewaymac(::std::string&& value) {
  
  gatewaymac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeleteGwDevice.GatewayMac)
}
#endif
inline void DeleteGwDevice::set_gatewaymac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeleteGwDevice.GatewayMac)
}
inline void DeleteGwDevice::set_gatewaymac(const char* value, size_t size) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeleteGwDevice.GatewayMac)
}
inline ::std::string* DeleteGwDevice::mutable_gatewaymac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeleteGwDevice.GatewayMac)
  return gatewaymac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteGwDevice::release_gatewaymac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeleteGwDevice.GatewayMac)
  
  return gatewaymac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteGwDevice::set_allocated_gatewaymac(::std::string* gatewaymac) {
  if (gatewaymac != NULL) {
    
  } else {
    
  }
  gatewaymac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewaymac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeleteGwDevice.GatewayMac)
}

// string DeviceMac = 2;
inline void DeleteGwDevice::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteGwDevice::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeleteGwDevice.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void DeleteGwDevice::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeleteGwDevice.DeviceMac)
}
#if LANG_CXX11
inline void DeleteGwDevice::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeleteGwDevice.DeviceMac)
}
#endif
inline void DeleteGwDevice::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeleteGwDevice.DeviceMac)
}
inline void DeleteGwDevice::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeleteGwDevice.DeviceMac)
}
inline ::std::string* DeleteGwDevice::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeleteGwDevice.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteGwDevice::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeleteGwDevice.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteGwDevice::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeleteGwDevice.DeviceMac)
}

// -------------------------------------------------------------------

// DeviceCrcVerification

// string GatewayMac = 1;
inline void DeviceCrcVerification::clear_gatewaymac() {
  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceCrcVerification::gatewaymac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceCrcVerification.GatewayMac)
  return gatewaymac_.GetNoArena();
}
inline void DeviceCrcVerification::set_gatewaymac(const ::std::string& value) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceCrcVerification.GatewayMac)
}
#if LANG_CXX11
inline void DeviceCrcVerification::set_gatewaymac(::std::string&& value) {
  
  gatewaymac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceCrcVerification.GatewayMac)
}
#endif
inline void DeviceCrcVerification::set_gatewaymac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceCrcVerification.GatewayMac)
}
inline void DeviceCrcVerification::set_gatewaymac(const char* value, size_t size) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceCrcVerification.GatewayMac)
}
inline ::std::string* DeviceCrcVerification::mutable_gatewaymac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceCrcVerification.GatewayMac)
  return gatewaymac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceCrcVerification::release_gatewaymac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceCrcVerification.GatewayMac)
  
  return gatewaymac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceCrcVerification::set_allocated_gatewaymac(::std::string* gatewaymac) {
  if (gatewaymac != NULL) {
    
  } else {
    
  }
  gatewaymac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewaymac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceCrcVerification.GatewayMac)
}

// int32 DeviceCrc = 2;
inline void DeviceCrcVerification::clear_devicecrc() {
  devicecrc_ = 0;
}
inline ::google::protobuf::int32 DeviceCrcVerification::devicecrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceCrcVerification.DeviceCrc)
  return devicecrc_;
}
inline void DeviceCrcVerification::set_devicecrc(::google::protobuf::int32 value) {
  
  devicecrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceCrcVerification.DeviceCrc)
}

// -------------------------------------------------------------------

// UpDeviceHeartReponse

// string GatewayMac = 1;
inline void UpDeviceHeartReponse::clear_gatewaymac() {
  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpDeviceHeartReponse::gatewaymac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
  return gatewaymac_.GetNoArena();
}
inline void UpDeviceHeartReponse::set_gatewaymac(const ::std::string& value) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
}
#if LANG_CXX11
inline void UpDeviceHeartReponse::set_gatewaymac(::std::string&& value) {
  
  gatewaymac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
}
#endif
inline void UpDeviceHeartReponse::set_gatewaymac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
}
inline void UpDeviceHeartReponse::set_gatewaymac(const char* value, size_t size) {
  
  gatewaymac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
}
inline ::std::string* UpDeviceHeartReponse::mutable_gatewaymac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
  return gatewaymac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpDeviceHeartReponse::release_gatewaymac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
  
  return gatewaymac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpDeviceHeartReponse::set_allocated_gatewaymac(::std::string* gatewaymac) {
  if (gatewaymac != NULL) {
    
  } else {
    
  }
  gatewaymac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewaymac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.UpDeviceHeartReponse.GatewayMac)
}

// int32 State = 2;
inline void UpDeviceHeartReponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 UpDeviceHeartReponse::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpDeviceHeartReponse.State)
  return state_;
}
inline void UpDeviceHeartReponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.UpDeviceHeartReponse.State)
}

// -------------------------------------------------------------------

// HmDataRequest

// bytes GWMac = 1;
inline void HmDataRequest::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmDataRequest::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmDataRequest.GWMac)
  return gwmac_.GetNoArena();
}
inline void HmDataRequest::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.HmDataRequest.GWMac)
}
#if LANG_CXX11
inline void HmDataRequest::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.HmDataRequest.GWMac)
}
#endif
inline void HmDataRequest::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.HmDataRequest.GWMac)
}
inline void HmDataRequest::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.HmDataRequest.GWMac)
}
inline ::std::string* HmDataRequest::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.HmDataRequest.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmDataRequest::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.HmDataRequest.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmDataRequest::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.HmDataRequest.GWMac)
}

// bytes DevMac = 2;
inline void HmDataRequest::clear_devmac() {
  devmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmDataRequest::devmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmDataRequest.DevMac)
  return devmac_.GetNoArena();
}
inline void HmDataRequest::set_devmac(const ::std::string& value) {
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.HmDataRequest.DevMac)
}
#if LANG_CXX11
inline void HmDataRequest::set_devmac(::std::string&& value) {
  
  devmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.HmDataRequest.DevMac)
}
#endif
inline void HmDataRequest::set_devmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.HmDataRequest.DevMac)
}
inline void HmDataRequest::set_devmac(const void* value, size_t size) {
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.HmDataRequest.DevMac)
}
inline ::std::string* HmDataRequest::mutable_devmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.HmDataRequest.DevMac)
  return devmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmDataRequest::release_devmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.HmDataRequest.DevMac)
  
  return devmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmDataRequest::set_allocated_devmac(::std::string* devmac) {
  if (devmac != NULL) {
    
  } else {
    
  }
  devmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.HmDataRequest.DevMac)
}

// -------------------------------------------------------------------

// HmDataReponse

// int32 State = 1;
inline void HmDataReponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 HmDataReponse::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmDataReponse.State)
  return state_;
}
inline void HmDataReponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmDataReponse.State)
}

// bytes DevMac = 2;
inline void HmDataReponse::clear_devmac() {
  devmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmDataReponse::devmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmDataReponse.DevMac)
  return devmac_.GetNoArena();
}
inline void HmDataReponse::set_devmac(const ::std::string& value) {
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.HmDataReponse.DevMac)
}
#if LANG_CXX11
inline void HmDataReponse::set_devmac(::std::string&& value) {
  
  devmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.HmDataReponse.DevMac)
}
#endif
inline void HmDataReponse::set_devmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.HmDataReponse.DevMac)
}
inline void HmDataReponse::set_devmac(const void* value, size_t size) {
  
  devmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.HmDataReponse.DevMac)
}
inline ::std::string* HmDataReponse::mutable_devmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.HmDataReponse.DevMac)
  return devmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmDataReponse::release_devmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.HmDataReponse.DevMac)
  
  return devmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmDataReponse::set_allocated_devmac(::std::string* devmac) {
  if (devmac != NULL) {
    
  } else {
    
  }
  devmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.HmDataReponse.DevMac)
}

// int64 UserId = 3;
inline void HmDataReponse::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmDataReponse::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.HmDataReponse.UserId)
  return userid_;
}
inline void HmDataReponse::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.HmDataReponse.UserId)
}

// -------------------------------------------------------------------

// NBDeviceDataRequest

// bytes GWMac = 1;
inline void NBDeviceDataRequest::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NBDeviceDataRequest::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NBDeviceDataRequest.GWMac)
  return gwmac_.GetNoArena();
}
inline void NBDeviceDataRequest::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.NBDeviceDataRequest.GWMac)
}
#if LANG_CXX11
inline void NBDeviceDataRequest::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.NBDeviceDataRequest.GWMac)
}
#endif
inline void NBDeviceDataRequest::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.NBDeviceDataRequest.GWMac)
}
inline void NBDeviceDataRequest::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.NBDeviceDataRequest.GWMac)
}
inline ::std::string* NBDeviceDataRequest::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.NBDeviceDataRequest.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NBDeviceDataRequest::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.NBDeviceDataRequest.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NBDeviceDataRequest::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.NBDeviceDataRequest.GWMac)
}

// -------------------------------------------------------------------

// DeviceOffline

// bytes GWMac = 1;
inline void DeviceOffline::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceOffline::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceOffline.GWMac)
  return gwmac_.GetNoArena();
}
inline void DeviceOffline::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceOffline.GWMac)
}
#if LANG_CXX11
inline void DeviceOffline::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceOffline.GWMac)
}
#endif
inline void DeviceOffline::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceOffline.GWMac)
}
inline void DeviceOffline::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceOffline.GWMac)
}
inline ::std::string* DeviceOffline::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceOffline.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceOffline::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceOffline.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceOffline::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceOffline.GWMac)
}

// -------------------------------------------------------------------

// SystemCommonResponse

// int32 State = 1;
inline void SystemCommonResponse::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 SystemCommonResponse::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemCommonResponse.State)
  return state_;
}
inline void SystemCommonResponse::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemCommonResponse.State)
}

// int32 CurTime = 2;
inline void SystemCommonResponse::clear_curtime() {
  curtime_ = 0;
}
inline ::google::protobuf::int32 SystemCommonResponse::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemCommonResponse.CurTime)
  return curtime_;
}
inline void SystemCommonResponse::set_curtime(::google::protobuf::int32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemCommonResponse.CurTime)
}

// string Remark = 3;
inline void SystemCommonResponse::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemCommonResponse::remark() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SystemCommonResponse.Remark)
  return remark_.GetNoArena();
}
inline void SystemCommonResponse::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SystemCommonResponse.Remark)
}
#if LANG_CXX11
inline void SystemCommonResponse::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SystemCommonResponse.Remark)
}
#endif
inline void SystemCommonResponse::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SystemCommonResponse.Remark)
}
inline void SystemCommonResponse::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SystemCommonResponse.Remark)
}
inline ::std::string* SystemCommonResponse::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SystemCommonResponse.Remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemCommonResponse::release_remark() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SystemCommonResponse.Remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemCommonResponse::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SystemCommonResponse.Remark)
}

// -------------------------------------------------------------------

// D2SCalibrationTime

// string MacAddress = 1;
inline void D2SCalibrationTime::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& D2SCalibrationTime::macaddress() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.D2SCalibrationTime.MacAddress)
  return macaddress_.GetNoArena();
}
inline void D2SCalibrationTime::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.D2SCalibrationTime.MacAddress)
}
#if LANG_CXX11
inline void D2SCalibrationTime::set_macaddress(::std::string&& value) {
  
  macaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.D2SCalibrationTime.MacAddress)
}
#endif
inline void D2SCalibrationTime::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.D2SCalibrationTime.MacAddress)
}
inline void D2SCalibrationTime::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.D2SCalibrationTime.MacAddress)
}
inline ::std::string* D2SCalibrationTime::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.D2SCalibrationTime.MacAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* D2SCalibrationTime::release_macaddress() {
  // @@protoc_insertion_point(field_release:ServerProtocol.D2SCalibrationTime.MacAddress)
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void D2SCalibrationTime::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.D2SCalibrationTime.MacAddress)
}

// -------------------------------------------------------------------

// ModifyDeviceState

// bytes SeviceMac = 1;
inline void ModifyDeviceState::clear_sevicemac() {
  sevicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyDeviceState::sevicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ModifyDeviceState.SeviceMac)
  return sevicemac_.GetNoArena();
}
inline void ModifyDeviceState::set_sevicemac(const ::std::string& value) {
  
  sevicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.ModifyDeviceState.SeviceMac)
}
#if LANG_CXX11
inline void ModifyDeviceState::set_sevicemac(::std::string&& value) {
  
  sevicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.ModifyDeviceState.SeviceMac)
}
#endif
inline void ModifyDeviceState::set_sevicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sevicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.ModifyDeviceState.SeviceMac)
}
inline void ModifyDeviceState::set_sevicemac(const void* value, size_t size) {
  
  sevicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.ModifyDeviceState.SeviceMac)
}
inline ::std::string* ModifyDeviceState::mutable_sevicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.ModifyDeviceState.SeviceMac)
  return sevicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyDeviceState::release_sevicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.ModifyDeviceState.SeviceMac)
  
  return sevicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyDeviceState::set_allocated_sevicemac(::std::string* sevicemac) {
  if (sevicemac != NULL) {
    
  } else {
    
  }
  sevicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sevicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.ModifyDeviceState.SeviceMac)
}

// int32 State = 2;
inline void ModifyDeviceState::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 ModifyDeviceState::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ModifyDeviceState.State)
  return state_;
}
inline void ModifyDeviceState::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ModifyDeviceState.State)
}

// -------------------------------------------------------------------

// DeviceLog

// bytes DeviceMac = 1;
inline void DeviceLog::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceLog::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void DeviceLog::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.DeviceMac)
}
#if LANG_CXX11
inline void DeviceLog::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceLog.DeviceMac)
}
#endif
inline void DeviceLog::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceLog.DeviceMac)
}
inline void DeviceLog::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceLog.DeviceMac)
}
inline ::std::string* DeviceLog::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceLog.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceLog::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceLog.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceLog::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceLog.DeviceMac)
}

// int32 LogTime = 2;
inline void DeviceLog::clear_logtime() {
  logtime_ = 0;
}
inline ::google::protobuf::int32 DeviceLog::logtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.LogTime)
  return logtime_;
}
inline void DeviceLog::set_logtime(::google::protobuf::int32 value) {
  
  logtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.LogTime)
}

// bytes CardId = 3;
inline void DeviceLog::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceLog::cardid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.CardId)
  return cardid_.GetNoArena();
}
inline void DeviceLog::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.CardId)
}
#if LANG_CXX11
inline void DeviceLog::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceLog.CardId)
}
#endif
inline void DeviceLog::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceLog.CardId)
}
inline void DeviceLog::set_cardid(const void* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceLog.CardId)
}
inline ::std::string* DeviceLog::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceLog.CardId)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceLog::release_cardid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceLog.CardId)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceLog::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceLog.CardId)
}

// int32 CardType = 4;
inline void DeviceLog::clear_cardtype() {
  cardtype_ = 0;
}
inline ::google::protobuf::int32 DeviceLog::cardtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.CardType)
  return cardtype_;
}
inline void DeviceLog::set_cardtype(::google::protobuf::int32 value) {
  
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.CardType)
}

// int32 FunType = 5;
inline void DeviceLog::clear_funtype() {
  funtype_ = 0;
}
inline ::google::protobuf::int32 DeviceLog::funtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.FunType)
  return funtype_;
}
inline void DeviceLog::set_funtype(::google::protobuf::int32 value) {
  
  funtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.FunType)
}

// int32 LogType = 6;
inline void DeviceLog::clear_logtype() {
  logtype_ = 0;
}
inline ::google::protobuf::int32 DeviceLog::logtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.LogType)
  return logtype_;
}
inline void DeviceLog::set_logtype(::google::protobuf::int32 value) {
  
  logtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.LogType)
}

// bytes Message = 7;
inline void DeviceLog::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceLog::message() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceLog.Message)
  return message_.GetNoArena();
}
inline void DeviceLog::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceLog.Message)
}
#if LANG_CXX11
inline void DeviceLog::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceLog.Message)
}
#endif
inline void DeviceLog::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceLog.Message)
}
inline void DeviceLog::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceLog.Message)
}
inline ::std::string* DeviceLog::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceLog.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceLog::release_message() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceLog.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceLog::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceLog.Message)
}

// -------------------------------------------------------------------

// UpLogTable

// repeated .ServerProtocol.DeviceLog Logs = 1;
inline int UpLogTable::logs_size() const {
  return logs_.size();
}
inline void UpLogTable::clear_logs() {
  logs_.Clear();
}
inline ::ServerProtocol::DeviceLog* UpLogTable::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.UpLogTable.Logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceLog >*
UpLogTable::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.UpLogTable.Logs)
  return &logs_;
}
inline const ::ServerProtocol::DeviceLog& UpLogTable::logs(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogTable.Logs)
  return logs_.Get(index);
}
inline ::ServerProtocol::DeviceLog* UpLogTable::add_logs() {
  // @@protoc_insertion_point(field_add:ServerProtocol.UpLogTable.Logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::DeviceLog >&
UpLogTable::logs() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.UpLogTable.Logs)
  return logs_;
}

// bytes Mac = 2;
inline void UpLogTable::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpLogTable::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogTable.Mac)
  return mac_.GetNoArena();
}
inline void UpLogTable::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogTable.Mac)
}
#if LANG_CXX11
inline void UpLogTable::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.UpLogTable.Mac)
}
#endif
inline void UpLogTable::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.UpLogTable.Mac)
}
inline void UpLogTable::set_mac(const void* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.UpLogTable.Mac)
}
inline ::std::string* UpLogTable::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.UpLogTable.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpLogTable::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.UpLogTable.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpLogTable::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.UpLogTable.Mac)
}

// int32 type = 3;
inline void UpLogTable::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 UpLogTable::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogTable.type)
  return type_;
}
inline void UpLogTable::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogTable.type)
}

// int32 DeviceCrc = 4;
inline void UpLogTable::clear_devicecrc() {
  devicecrc_ = 0;
}
inline ::google::protobuf::int32 UpLogTable::devicecrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogTable.DeviceCrc)
  return devicecrc_;
}
inline void UpLogTable::set_devicecrc(::google::protobuf::int32 value) {
  
  devicecrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogTable.DeviceCrc)
}

// -------------------------------------------------------------------

// UpLogResponse

// int32 Count = 1;
inline void UpLogResponse::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 UpLogResponse::count() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogResponse.Count)
  return count_;
}
inline void UpLogResponse::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogResponse.Count)
}

// bytes Mac = 2;
inline void UpLogResponse::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpLogResponse::mac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogResponse.Mac)
  return mac_.GetNoArena();
}
inline void UpLogResponse::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogResponse.Mac)
}
#if LANG_CXX11
inline void UpLogResponse::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.UpLogResponse.Mac)
}
#endif
inline void UpLogResponse::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.UpLogResponse.Mac)
}
inline void UpLogResponse::set_mac(const void* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.UpLogResponse.Mac)
}
inline ::std::string* UpLogResponse::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.UpLogResponse.Mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpLogResponse::release_mac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.UpLogResponse.Mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpLogResponse::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.UpLogResponse.Mac)
}

// int32 DeviceCrcState = 3;
inline void UpLogResponse::clear_devicecrcstate() {
  devicecrcstate_ = 0;
}
inline ::google::protobuf::int32 UpLogResponse::devicecrcstate() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.UpLogResponse.DeviceCrcState)
  return devicecrcstate_;
}
inline void UpLogResponse::set_devicecrcstate(::google::protobuf::int32 value) {
  
  devicecrcstate_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.UpLogResponse.DeviceCrcState)
}

// -------------------------------------------------------------------

// GWUPDeviceData

// repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
inline int GWUPDeviceData::gwdeviceinfolist_size() const {
  return gwdeviceinfolist_.size();
}
inline void GWUPDeviceData::clear_gwdeviceinfolist() {
  gwdeviceinfolist_.Clear();
}
inline ::ServerProtocol::GWDeviceInfo* GWUPDeviceData::mutable_gwdeviceinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWUPDeviceData.GWDeviceInfoList)
  return gwdeviceinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >*
GWUPDeviceData::mutable_gwdeviceinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.GWUPDeviceData.GWDeviceInfoList)
  return &gwdeviceinfolist_;
}
inline const ::ServerProtocol::GWDeviceInfo& GWUPDeviceData::gwdeviceinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWUPDeviceData.GWDeviceInfoList)
  return gwdeviceinfolist_.Get(index);
}
inline ::ServerProtocol::GWDeviceInfo* GWUPDeviceData::add_gwdeviceinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.GWUPDeviceData.GWDeviceInfoList)
  return gwdeviceinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >&
GWUPDeviceData::gwdeviceinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.GWUPDeviceData.GWDeviceInfoList)
  return gwdeviceinfolist_;
}

// -------------------------------------------------------------------

// GWDeviceInfo

// bytes DeviceMac = 1;
inline void GWDeviceInfo::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GWDeviceInfo::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void GWDeviceInfo::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.DeviceMac)
}
#if LANG_CXX11
inline void GWDeviceInfo::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GWDeviceInfo.DeviceMac)
}
#endif
inline void GWDeviceInfo::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GWDeviceInfo.DeviceMac)
}
inline void GWDeviceInfo::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GWDeviceInfo.DeviceMac)
}
inline ::std::string* GWDeviceInfo::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWDeviceInfo.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GWDeviceInfo::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GWDeviceInfo.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GWDeviceInfo::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GWDeviceInfo.DeviceMac)
}

// bytes DeviceModel = 2;
inline void GWDeviceInfo::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GWDeviceInfo::devicemodel() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.DeviceModel)
  return devicemodel_.GetNoArena();
}
inline void GWDeviceInfo::set_devicemodel(const ::std::string& value) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.DeviceModel)
}
#if LANG_CXX11
inline void GWDeviceInfo::set_devicemodel(::std::string&& value) {
  
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GWDeviceInfo.DeviceModel)
}
#endif
inline void GWDeviceInfo::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GWDeviceInfo.DeviceModel)
}
inline void GWDeviceInfo::set_devicemodel(const void* value, size_t size) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GWDeviceInfo.DeviceModel)
}
inline ::std::string* GWDeviceInfo::mutable_devicemodel() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWDeviceInfo.DeviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GWDeviceInfo::release_devicemodel() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GWDeviceInfo.DeviceModel)
  
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GWDeviceInfo::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    
  } else {
    
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GWDeviceInfo.DeviceModel)
}

// uint32 FwVer = 3;
inline void GWDeviceInfo::clear_fwver() {
  fwver_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::fwver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.FwVer)
  return fwver_;
}
inline void GWDeviceInfo::set_fwver(::google::protobuf::uint32 value) {
  
  fwver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.FwVer)
}

// uint32 HwVer = 4;
inline void GWDeviceInfo::clear_hwver() {
  hwver_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::hwver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.HwVer)
  return hwver_;
}
inline void GWDeviceInfo::set_hwver(::google::protobuf::uint32 value) {
  
  hwver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.HwVer)
}

// uint32 SysVer = 5;
inline void GWDeviceInfo::clear_sysver() {
  sysver_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::sysver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.SysVer)
  return sysver_;
}
inline void GWDeviceInfo::set_sysver(::google::protobuf::uint32 value) {
  
  sysver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.SysVer)
}

// uint32 OtherVer = 6;
inline void GWDeviceInfo::clear_otherver() {
  otherver_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::otherver() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.OtherVer)
  return otherver_;
}
inline void GWDeviceInfo::set_otherver(::google::protobuf::uint32 value) {
  
  otherver_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.OtherVer)
}

// uint32 CurTime = 7;
inline void GWDeviceInfo::clear_curtime() {
  curtime_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.CurTime)
  return curtime_;
}
inline void GWDeviceInfo::set_curtime(::google::protobuf::uint32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.CurTime)
}

// uint32 State = 8;
inline void GWDeviceInfo::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.State)
  return state_;
}
inline void GWDeviceInfo::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.State)
}

// uint32 Voltage = 9;
inline void GWDeviceInfo::clear_voltage() {
  voltage_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::voltage() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.Voltage)
  return voltage_;
}
inline void GWDeviceInfo::set_voltage(::google::protobuf::uint32 value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.Voltage)
}

// uint32 Temperature = 10;
inline void GWDeviceInfo::clear_temperature() {
  temperature_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::temperature() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.Temperature)
  return temperature_;
}
inline void GWDeviceInfo::set_temperature(::google::protobuf::uint32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.Temperature)
}

// uint32 Voice = 11;
inline void GWDeviceInfo::clear_voice() {
  voice_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceInfo::voice() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.Voice)
  return voice_;
}
inline void GWDeviceInfo::set_voice(::google::protobuf::uint32 value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.Voice)
}

// bytes Message = 12;
inline void GWDeviceInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GWDeviceInfo::message() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.Message)
  return message_.GetNoArena();
}
inline void GWDeviceInfo::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceInfo.Message)
}
#if LANG_CXX11
inline void GWDeviceInfo::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GWDeviceInfo.Message)
}
#endif
inline void GWDeviceInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GWDeviceInfo.Message)
}
inline void GWDeviceInfo::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GWDeviceInfo.Message)
}
inline ::std::string* GWDeviceInfo::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWDeviceInfo.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GWDeviceInfo::release_message() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GWDeviceInfo.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GWDeviceInfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GWDeviceInfo.Message)
}

// .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
inline bool GWDeviceInfo::has_deviceproperty() const {
  return this != internal_default_instance() && deviceproperty_ != NULL;
}
inline void GWDeviceInfo::clear_deviceproperty() {
  if (GetArenaNoVirtual() == NULL && deviceproperty_ != NULL) {
    delete deviceproperty_;
  }
  deviceproperty_ = NULL;
}
inline const ::ServerProtocol::GWDeviceProperty& GWDeviceInfo::_internal_deviceproperty() const {
  return *deviceproperty_;
}
inline const ::ServerProtocol::GWDeviceProperty& GWDeviceInfo::deviceproperty() const {
  const ::ServerProtocol::GWDeviceProperty* p = deviceproperty_;
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceInfo.DeviceProperty)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerProtocol::GWDeviceProperty*>(
      &::ServerProtocol::_GWDeviceProperty_default_instance_);
}
inline ::ServerProtocol::GWDeviceProperty* GWDeviceInfo::release_deviceproperty() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GWDeviceInfo.DeviceProperty)
  
  ::ServerProtocol::GWDeviceProperty* temp = deviceproperty_;
  deviceproperty_ = NULL;
  return temp;
}
inline ::ServerProtocol::GWDeviceProperty* GWDeviceInfo::mutable_deviceproperty() {
  
  if (deviceproperty_ == NULL) {
    auto* p = CreateMaybeMessage<::ServerProtocol::GWDeviceProperty>(GetArenaNoVirtual());
    deviceproperty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWDeviceInfo.DeviceProperty)
  return deviceproperty_;
}
inline void GWDeviceInfo::set_allocated_deviceproperty(::ServerProtocol::GWDeviceProperty* deviceproperty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deviceproperty_;
  }
  if (deviceproperty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deviceproperty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deviceproperty, submessage_arena);
    }
    
  } else {
    
  }
  deviceproperty_ = deviceproperty;
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GWDeviceInfo.DeviceProperty)
}

// -------------------------------------------------------------------

// GWDeviceProperty

// uint32 RootFetIdx = 1;
inline void GWDeviceProperty::clear_rootfetidx() {
  rootfetidx_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::rootfetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.RootFetIdx)
  return rootfetidx_;
}
inline void GWDeviceProperty::set_rootfetidx(::google::protobuf::uint32 value) {
  
  rootfetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.RootFetIdx)
}

// uint32 DevId = 2;
inline void GWDeviceProperty::clear_devid() {
  devid_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::devid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.DevId)
  return devid_;
}
inline void GWDeviceProperty::set_devid(::google::protobuf::uint32 value) {
  
  devid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.DevId)
}

// uint32 DrvIdx = 3;
inline void GWDeviceProperty::clear_drvidx() {
  drvidx_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::drvidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.DrvIdx)
  return drvidx_;
}
inline void GWDeviceProperty::set_drvidx(::google::protobuf::uint32 value) {
  
  drvidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.DrvIdx)
}

// uint32 PowerLevel = 4;
inline void GWDeviceProperty::clear_powerlevel() {
  powerlevel_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::powerlevel() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.PowerLevel)
  return powerlevel_;
}
inline void GWDeviceProperty::set_powerlevel(::google::protobuf::uint32 value) {
  
  powerlevel_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.PowerLevel)
}

// bool Active = 5;
inline void GWDeviceProperty::clear_active() {
  active_ = false;
}
inline bool GWDeviceProperty::active() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.Active)
  return active_;
}
inline void GWDeviceProperty::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.Active)
}

// uint32 FetCrc = 6;
inline void GWDeviceProperty::clear_fetcrc() {
  fetcrc_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::fetcrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.FetCrc)
  return fetcrc_;
}
inline void GWDeviceProperty::set_fetcrc(::google::protobuf::uint32 value) {
  
  fetcrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.FetCrc)
}

// uint32 GrpFeature = 7;
inline void GWDeviceProperty::clear_grpfeature() {
  grpfeature_ = 0u;
}
inline ::google::protobuf::uint32 GWDeviceProperty::grpfeature() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWDeviceProperty.GrpFeature)
  return grpfeature_;
}
inline void GWDeviceProperty::set_grpfeature(::google::protobuf::uint32 value) {
  
  grpfeature_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWDeviceProperty.GrpFeature)
}

// -------------------------------------------------------------------

// SensorState

// bytes DeviceMac = 1;
inline void SensorState::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorState::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SensorState.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void SensorState::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SensorState.DeviceMac)
}
#if LANG_CXX11
inline void SensorState::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SensorState.DeviceMac)
}
#endif
inline void SensorState::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SensorState.DeviceMac)
}
inline void SensorState::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SensorState.DeviceMac)
}
inline ::std::string* SensorState::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SensorState.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorState::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SensorState.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorState::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SensorState.DeviceMac)
}

// uint32 FetIdx = 2;
inline void SensorState::clear_fetidx() {
  fetidx_ = 0u;
}
inline ::google::protobuf::uint32 SensorState::fetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SensorState.FetIdx)
  return fetidx_;
}
inline void SensorState::set_fetidx(::google::protobuf::uint32 value) {
  
  fetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SensorState.FetIdx)
}

// bytes Values = 3;
inline void SensorState::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorState::values() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SensorState.Values)
  return values_.GetNoArena();
}
inline void SensorState::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SensorState.Values)
}
#if LANG_CXX11
inline void SensorState::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SensorState.Values)
}
#endif
inline void SensorState::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SensorState.Values)
}
inline void SensorState::set_values(const void* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SensorState.Values)
}
inline ::std::string* SensorState::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SensorState.Values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorState::release_values() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SensorState.Values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorState::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SensorState.Values)
}

// uint32 Changed = 4;
inline void SensorState::clear_changed() {
  changed_ = 0u;
}
inline ::google::protobuf::uint32 SensorState::changed() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SensorState.Changed)
  return changed_;
}
inline void SensorState::set_changed(::google::protobuf::uint32 value) {
  
  changed_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SensorState.Changed)
}

// uint32 Time = 5;
inline void SensorState::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 SensorState::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SensorState.Time)
  return time_;
}
inline void SensorState::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SensorState.Time)
}

// -------------------------------------------------------------------

// StateTable

// bytes GwMac = 1;
inline void StateTable::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateTable::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.StateTable.GwMac)
  return gwmac_.GetNoArena();
}
inline void StateTable::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.StateTable.GwMac)
}
#if LANG_CXX11
inline void StateTable::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.StateTable.GwMac)
}
#endif
inline void StateTable::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.StateTable.GwMac)
}
inline void StateTable::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.StateTable.GwMac)
}
inline ::std::string* StateTable::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.StateTable.GwMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateTable::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.StateTable.GwMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateTable::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.StateTable.GwMac)
}

// repeated .ServerProtocol.SensorState SensorStatelist = 2;
inline int StateTable::sensorstatelist_size() const {
  return sensorstatelist_.size();
}
inline void StateTable::clear_sensorstatelist() {
  sensorstatelist_.Clear();
}
inline ::ServerProtocol::SensorState* StateTable::mutable_sensorstatelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.StateTable.SensorStatelist)
  return sensorstatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SensorState >*
StateTable::mutable_sensorstatelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.StateTable.SensorStatelist)
  return &sensorstatelist_;
}
inline const ::ServerProtocol::SensorState& StateTable::sensorstatelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.StateTable.SensorStatelist)
  return sensorstatelist_.Get(index);
}
inline ::ServerProtocol::SensorState* StateTable::add_sensorstatelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.StateTable.SensorStatelist)
  return sensorstatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::SensorState >&
StateTable::sensorstatelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.StateTable.SensorStatelist)
  return sensorstatelist_;
}

// -------------------------------------------------------------------

// DeviceDelete

// int32 ActionType = 1;
inline void DeviceDelete::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 DeviceDelete::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDelete.ActionType)
  return actiontype_;
}
inline void DeviceDelete::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDelete.ActionType)
}

// bytes DeviceMac = 2;
inline void DeviceDelete::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDelete::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDelete.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void DeviceDelete::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDelete.DeviceMac)
}
#if LANG_CXX11
inline void DeviceDelete::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceDelete.DeviceMac)
}
#endif
inline void DeviceDelete::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceDelete.DeviceMac)
}
inline void DeviceDelete::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceDelete.DeviceMac)
}
inline ::std::string* DeviceDelete::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceDelete.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDelete::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceDelete.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDelete::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceDelete.DeviceMac)
}

// bytes Data = 3;
inline void DeviceDelete::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDelete::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceDelete.Data)
  return data_.GetNoArena();
}
inline void DeviceDelete::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceDelete.Data)
}
#if LANG_CXX11
inline void DeviceDelete::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceDelete.Data)
}
#endif
inline void DeviceDelete::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceDelete.Data)
}
inline void DeviceDelete::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceDelete.Data)
}
inline ::std::string* DeviceDelete::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceDelete.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDelete::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceDelete.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDelete::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceDelete.Data)
}

// -------------------------------------------------------------------

// GWFeature

// int32 Level = 1;
inline void GWFeature::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 GWFeature::level() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWFeature.Level)
  return level_;
}
inline void GWFeature::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWFeature.Level)
}

// int32 Fet = 2;
inline void GWFeature::clear_fet() {
  fet_ = 0;
}
inline ::google::protobuf::int32 GWFeature::fet() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWFeature.Fet)
  return fet_;
}
inline void GWFeature::set_fet(::google::protobuf::int32 value) {
  
  fet_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWFeature.Fet)
}

// int32 RootIndex = 3;
inline void GWFeature::clear_rootindex() {
  rootindex_ = 0;
}
inline ::google::protobuf::int32 GWFeature::rootindex() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWFeature.RootIndex)
  return rootindex_;
}
inline void GWFeature::set_rootindex(::google::protobuf::int32 value) {
  
  rootindex_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.GWFeature.RootIndex)
}

// bytes DeviceMac = 4;
inline void GWFeature::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GWFeature::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.GWFeature.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void GWFeature::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.GWFeature.DeviceMac)
}
#if LANG_CXX11
inline void GWFeature::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.GWFeature.DeviceMac)
}
#endif
inline void GWFeature::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.GWFeature.DeviceMac)
}
inline void GWFeature::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.GWFeature.DeviceMac)
}
inline ::std::string* GWFeature::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.GWFeature.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GWFeature::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.GWFeature.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GWFeature::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.GWFeature.DeviceMac)
}

// -------------------------------------------------------------------

// DeviceConfig

// bytes DeviceMac = 1;
inline void DeviceConfig::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConfig::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceConfig.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void DeviceConfig::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceConfig.DeviceMac)
}
#if LANG_CXX11
inline void DeviceConfig::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceConfig.DeviceMac)
}
#endif
inline void DeviceConfig::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceConfig.DeviceMac)
}
inline void DeviceConfig::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceConfig.DeviceMac)
}
inline ::std::string* DeviceConfig::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceConfig.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConfig::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceConfig.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfig::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceConfig.DeviceMac)
}

// int32 CurTime = 2;
inline void DeviceConfig::clear_curtime() {
  curtime_ = 0;
}
inline ::google::protobuf::int32 DeviceConfig::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceConfig.CurTime)
  return curtime_;
}
inline void DeviceConfig::set_curtime(::google::protobuf::int32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceConfig.CurTime)
}

// int32 ConfigType = 3;
inline void DeviceConfig::clear_configtype() {
  configtype_ = 0;
}
inline ::google::protobuf::int32 DeviceConfig::configtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceConfig.ConfigType)
  return configtype_;
}
inline void DeviceConfig::set_configtype(::google::protobuf::int32 value) {
  
  configtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceConfig.ConfigType)
}

// bytes ConfigData = 4;
inline void DeviceConfig::clear_configdata() {
  configdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConfig::configdata() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceConfig.ConfigData)
  return configdata_.GetNoArena();
}
inline void DeviceConfig::set_configdata(const ::std::string& value) {
  
  configdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceConfig.ConfigData)
}
#if LANG_CXX11
inline void DeviceConfig::set_configdata(::std::string&& value) {
  
  configdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceConfig.ConfigData)
}
#endif
inline void DeviceConfig::set_configdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceConfig.ConfigData)
}
inline void DeviceConfig::set_configdata(const void* value, size_t size) {
  
  configdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceConfig.ConfigData)
}
inline ::std::string* DeviceConfig::mutable_configdata() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceConfig.ConfigData)
  return configdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConfig::release_configdata() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceConfig.ConfigData)
  
  return configdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfig::set_allocated_configdata(::std::string* configdata) {
  if (configdata != NULL) {
    
  } else {
    
  }
  configdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configdata);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceConfig.ConfigData)
}

// -------------------------------------------------------------------

// Transmission

// bytes DeviceMac = 1;
inline void Transmission::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transmission::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Transmission.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void Transmission::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Transmission.DeviceMac)
}
#if LANG_CXX11
inline void Transmission::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Transmission.DeviceMac)
}
#endif
inline void Transmission::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Transmission.DeviceMac)
}
inline void Transmission::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Transmission.DeviceMac)
}
inline ::std::string* Transmission::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Transmission.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transmission::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Transmission.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transmission::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Transmission.DeviceMac)
}

// bytes Operation = 2;
inline void Transmission::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transmission::operation() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Transmission.Operation)
  return operation_.GetNoArena();
}
inline void Transmission::set_operation(const ::std::string& value) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Transmission.Operation)
}
#if LANG_CXX11
inline void Transmission::set_operation(::std::string&& value) {
  
  operation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Transmission.Operation)
}
#endif
inline void Transmission::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Transmission.Operation)
}
inline void Transmission::set_operation(const void* value, size_t size) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Transmission.Operation)
}
inline ::std::string* Transmission::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Transmission.Operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transmission::release_operation() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Transmission.Operation)
  
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transmission::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Transmission.Operation)
}

// int32 CurTime = 3;
inline void Transmission::clear_curtime() {
  curtime_ = 0;
}
inline ::google::protobuf::int32 Transmission::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Transmission.CurTime)
  return curtime_;
}
inline void Transmission::set_curtime(::google::protobuf::int32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Transmission.CurTime)
}

// int32 Type = 4;
inline void Transmission::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Transmission::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Transmission.Type)
  return type_;
}
inline void Transmission::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.Transmission.Type)
}

// bytes Data = 5;
inline void Transmission::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transmission::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.Transmission.Data)
  return data_.GetNoArena();
}
inline void Transmission::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.Transmission.Data)
}
#if LANG_CXX11
inline void Transmission::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.Transmission.Data)
}
#endif
inline void Transmission::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.Transmission.Data)
}
inline void Transmission::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.Transmission.Data)
}
inline ::std::string* Transmission::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.Transmission.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transmission::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.Transmission.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transmission::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.Transmission.Data)
}

// -------------------------------------------------------------------

// TransmissionResponse

// bytes DeviceMac = 1;
inline void TransmissionResponse::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmissionResponse::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TransmissionResponse.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void TransmissionResponse::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.TransmissionResponse.DeviceMac)
}
#if LANG_CXX11
inline void TransmissionResponse::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.TransmissionResponse.DeviceMac)
}
#endif
inline void TransmissionResponse::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.TransmissionResponse.DeviceMac)
}
inline void TransmissionResponse::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.TransmissionResponse.DeviceMac)
}
inline ::std::string* TransmissionResponse::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.TransmissionResponse.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmissionResponse::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.TransmissionResponse.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmissionResponse::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.TransmissionResponse.DeviceMac)
}

// bytes Operation = 2;
inline void TransmissionResponse::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmissionResponse::operation() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TransmissionResponse.Operation)
  return operation_.GetNoArena();
}
inline void TransmissionResponse::set_operation(const ::std::string& value) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.TransmissionResponse.Operation)
}
#if LANG_CXX11
inline void TransmissionResponse::set_operation(::std::string&& value) {
  
  operation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.TransmissionResponse.Operation)
}
#endif
inline void TransmissionResponse::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.TransmissionResponse.Operation)
}
inline void TransmissionResponse::set_operation(const void* value, size_t size) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.TransmissionResponse.Operation)
}
inline ::std::string* TransmissionResponse::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.TransmissionResponse.Operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmissionResponse::release_operation() {
  // @@protoc_insertion_point(field_release:ServerProtocol.TransmissionResponse.Operation)
  
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmissionResponse::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.TransmissionResponse.Operation)
}

// int32 Type = 3;
inline void TransmissionResponse::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 TransmissionResponse::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TransmissionResponse.Type)
  return type_;
}
inline void TransmissionResponse::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.TransmissionResponse.Type)
}

// bytes Data = 4;
inline void TransmissionResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransmissionResponse::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.TransmissionResponse.Data)
  return data_.GetNoArena();
}
inline void TransmissionResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.TransmissionResponse.Data)
}
#if LANG_CXX11
inline void TransmissionResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.TransmissionResponse.Data)
}
#endif
inline void TransmissionResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.TransmissionResponse.Data)
}
inline void TransmissionResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.TransmissionResponse.Data)
}
inline ::std::string* TransmissionResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.TransmissionResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransmissionResponse::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.TransmissionResponse.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransmissionResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.TransmissionResponse.Data)
}

// -------------------------------------------------------------------

// WhiteBlackList

// bytes GWMac = 1;
inline void WhiteBlackList::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WhiteBlackList::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.GWMac)
  return gwmac_.GetNoArena();
}
inline void WhiteBlackList::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.GWMac)
}
#if LANG_CXX11
inline void WhiteBlackList::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WhiteBlackList.GWMac)
}
#endif
inline void WhiteBlackList::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WhiteBlackList.GWMac)
}
inline void WhiteBlackList::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WhiteBlackList.GWMac)
}
inline ::std::string* WhiteBlackList::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WhiteBlackList.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WhiteBlackList::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WhiteBlackList.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WhiteBlackList::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WhiteBlackList.GWMac)
}

// bytes DeviceMac = 2;
inline void WhiteBlackList::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WhiteBlackList::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void WhiteBlackList::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.DeviceMac)
}
#if LANG_CXX11
inline void WhiteBlackList::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WhiteBlackList.DeviceMac)
}
#endif
inline void WhiteBlackList::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WhiteBlackList.DeviceMac)
}
inline void WhiteBlackList::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WhiteBlackList.DeviceMac)
}
inline ::std::string* WhiteBlackList::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WhiteBlackList.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WhiteBlackList::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WhiteBlackList.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WhiteBlackList::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WhiteBlackList.DeviceMac)
}

// bytes CardId = 3;
inline void WhiteBlackList::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WhiteBlackList::cardid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.CardId)
  return cardid_.GetNoArena();
}
inline void WhiteBlackList::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.CardId)
}
#if LANG_CXX11
inline void WhiteBlackList::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WhiteBlackList.CardId)
}
#endif
inline void WhiteBlackList::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WhiteBlackList.CardId)
}
inline void WhiteBlackList::set_cardid(const void* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WhiteBlackList.CardId)
}
inline ::std::string* WhiteBlackList::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WhiteBlackList.CardId)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WhiteBlackList::release_cardid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WhiteBlackList.CardId)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WhiteBlackList::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WhiteBlackList.CardId)
}

// int32 FetIdx = 4;
inline void WhiteBlackList::clear_fetidx() {
  fetidx_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::fetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.FetIdx)
  return fetidx_;
}
inline void WhiteBlackList::set_fetidx(::google::protobuf::int32 value) {
  
  fetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.FetIdx)
}

// int32 RecordId = 5;
inline void WhiteBlackList::clear_recordid() {
  recordid_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::recordid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.RecordId)
  return recordid_;
}
inline void WhiteBlackList::set_recordid(::google::protobuf::int32 value) {
  
  recordid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.RecordId)
}

// int32 StartTime = 6;
inline void WhiteBlackList::clear_starttime() {
  starttime_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::starttime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.StartTime)
  return starttime_;
}
inline void WhiteBlackList::set_starttime(::google::protobuf::int32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.StartTime)
}

// int32 EndTime = 7;
inline void WhiteBlackList::clear_endtime() {
  endtime_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.EndTime)
  return endtime_;
}
inline void WhiteBlackList::set_endtime(::google::protobuf::int32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.EndTime)
}

// int32 CardType = 8;
inline void WhiteBlackList::clear_cardtype() {
  cardtype_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::cardtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.CardType)
  return cardtype_;
}
inline void WhiteBlackList::set_cardtype(::google::protobuf::int32 value) {
  
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.CardType)
}

// int32 FunType = 9;
inline void WhiteBlackList::clear_funtype() {
  funtype_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::funtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.FunType)
  return funtype_;
}
inline void WhiteBlackList::set_funtype(::google::protobuf::int32 value) {
  
  funtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.FunType)
}

// int32 ListType = 10;
inline void WhiteBlackList::clear_listtype() {
  listtype_ = 0;
}
inline ::google::protobuf::int32 WhiteBlackList::listtype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.ListType)
  return listtype_;
}
inline void WhiteBlackList::set_listtype(::google::protobuf::int32 value) {
  
  listtype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.ListType)
}

// bytes Data = 11;
inline void WhiteBlackList::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WhiteBlackList::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.WhiteBlackList.Data)
  return data_.GetNoArena();
}
inline void WhiteBlackList::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.WhiteBlackList.Data)
}
#if LANG_CXX11
inline void WhiteBlackList::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.WhiteBlackList.Data)
}
#endif
inline void WhiteBlackList::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.WhiteBlackList.Data)
}
inline void WhiteBlackList::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.WhiteBlackList.Data)
}
inline ::std::string* WhiteBlackList::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.WhiteBlackList.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WhiteBlackList::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.WhiteBlackList.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WhiteBlackList::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.WhiteBlackList.Data)
}

// -------------------------------------------------------------------

// DispatchWBListResult

// int32 RecordId = 1;
inline void DispatchWBListResult::clear_recordid() {
  recordid_ = 0;
}
inline ::google::protobuf::int32 DispatchWBListResult::recordid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DispatchWBListResult.RecordId)
  return recordid_;
}
inline void DispatchWBListResult::set_recordid(::google::protobuf::int32 value) {
  
  recordid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DispatchWBListResult.RecordId)
}

// int32 Result = 2;
inline void DispatchWBListResult::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 DispatchWBListResult::result() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DispatchWBListResult.Result)
  return result_;
}
inline void DispatchWBListResult::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DispatchWBListResult.Result)
}

// -------------------------------------------------------------------

// DeviceTable

// bytes GWMac = 1;
inline void DeviceTable::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceTable::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceTable.GWMac)
  return gwmac_.GetNoArena();
}
inline void DeviceTable::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceTable.GWMac)
}
#if LANG_CXX11
inline void DeviceTable::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.DeviceTable.GWMac)
}
#endif
inline void DeviceTable::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.DeviceTable.GWMac)
}
inline void DeviceTable::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.DeviceTable.GWMac)
}
inline ::std::string* DeviceTable::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceTable.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceTable::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.DeviceTable.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceTable::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.DeviceTable.GWMac)
}

// repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
inline int DeviceTable::deviceinfolist_size() const {
  return deviceinfolist_.size();
}
inline void DeviceTable::clear_deviceinfolist() {
  deviceinfolist_.Clear();
}
inline ::ServerProtocol::GWDeviceInfo* DeviceTable::mutable_deviceinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.DeviceTable.DeviceInfoList)
  return deviceinfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >*
DeviceTable::mutable_deviceinfolist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.DeviceTable.DeviceInfoList)
  return &deviceinfolist_;
}
inline const ::ServerProtocol::GWDeviceInfo& DeviceTable::deviceinfolist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceTable.DeviceInfoList)
  return deviceinfolist_.Get(index);
}
inline ::ServerProtocol::GWDeviceInfo* DeviceTable::add_deviceinfolist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.DeviceTable.DeviceInfoList)
  return deviceinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWDeviceInfo >&
DeviceTable::deviceinfolist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.DeviceTable.DeviceInfoList)
  return deviceinfolist_;
}

// int32 Type = 3;
inline void DeviceTable::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 DeviceTable::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.DeviceTable.Type)
  return type_;
}
inline void DeviceTable::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.DeviceTable.Type)
}

// -------------------------------------------------------------------

// FeatureTable

// bytes GWMac = 1;
inline void FeatureTable::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureTable::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FeatureTable.GWMac)
  return gwmac_.GetNoArena();
}
inline void FeatureTable::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.FeatureTable.GWMac)
}
#if LANG_CXX11
inline void FeatureTable::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.FeatureTable.GWMac)
}
#endif
inline void FeatureTable::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.FeatureTable.GWMac)
}
inline void FeatureTable::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.FeatureTable.GWMac)
}
inline ::std::string* FeatureTable::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FeatureTable.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureTable::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.FeatureTable.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureTable::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.FeatureTable.GWMac)
}

// repeated .ServerProtocol.GWFeature FeatureList = 2;
inline int FeatureTable::featurelist_size() const {
  return featurelist_.size();
}
inline void FeatureTable::clear_featurelist() {
  featurelist_.Clear();
}
inline ::ServerProtocol::GWFeature* FeatureTable::mutable_featurelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.FeatureTable.FeatureList)
  return featurelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWFeature >*
FeatureTable::mutable_featurelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.FeatureTable.FeatureList)
  return &featurelist_;
}
inline const ::ServerProtocol::GWFeature& FeatureTable::featurelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FeatureTable.FeatureList)
  return featurelist_.Get(index);
}
inline ::ServerProtocol::GWFeature* FeatureTable::add_featurelist() {
  // @@protoc_insertion_point(field_add:ServerProtocol.FeatureTable.FeatureList)
  return featurelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerProtocol::GWFeature >&
FeatureTable::featurelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.FeatureTable.FeatureList)
  return featurelist_;
}

// int32 Type = 3;
inline void FeatureTable::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 FeatureTable::type() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FeatureTable.Type)
  return type_;
}
inline void FeatureTable::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FeatureTable.Type)
}

// int32 DeviceCrc = 4;
inline void FeatureTable::clear_devicecrc() {
  devicecrc_ = 0;
}
inline ::google::protobuf::int32 FeatureTable::devicecrc() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.FeatureTable.DeviceCrc)
  return devicecrc_;
}
inline void FeatureTable::set_devicecrc(::google::protobuf::int32 value) {
  
  devicecrc_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.FeatureTable.DeviceCrc)
}

// -------------------------------------------------------------------

// RemoteOpen

// bytes DeviceMac = 1;
inline void RemoteOpen::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteOpen::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.RemoteOpen.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void RemoteOpen::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.RemoteOpen.DeviceMac)
}
#if LANG_CXX11
inline void RemoteOpen::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.RemoteOpen.DeviceMac)
}
#endif
inline void RemoteOpen::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.RemoteOpen.DeviceMac)
}
inline void RemoteOpen::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.RemoteOpen.DeviceMac)
}
inline ::std::string* RemoteOpen::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.RemoteOpen.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteOpen::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.RemoteOpen.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteOpen::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.RemoteOpen.DeviceMac)
}

// bytes CardId = 2;
inline void RemoteOpen::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteOpen::cardid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.RemoteOpen.CardId)
  return cardid_.GetNoArena();
}
inline void RemoteOpen::set_cardid(const ::std::string& value) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.RemoteOpen.CardId)
}
#if LANG_CXX11
inline void RemoteOpen::set_cardid(::std::string&& value) {
  
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.RemoteOpen.CardId)
}
#endif
inline void RemoteOpen::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.RemoteOpen.CardId)
}
inline void RemoteOpen::set_cardid(const void* value, size_t size) {
  
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.RemoteOpen.CardId)
}
inline ::std::string* RemoteOpen::mutable_cardid() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.RemoteOpen.CardId)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteOpen::release_cardid() {
  // @@protoc_insertion_point(field_release:ServerProtocol.RemoteOpen.CardId)
  
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteOpen::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    
  } else {
    
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.RemoteOpen.CardId)
}

// int32 CurTime = 3;
inline void RemoteOpen::clear_curtime() {
  curtime_ = 0;
}
inline ::google::protobuf::int32 RemoteOpen::curtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.RemoteOpen.CurTime)
  return curtime_;
}
inline void RemoteOpen::set_curtime(::google::protobuf::int32 value) {
  
  curtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.RemoteOpen.CurTime)
}

// int32 Action = 4;
inline void RemoteOpen::clear_action() {
  action_ = 0;
}
inline ::google::protobuf::int32 RemoteOpen::action() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.RemoteOpen.Action)
  return action_;
}
inline void RemoteOpen::set_action(::google::protobuf::int32 value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.RemoteOpen.Action)
}

// bytes Data = 5;
inline void RemoteOpen::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoteOpen::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.RemoteOpen.Data)
  return data_.GetNoArena();
}
inline void RemoteOpen::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.RemoteOpen.Data)
}
#if LANG_CXX11
inline void RemoteOpen::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.RemoteOpen.Data)
}
#endif
inline void RemoteOpen::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.RemoteOpen.Data)
}
inline void RemoteOpen::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.RemoteOpen.Data)
}
inline ::std::string* RemoteOpen::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.RemoteOpen.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoteOpen::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.RemoteOpen.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoteOpen::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.RemoteOpen.Data)
}

// -------------------------------------------------------------------

// AIOT

// bytes DeviceMac = 1;
inline void AIOT::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIOT::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void AIOT::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.DeviceMac)
}
#if LANG_CXX11
inline void AIOT::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.AIOT.DeviceMac)
}
#endif
inline void AIOT::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.AIOT.DeviceMac)
}
inline void AIOT::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.AIOT.DeviceMac)
}
inline ::std::string* AIOT::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.AIOT.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIOT::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.AIOT.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIOT::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.AIOT.DeviceMac)
}

// .ServerProtocol.ControlCommand Command = 2;
inline void AIOT::clear_command() {
  command_ = 0;
}
inline ::ServerProtocol::ControlCommand AIOT::command() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.Command)
  return static_cast< ::ServerProtocol::ControlCommand >(command_);
}
inline void AIOT::set_command(::ServerProtocol::ControlCommand value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.Command)
}

// int32 FetIdx = 3;
inline void AIOT::clear_fetidx() {
  fetidx_ = 0;
}
inline ::google::protobuf::int32 AIOT::fetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.FetIdx)
  return fetidx_;
}
inline void AIOT::set_fetidx(::google::protobuf::int32 value) {
  
  fetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.FetIdx)
}

// int32 Feature = 4;
inline void AIOT::clear_feature() {
  feature_ = 0;
}
inline ::google::protobuf::int32 AIOT::feature() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.Feature)
  return feature_;
}
inline void AIOT::set_feature(::google::protobuf::int32 value) {
  
  feature_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.Feature)
}

// repeated uint32 ParaList = 5;
inline int AIOT::paralist_size() const {
  return paralist_.size();
}
inline void AIOT::clear_paralist() {
  paralist_.Clear();
}
inline ::google::protobuf::uint32 AIOT::paralist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.ParaList)
  return paralist_.Get(index);
}
inline void AIOT::set_paralist(int index, ::google::protobuf::uint32 value) {
  paralist_.Set(index, value);
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.ParaList)
}
inline void AIOT::add_paralist(::google::protobuf::uint32 value) {
  paralist_.Add(value);
  // @@protoc_insertion_point(field_add:ServerProtocol.AIOT.ParaList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AIOT::paralist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.AIOT.ParaList)
  return paralist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AIOT::mutable_paralist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.AIOT.ParaList)
  return &paralist_;
}

// bytes Data = 6;
inline void AIOT::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIOT::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.Data)
  return data_.GetNoArena();
}
inline void AIOT::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.Data)
}
#if LANG_CXX11
inline void AIOT::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.AIOT.Data)
}
#endif
inline void AIOT::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.AIOT.Data)
}
inline void AIOT::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.AIOT.Data)
}
inline ::std::string* AIOT::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.AIOT.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIOT::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.AIOT.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIOT::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.AIOT.Data)
}

// bytes GWMac = 7;
inline void AIOT::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AIOT::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.GWMac)
  return gwmac_.GetNoArena();
}
inline void AIOT::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.GWMac)
}
#if LANG_CXX11
inline void AIOT::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.AIOT.GWMac)
}
#endif
inline void AIOT::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.AIOT.GWMac)
}
inline void AIOT::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.AIOT.GWMac)
}
inline ::std::string* AIOT::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.AIOT.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AIOT::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.AIOT.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AIOT::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.AIOT.GWMac)
}

// int32 userId = 8;
inline void AIOT::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 AIOT::userid() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.userId)
  return userid_;
}
inline void AIOT::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.userId)
}

// .ServerProtocol.RemoteOpen RemoteAoit = 9;
inline bool AIOT::has_remoteaoit() const {
  return this != internal_default_instance() && remoteaoit_ != NULL;
}
inline void AIOT::clear_remoteaoit() {
  if (GetArenaNoVirtual() == NULL && remoteaoit_ != NULL) {
    delete remoteaoit_;
  }
  remoteaoit_ = NULL;
}
inline const ::ServerProtocol::RemoteOpen& AIOT::_internal_remoteaoit() const {
  return *remoteaoit_;
}
inline const ::ServerProtocol::RemoteOpen& AIOT::remoteaoit() const {
  const ::ServerProtocol::RemoteOpen* p = remoteaoit_;
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.RemoteAoit)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerProtocol::RemoteOpen*>(
      &::ServerProtocol::_RemoteOpen_default_instance_);
}
inline ::ServerProtocol::RemoteOpen* AIOT::release_remoteaoit() {
  // @@protoc_insertion_point(field_release:ServerProtocol.AIOT.RemoteAoit)
  
  ::ServerProtocol::RemoteOpen* temp = remoteaoit_;
  remoteaoit_ = NULL;
  return temp;
}
inline ::ServerProtocol::RemoteOpen* AIOT::mutable_remoteaoit() {
  
  if (remoteaoit_ == NULL) {
    auto* p = CreateMaybeMessage<::ServerProtocol::RemoteOpen>(GetArenaNoVirtual());
    remoteaoit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ServerProtocol.AIOT.RemoteAoit)
  return remoteaoit_;
}
inline void AIOT::set_allocated_remoteaoit(::ServerProtocol::RemoteOpen* remoteaoit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remoteaoit_;
  }
  if (remoteaoit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remoteaoit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remoteaoit, submessage_arena);
    }
    
  } else {
    
  }
  remoteaoit_ = remoteaoit;
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.AIOT.RemoteAoit)
}

// int32 ActionType = 10;
inline void AIOT::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 AIOT::actiontype() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.ActionType)
  return actiontype_;
}
inline void AIOT::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.ActionType)
}

// int64 BeginTime = 11;
inline void AIOT::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AIOT::begintime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.BeginTime)
  return begintime_;
}
inline void AIOT::set_begintime(::google::protobuf::int64 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.BeginTime)
}

// int64 EndTime = 12;
inline void AIOT::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AIOT::endtime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.AIOT.EndTime)
  return endtime_;
}
inline void AIOT::set_endtime(::google::protobuf::int64 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.AIOT.EndTime)
}

// -------------------------------------------------------------------

// NBAnswer

// int32 State = 1;
inline void NBAnswer::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 NBAnswer::state() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NBAnswer.State)
  return state_;
}
inline void NBAnswer::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.NBAnswer.State)
}

// bytes AIOTCommand = 2;
inline void NBAnswer::clear_aiotcommand() {
  aiotcommand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NBAnswer::aiotcommand() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NBAnswer.AIOTCommand)
  return aiotcommand_.GetNoArena();
}
inline void NBAnswer::set_aiotcommand(const ::std::string& value) {
  
  aiotcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.NBAnswer.AIOTCommand)
}
#if LANG_CXX11
inline void NBAnswer::set_aiotcommand(::std::string&& value) {
  
  aiotcommand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.NBAnswer.AIOTCommand)
}
#endif
inline void NBAnswer::set_aiotcommand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aiotcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.NBAnswer.AIOTCommand)
}
inline void NBAnswer::set_aiotcommand(const void* value, size_t size) {
  
  aiotcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.NBAnswer.AIOTCommand)
}
inline ::std::string* NBAnswer::mutable_aiotcommand() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.NBAnswer.AIOTCommand)
  return aiotcommand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NBAnswer::release_aiotcommand() {
  // @@protoc_insertion_point(field_release:ServerProtocol.NBAnswer.AIOTCommand)
  
  return aiotcommand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NBAnswer::set_allocated_aiotcommand(::std::string* aiotcommand) {
  if (aiotcommand != NULL) {
    
  } else {
    
  }
  aiotcommand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aiotcommand);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.NBAnswer.AIOTCommand)
}

// bytes WhiteBlackList = 3;
inline void NBAnswer::clear_whiteblacklist() {
  whiteblacklist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NBAnswer::whiteblacklist() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.NBAnswer.WhiteBlackList)
  return whiteblacklist_.GetNoArena();
}
inline void NBAnswer::set_whiteblacklist(const ::std::string& value) {
  
  whiteblacklist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.NBAnswer.WhiteBlackList)
}
#if LANG_CXX11
inline void NBAnswer::set_whiteblacklist(::std::string&& value) {
  
  whiteblacklist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.NBAnswer.WhiteBlackList)
}
#endif
inline void NBAnswer::set_whiteblacklist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  whiteblacklist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.NBAnswer.WhiteBlackList)
}
inline void NBAnswer::set_whiteblacklist(const void* value, size_t size) {
  
  whiteblacklist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.NBAnswer.WhiteBlackList)
}
inline ::std::string* NBAnswer::mutable_whiteblacklist() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.NBAnswer.WhiteBlackList)
  return whiteblacklist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NBAnswer::release_whiteblacklist() {
  // @@protoc_insertion_point(field_release:ServerProtocol.NBAnswer.WhiteBlackList)
  
  return whiteblacklist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NBAnswer::set_allocated_whiteblacklist(::std::string* whiteblacklist) {
  if (whiteblacklist != NULL) {
    
  } else {
    
  }
  whiteblacklist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), whiteblacklist);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.NBAnswer.WhiteBlackList)
}

// -------------------------------------------------------------------

// MqttSubscribeInit

// bytes GWMac = 1;
inline void MqttSubscribeInit::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MqttSubscribeInit::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.MqttSubscribeInit.GWMac)
  return gwmac_.GetNoArena();
}
inline void MqttSubscribeInit::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.MqttSubscribeInit.GWMac)
}
#if LANG_CXX11
inline void MqttSubscribeInit::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.MqttSubscribeInit.GWMac)
}
#endif
inline void MqttSubscribeInit::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.MqttSubscribeInit.GWMac)
}
inline void MqttSubscribeInit::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.MqttSubscribeInit.GWMac)
}
inline ::std::string* MqttSubscribeInit::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.MqttSubscribeInit.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MqttSubscribeInit::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.MqttSubscribeInit.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MqttSubscribeInit::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.MqttSubscribeInit.GWMac)
}

// -------------------------------------------------------------------

// SubscribeInitData

// bytes GWMac = 1;
inline void SubscribeInitData::clear_gwmac() {
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeInitData::gwmac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SubscribeInitData.GWMac)
  return gwmac_.GetNoArena();
}
inline void SubscribeInitData::set_gwmac(const ::std::string& value) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.SubscribeInitData.GWMac)
}
#if LANG_CXX11
inline void SubscribeInitData::set_gwmac(::std::string&& value) {
  
  gwmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.SubscribeInitData.GWMac)
}
#endif
inline void SubscribeInitData::set_gwmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SubscribeInitData.GWMac)
}
inline void SubscribeInitData::set_gwmac(const void* value, size_t size) {
  
  gwmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SubscribeInitData.GWMac)
}
inline ::std::string* SubscribeInitData::mutable_gwmac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SubscribeInitData.GWMac)
  return gwmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeInitData::release_gwmac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.SubscribeInitData.GWMac)
  
  return gwmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeInitData::set_allocated_gwmac(::std::string* gwmac) {
  if (gwmac != NULL) {
    
  } else {
    
  }
  gwmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gwmac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.SubscribeInitData.GWMac)
}

// repeated bytes DeviceList = 2;
inline int SubscribeInitData::devicelist_size() const {
  return devicelist_.size();
}
inline void SubscribeInitData::clear_devicelist() {
  devicelist_.Clear();
}
inline const ::std::string& SubscribeInitData::devicelist(int index) const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SubscribeInitData.DeviceList)
  return devicelist_.Get(index);
}
inline ::std::string* SubscribeInitData::mutable_devicelist(int index) {
  // @@protoc_insertion_point(field_mutable:ServerProtocol.SubscribeInitData.DeviceList)
  return devicelist_.Mutable(index);
}
inline void SubscribeInitData::set_devicelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ServerProtocol.SubscribeInitData.DeviceList)
  devicelist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SubscribeInitData::set_devicelist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ServerProtocol.SubscribeInitData.DeviceList)
  devicelist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SubscribeInitData::set_devicelist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  devicelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerProtocol.SubscribeInitData.DeviceList)
}
inline void SubscribeInitData::set_devicelist(int index, const void* value, size_t size) {
  devicelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.SubscribeInitData.DeviceList)
}
inline ::std::string* SubscribeInitData::add_devicelist() {
  // @@protoc_insertion_point(field_add_mutable:ServerProtocol.SubscribeInitData.DeviceList)
  return devicelist_.Add();
}
inline void SubscribeInitData::add_devicelist(const ::std::string& value) {
  devicelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ServerProtocol.SubscribeInitData.DeviceList)
}
#if LANG_CXX11
inline void SubscribeInitData::add_devicelist(::std::string&& value) {
  devicelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ServerProtocol.SubscribeInitData.DeviceList)
}
#endif
inline void SubscribeInitData::add_devicelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  devicelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ServerProtocol.SubscribeInitData.DeviceList)
}
inline void SubscribeInitData::add_devicelist(const void* value, size_t size) {
  devicelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ServerProtocol.SubscribeInitData.DeviceList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SubscribeInitData::devicelist() const {
  // @@protoc_insertion_point(field_list:ServerProtocol.SubscribeInitData.DeviceList)
  return devicelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SubscribeInitData::mutable_devicelist() {
  // @@protoc_insertion_point(field_mutable_list:ServerProtocol.SubscribeInitData.DeviceList)
  return &devicelist_;
}

// int32 STime = 3;
inline void SubscribeInitData::clear_stime() {
  stime_ = 0;
}
inline ::google::protobuf::int32 SubscribeInitData::stime() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.SubscribeInitData.STime)
  return stime_;
}
inline void SubscribeInitData::set_stime(::google::protobuf::int32 value) {
  
  stime_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.SubscribeInitData.STime)
}

// -------------------------------------------------------------------

// ControlResponse

// int32 Result = 1;
inline void ControlResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ControlResponse::result() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ControlResponse.Result)
  return result_;
}
inline void ControlResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ControlResponse.Result)
}

// bytes DeviceMac = 2;
inline void ControlResponse::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlResponse::devicemac() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ControlResponse.DeviceMac)
  return devicemac_.GetNoArena();
}
inline void ControlResponse::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.ControlResponse.DeviceMac)
}
#if LANG_CXX11
inline void ControlResponse::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.ControlResponse.DeviceMac)
}
#endif
inline void ControlResponse::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.ControlResponse.DeviceMac)
}
inline void ControlResponse::set_devicemac(const void* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.ControlResponse.DeviceMac)
}
inline ::std::string* ControlResponse::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.ControlResponse.DeviceMac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlResponse::release_devicemac() {
  // @@protoc_insertion_point(field_release:ServerProtocol.ControlResponse.DeviceMac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlResponse::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != NULL) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.ControlResponse.DeviceMac)
}

// int32 FetIdx = 3;
inline void ControlResponse::clear_fetidx() {
  fetidx_ = 0;
}
inline ::google::protobuf::int32 ControlResponse::fetidx() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ControlResponse.FetIdx)
  return fetidx_;
}
inline void ControlResponse::set_fetidx(::google::protobuf::int32 value) {
  
  fetidx_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ControlResponse.FetIdx)
}

// bytes Data = 4;
inline void ControlResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlResponse::data() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ControlResponse.Data)
  return data_.GetNoArena();
}
inline void ControlResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerProtocol.ControlResponse.Data)
}
#if LANG_CXX11
inline void ControlResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerProtocol.ControlResponse.Data)
}
#endif
inline void ControlResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerProtocol.ControlResponse.Data)
}
inline void ControlResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerProtocol.ControlResponse.Data)
}
inline ::std::string* ControlResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ServerProtocol.ControlResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlResponse::release_data() {
  // @@protoc_insertion_point(field_release:ServerProtocol.ControlResponse.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ServerProtocol.ControlResponse.Data)
}

// int32 Time = 5;
inline void ControlResponse::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 ControlResponse::time() const {
  // @@protoc_insertion_point(field_get:ServerProtocol.ControlResponse.Time)
  return time_;
}
inline void ControlResponse::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ServerProtocol.ControlResponse.Time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerProtocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ServerProtocol::CmdCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::CmdCode>() {
  return ::ServerProtocol::CmdCode_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::ControlCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::ControlCommand>() {
  return ::ServerProtocol::ControlCommand_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::IRISCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::IRISCmdType>() {
  return ::ServerProtocol::IRISCmdType_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::GeneralDataBlockCharacteristics> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::GeneralDataBlockCharacteristics>() {
  return ::ServerProtocol::GeneralDataBlockCharacteristics_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::CardsWhiteListState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::CardsWhiteListState>() {
  return ::ServerProtocol::CardsWhiteListState_descriptor();
}
template <> struct is_proto_enum< ::ServerProtocol::UpDataTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerProtocol::UpDataTypes>() {
  return ::ServerProtocol::UpDataTypes_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DeviceProtocol_2eproto
