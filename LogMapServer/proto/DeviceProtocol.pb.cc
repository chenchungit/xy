// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceProtocol.proto

#include "DeviceProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_DeviceProtocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceLog;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GWDeviceProperty;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GWFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemoteOpen;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DeviceProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GWDeviceInfo;
}  // namespace protobuf_DeviceProtocol_2eproto
namespace ServerProtocol {
class VersionManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VersionManager>
      _instance;
} _VersionManager_default_instance_;
class DeleteGwDeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteGwDevice>
      _instance;
} _DeleteGwDevice_default_instance_;
class DeviceCrcVerificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceCrcVerification>
      _instance;
} _DeviceCrcVerification_default_instance_;
class UpDeviceHeartReponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpDeviceHeartReponse>
      _instance;
} _UpDeviceHeartReponse_default_instance_;
class HmDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmDataRequest>
      _instance;
} _HmDataRequest_default_instance_;
class HmDataReponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmDataReponse>
      _instance;
} _HmDataReponse_default_instance_;
class NBDeviceDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NBDeviceDataRequest>
      _instance;
} _NBDeviceDataRequest_default_instance_;
class DeviceOfflineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceOffline>
      _instance;
} _DeviceOffline_default_instance_;
class SystemCommonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemCommonResponse>
      _instance;
} _SystemCommonResponse_default_instance_;
class D2SCalibrationTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<D2SCalibrationTime>
      _instance;
} _D2SCalibrationTime_default_instance_;
class ModifyDeviceStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyDeviceState>
      _instance;
} _ModifyDeviceState_default_instance_;
class DeviceLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceLog>
      _instance;
} _DeviceLog_default_instance_;
class UpLogTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpLogTable>
      _instance;
} _UpLogTable_default_instance_;
class UpLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpLogResponse>
      _instance;
} _UpLogResponse_default_instance_;
class GWUPDeviceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GWUPDeviceData>
      _instance;
} _GWUPDeviceData_default_instance_;
class GWDeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GWDeviceInfo>
      _instance;
} _GWDeviceInfo_default_instance_;
class GWDevicePropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GWDeviceProperty>
      _instance;
} _GWDeviceProperty_default_instance_;
class SensorStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorState>
      _instance;
} _SensorState_default_instance_;
class StateTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateTable>
      _instance;
} _StateTable_default_instance_;
class DeviceDeleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceDelete>
      _instance;
} _DeviceDelete_default_instance_;
class GWFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GWFeature>
      _instance;
} _GWFeature_default_instance_;
class DeviceConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceConfig>
      _instance;
} _DeviceConfig_default_instance_;
class TransmissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transmission>
      _instance;
} _Transmission_default_instance_;
class TransmissionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransmissionResponse>
      _instance;
} _TransmissionResponse_default_instance_;
class WhiteBlackListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WhiteBlackList>
      _instance;
} _WhiteBlackList_default_instance_;
class DispatchWBListResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispatchWBListResult>
      _instance;
} _DispatchWBListResult_default_instance_;
class DeviceTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceTable>
      _instance;
} _DeviceTable_default_instance_;
class FeatureTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeatureTable>
      _instance;
} _FeatureTable_default_instance_;
class RemoteOpenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteOpen>
      _instance;
} _RemoteOpen_default_instance_;
class AIOTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AIOT>
      _instance;
} _AIOT_default_instance_;
class NBAnswerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NBAnswer>
      _instance;
} _NBAnswer_default_instance_;
class MqttSubscribeInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MqttSubscribeInit>
      _instance;
} _MqttSubscribeInit_default_instance_;
class SubscribeInitDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeInitData>
      _instance;
} _SubscribeInitData_default_instance_;
class ControlResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlResponse>
      _instance;
} _ControlResponse_default_instance_;
}  // namespace ServerProtocol
namespace protobuf_DeviceProtocol_2eproto {
static void InitDefaultsVersionManager() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_VersionManager_default_instance_;
    new (ptr) ::ServerProtocol::VersionManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::VersionManager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VersionManager =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersionManager}, {}};

static void InitDefaultsDeleteGwDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeleteGwDevice_default_instance_;
    new (ptr) ::ServerProtocol::DeleteGwDevice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeleteGwDevice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteGwDevice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteGwDevice}, {}};

static void InitDefaultsDeviceCrcVerification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceCrcVerification_default_instance_;
    new (ptr) ::ServerProtocol::DeviceCrcVerification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceCrcVerification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceCrcVerification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceCrcVerification}, {}};

static void InitDefaultsUpDeviceHeartReponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_UpDeviceHeartReponse_default_instance_;
    new (ptr) ::ServerProtocol::UpDeviceHeartReponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::UpDeviceHeartReponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpDeviceHeartReponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpDeviceHeartReponse}, {}};

static void InitDefaultsHmDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_HmDataRequest_default_instance_;
    new (ptr) ::ServerProtocol::HmDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::HmDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HmDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHmDataRequest}, {}};

static void InitDefaultsHmDataReponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_HmDataReponse_default_instance_;
    new (ptr) ::ServerProtocol::HmDataReponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::HmDataReponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HmDataReponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHmDataReponse}, {}};

static void InitDefaultsNBDeviceDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_NBDeviceDataRequest_default_instance_;
    new (ptr) ::ServerProtocol::NBDeviceDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::NBDeviceDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NBDeviceDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNBDeviceDataRequest}, {}};

static void InitDefaultsDeviceOffline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceOffline_default_instance_;
    new (ptr) ::ServerProtocol::DeviceOffline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceOffline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceOffline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceOffline}, {}};

static void InitDefaultsSystemCommonResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_SystemCommonResponse_default_instance_;
    new (ptr) ::ServerProtocol::SystemCommonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::SystemCommonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemCommonResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemCommonResponse}, {}};

static void InitDefaultsD2SCalibrationTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_D2SCalibrationTime_default_instance_;
    new (ptr) ::ServerProtocol::D2SCalibrationTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::D2SCalibrationTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_D2SCalibrationTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsD2SCalibrationTime}, {}};

static void InitDefaultsModifyDeviceState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_ModifyDeviceState_default_instance_;
    new (ptr) ::ServerProtocol::ModifyDeviceState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::ModifyDeviceState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModifyDeviceState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModifyDeviceState}, {}};

static void InitDefaultsDeviceLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceLog_default_instance_;
    new (ptr) ::ServerProtocol::DeviceLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceLog}, {}};

static void InitDefaultsUpLogTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_UpLogTable_default_instance_;
    new (ptr) ::ServerProtocol::UpLogTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::UpLogTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpLogTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpLogTable}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceLog.base,}};

static void InitDefaultsUpLogResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_UpLogResponse_default_instance_;
    new (ptr) ::ServerProtocol::UpLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::UpLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpLogResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpLogResponse}, {}};

static void InitDefaultsGWUPDeviceData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_GWUPDeviceData_default_instance_;
    new (ptr) ::ServerProtocol::GWUPDeviceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::GWUPDeviceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GWUPDeviceData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGWUPDeviceData}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceInfo.base,}};

static void InitDefaultsGWDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_GWDeviceInfo_default_instance_;
    new (ptr) ::ServerProtocol::GWDeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::GWDeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GWDeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGWDeviceInfo}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceProperty.base,}};

static void InitDefaultsGWDeviceProperty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_GWDeviceProperty_default_instance_;
    new (ptr) ::ServerProtocol::GWDeviceProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::GWDeviceProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GWDeviceProperty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGWDeviceProperty}, {}};

static void InitDefaultsSensorState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_SensorState_default_instance_;
    new (ptr) ::ServerProtocol::SensorState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::SensorState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorState}, {}};

static void InitDefaultsStateTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_StateTable_default_instance_;
    new (ptr) ::ServerProtocol::StateTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::StateTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StateTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStateTable}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_SensorState.base,}};

static void InitDefaultsDeviceDelete() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceDelete_default_instance_;
    new (ptr) ::ServerProtocol::DeviceDelete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceDelete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceDelete =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceDelete}, {}};

static void InitDefaultsGWFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_GWFeature_default_instance_;
    new (ptr) ::ServerProtocol::GWFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::GWFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GWFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGWFeature}, {}};

static void InitDefaultsDeviceConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceConfig_default_instance_;
    new (ptr) ::ServerProtocol::DeviceConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceConfig}, {}};

static void InitDefaultsTransmission() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_Transmission_default_instance_;
    new (ptr) ::ServerProtocol::Transmission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::Transmission::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Transmission =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmission}, {}};

static void InitDefaultsTransmissionResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_TransmissionResponse_default_instance_;
    new (ptr) ::ServerProtocol::TransmissionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::TransmissionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransmissionResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmissionResponse}, {}};

static void InitDefaultsWhiteBlackList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_WhiteBlackList_default_instance_;
    new (ptr) ::ServerProtocol::WhiteBlackList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::WhiteBlackList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WhiteBlackList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWhiteBlackList}, {}};

static void InitDefaultsDispatchWBListResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DispatchWBListResult_default_instance_;
    new (ptr) ::ServerProtocol::DispatchWBListResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DispatchWBListResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DispatchWBListResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDispatchWBListResult}, {}};

static void InitDefaultsDeviceTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_DeviceTable_default_instance_;
    new (ptr) ::ServerProtocol::DeviceTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::DeviceTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceTable}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceInfo.base,}};

static void InitDefaultsFeatureTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_FeatureTable_default_instance_;
    new (ptr) ::ServerProtocol::FeatureTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::FeatureTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FeatureTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFeatureTable}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_GWFeature.base,}};

static void InitDefaultsRemoteOpen() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_RemoteOpen_default_instance_;
    new (ptr) ::ServerProtocol::RemoteOpen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::RemoteOpen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoteOpen =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoteOpen}, {}};

static void InitDefaultsAIOT() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_AIOT_default_instance_;
    new (ptr) ::ServerProtocol::AIOT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::AIOT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AIOT =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAIOT}, {
      &protobuf_DeviceProtocol_2eproto::scc_info_RemoteOpen.base,}};

static void InitDefaultsNBAnswer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_NBAnswer_default_instance_;
    new (ptr) ::ServerProtocol::NBAnswer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::NBAnswer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NBAnswer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNBAnswer}, {}};

static void InitDefaultsMqttSubscribeInit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_MqttSubscribeInit_default_instance_;
    new (ptr) ::ServerProtocol::MqttSubscribeInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::MqttSubscribeInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MqttSubscribeInit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMqttSubscribeInit}, {}};

static void InitDefaultsSubscribeInitData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_SubscribeInitData_default_instance_;
    new (ptr) ::ServerProtocol::SubscribeInitData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::SubscribeInitData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeInitData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeInitData}, {}};

static void InitDefaultsControlResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServerProtocol::_ControlResponse_default_instance_;
    new (ptr) ::ServerProtocol::ControlResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerProtocol::ControlResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VersionManager.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteGwDevice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceCrcVerification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpDeviceHeartReponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HmDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HmDataReponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NBDeviceDataRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceOffline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemCommonResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_D2SCalibrationTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifyDeviceState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceLog.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpLogTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpLogResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GWUPDeviceData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GWDeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GWDeviceProperty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceDelete.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GWFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transmission.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransmissionResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WhiteBlackList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DispatchWBListResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeatureTable.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteOpen.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AIOT.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NBAnswer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MqttSubscribeInit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeInitData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlResponse.base);
}

::google::protobuf::Metadata file_level_metadata[34];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::VersionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::VersionManager, vertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::VersionManager, interfacename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeleteGwDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeleteGwDevice, gatewaymac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeleteGwDevice, devicemac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceCrcVerification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceCrcVerification, gatewaymac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceCrcVerification, devicecrc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpDeviceHeartReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpDeviceHeartReponse, gatewaymac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpDeviceHeartReponse, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataRequest, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataRequest, devmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataReponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataReponse, devmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::HmDataReponse, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBDeviceDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBDeviceDataRequest, gwmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceOffline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceOffline, gwmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SystemCommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SystemCommonResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SystemCommonResponse, curtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SystemCommonResponse, remark_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::D2SCalibrationTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::D2SCalibrationTime, macaddress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ModifyDeviceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ModifyDeviceState, sevicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ModifyDeviceState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, logtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, cardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, funtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, logtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceLog, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogTable, logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogTable, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogTable, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogTable, devicecrc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogResponse, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::UpLogResponse, devicecrcstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWUPDeviceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWUPDeviceData, gwdeviceinfolist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, devicemodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, fwver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, hwver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, sysver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, otherver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, curtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, voice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceInfo, deviceproperty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, rootfetidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, devid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, drvidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, powerlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, fetcrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWDeviceProperty, grpfeature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, fetidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, changed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SensorState, time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::StateTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::StateTable, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::StateTable, sensorstatelist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceDelete, actiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceDelete, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceDelete, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWFeature, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWFeature, fet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWFeature, rootindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::GWFeature, devicemac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceConfig, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceConfig, curtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceConfig, configtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceConfig, configdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, curtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::Transmission, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::TransmissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::TransmissionResponse, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::TransmissionResponse, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::TransmissionResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::TransmissionResponse, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, fetidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, recordid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, cardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, funtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, listtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::WhiteBlackList, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DispatchWBListResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DispatchWBListResult, recordid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DispatchWBListResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceTable, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceTable, deviceinfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::DeviceTable, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::FeatureTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::FeatureTable, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::FeatureTable, featurelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::FeatureTable, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::FeatureTable, devicecrc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, curtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::RemoteOpen, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, fetidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, paralist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, remoteaoit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, actiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, begintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::AIOT, endtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBAnswer, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBAnswer, aiotcommand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::NBAnswer, whiteblacklist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::MqttSubscribeInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::MqttSubscribeInit, gwmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SubscribeInitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SubscribeInitData, gwmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SubscribeInitData, devicelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::SubscribeInitData, stime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, devicemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, fetidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerProtocol::ControlResponse, time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServerProtocol::VersionManager)},
  { 7, -1, sizeof(::ServerProtocol::DeleteGwDevice)},
  { 14, -1, sizeof(::ServerProtocol::DeviceCrcVerification)},
  { 21, -1, sizeof(::ServerProtocol::UpDeviceHeartReponse)},
  { 28, -1, sizeof(::ServerProtocol::HmDataRequest)},
  { 35, -1, sizeof(::ServerProtocol::HmDataReponse)},
  { 43, -1, sizeof(::ServerProtocol::NBDeviceDataRequest)},
  { 49, -1, sizeof(::ServerProtocol::DeviceOffline)},
  { 55, -1, sizeof(::ServerProtocol::SystemCommonResponse)},
  { 63, -1, sizeof(::ServerProtocol::D2SCalibrationTime)},
  { 69, -1, sizeof(::ServerProtocol::ModifyDeviceState)},
  { 76, -1, sizeof(::ServerProtocol::DeviceLog)},
  { 88, -1, sizeof(::ServerProtocol::UpLogTable)},
  { 97, -1, sizeof(::ServerProtocol::UpLogResponse)},
  { 105, -1, sizeof(::ServerProtocol::GWUPDeviceData)},
  { 111, -1, sizeof(::ServerProtocol::GWDeviceInfo)},
  { 129, -1, sizeof(::ServerProtocol::GWDeviceProperty)},
  { 141, -1, sizeof(::ServerProtocol::SensorState)},
  { 151, -1, sizeof(::ServerProtocol::StateTable)},
  { 158, -1, sizeof(::ServerProtocol::DeviceDelete)},
  { 166, -1, sizeof(::ServerProtocol::GWFeature)},
  { 175, -1, sizeof(::ServerProtocol::DeviceConfig)},
  { 184, -1, sizeof(::ServerProtocol::Transmission)},
  { 194, -1, sizeof(::ServerProtocol::TransmissionResponse)},
  { 203, -1, sizeof(::ServerProtocol::WhiteBlackList)},
  { 219, -1, sizeof(::ServerProtocol::DispatchWBListResult)},
  { 226, -1, sizeof(::ServerProtocol::DeviceTable)},
  { 234, -1, sizeof(::ServerProtocol::FeatureTable)},
  { 243, -1, sizeof(::ServerProtocol::RemoteOpen)},
  { 253, -1, sizeof(::ServerProtocol::AIOT)},
  { 270, -1, sizeof(::ServerProtocol::NBAnswer)},
  { 278, -1, sizeof(::ServerProtocol::MqttSubscribeInit)},
  { 284, -1, sizeof(::ServerProtocol::SubscribeInitData)},
  { 292, -1, sizeof(::ServerProtocol::ControlResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_VersionManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeleteGwDevice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceCrcVerification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_UpDeviceHeartReponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_HmDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_HmDataReponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_NBDeviceDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceOffline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_SystemCommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_D2SCalibrationTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_ModifyDeviceState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_UpLogTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_UpLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_GWUPDeviceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_GWDeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_GWDeviceProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_SensorState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_StateTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_GWFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_Transmission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_TransmissionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_WhiteBlackList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DispatchWBListResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_DeviceTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_FeatureTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_RemoteOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_AIOT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_NBAnswer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_MqttSubscribeInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_SubscribeInitData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ServerProtocol::_ControlResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "DeviceProtocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 34);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024DeviceProtocol.proto\022\016ServerProtocol\"8"
      "\n\016VersionManager\022\017\n\007VerType\030\001 \001(\005\022\025\n\rInt"
      "erFaceName\030\002 \001(\t\"7\n\016DeleteGwDevice\022\022\n\nGa"
      "tewayMac\030\001 \001(\t\022\021\n\tDeviceMac\030\002 \001(\t\">\n\025Dev"
      "iceCrcVerification\022\022\n\nGatewayMac\030\001 \001(\t\022\021"
      "\n\tDeviceCrc\030\002 \001(\005\"9\n\024UpDeviceHeartRepons"
      "e\022\022\n\nGatewayMac\030\001 \001(\t\022\r\n\005State\030\002 \001(\005\".\n\r"
      "HmDataRequest\022\r\n\005GWMac\030\001 \001(\014\022\016\n\006DevMac\030\002"
      " \001(\014\">\n\rHmDataReponse\022\r\n\005State\030\001 \001(\005\022\016\n\006"
      "DevMac\030\002 \001(\014\022\016\n\006UserId\030\003 \001(\003\"$\n\023NBDevice"
      "DataRequest\022\r\n\005GWMac\030\001 \001(\014\"\036\n\rDeviceOffl"
      "ine\022\r\n\005GWMac\030\001 \001(\014\"F\n\024SystemCommonRespon"
      "se\022\r\n\005State\030\001 \001(\005\022\017\n\007CurTime\030\002 \001(\005\022\016\n\006Re"
      "mark\030\003 \001(\t\"(\n\022D2SCalibrationTime\022\022\n\nMacA"
      "ddress\030\001 \001(\t\"5\n\021ModifyDeviceState\022\021\n\tSev"
      "iceMac\030\001 \001(\014\022\r\n\005State\030\002 \001(\005\"\204\001\n\tDeviceLo"
      "g\022\021\n\tDeviceMac\030\001 \001(\014\022\017\n\007LogTime\030\002 \001(\005\022\016\n"
      "\006CardId\030\003 \001(\014\022\020\n\010CardType\030\004 \001(\005\022\017\n\007FunTy"
      "pe\030\005 \001(\005\022\017\n\007LogType\030\006 \001(\005\022\017\n\007Message\030\007 \001"
      "(\014\"c\n\nUpLogTable\022\'\n\004Logs\030\001 \003(\0132\031.ServerP"
      "rotocol.DeviceLog\022\013\n\003Mac\030\002 \001(\014\022\014\n\004type\030\003"
      " \001(\005\022\021\n\tDeviceCrc\030\004 \001(\005\"C\n\rUpLogResponse"
      "\022\r\n\005Count\030\001 \001(\005\022\013\n\003Mac\030\002 \001(\014\022\026\n\016DeviceCr"
      "cState\030\003 \001(\005\"H\n\016GWUPDeviceData\0226\n\020GWDevi"
      "ceInfoList\030\001 \003(\0132\034.ServerProtocol.GWDevi"
      "ceInfo\"\226\002\n\014GWDeviceInfo\022\021\n\tDeviceMac\030\001 \001"
      "(\014\022\023\n\013DeviceModel\030\002 \001(\014\022\r\n\005FwVer\030\003 \001(\r\022\r"
      "\n\005HwVer\030\004 \001(\r\022\016\n\006SysVer\030\005 \001(\r\022\020\n\010OtherVe"
      "r\030\006 \001(\r\022\017\n\007CurTime\030\007 \001(\r\022\r\n\005State\030\010 \001(\r\022"
      "\017\n\007Voltage\030\t \001(\r\022\023\n\013Temperature\030\n \001(\r\022\r\n"
      "\005Voice\030\013 \001(\r\022\017\n\007Message\030\014 \001(\014\0228\n\016DeviceP"
      "roperty\030\r \001(\0132 .ServerProtocol.GWDeviceP"
      "roperty\"\215\001\n\020GWDeviceProperty\022\022\n\nRootFetI"
      "dx\030\001 \001(\r\022\r\n\005DevId\030\002 \001(\r\022\016\n\006DrvIdx\030\003 \001(\r\022"
      "\022\n\nPowerLevel\030\004 \001(\r\022\016\n\006Active\030\005 \001(\010\022\016\n\006F"
      "etCrc\030\006 \001(\r\022\022\n\nGrpFeature\030\007 \001(\r\"_\n\013Senso"
      "rState\022\021\n\tDeviceMac\030\001 \001(\014\022\016\n\006FetIdx\030\002 \001("
      "\r\022\016\n\006Values\030\003 \001(\014\022\017\n\007Changed\030\004 \001(\r\022\014\n\004Ti"
      "me\030\005 \001(\r\"Q\n\nStateTable\022\r\n\005GwMac\030\001 \001(\014\0224\n"
      "\017SensorStatelist\030\002 \003(\0132\033.ServerProtocol."
      "SensorState\"C\n\014DeviceDelete\022\022\n\nActionTyp"
      "e\030\001 \001(\005\022\021\n\tDeviceMac\030\002 \001(\014\022\014\n\004Data\030\003 \001(\014"
      "\"M\n\tGWFeature\022\r\n\005Level\030\001 \001(\005\022\013\n\003Fet\030\002 \001("
      "\005\022\021\n\tRootIndex\030\003 \001(\005\022\021\n\tDeviceMac\030\004 \001(\014\""
      "Z\n\014DeviceConfig\022\021\n\tDeviceMac\030\001 \001(\014\022\017\n\007Cu"
      "rTime\030\002 \001(\005\022\022\n\nConfigType\030\003 \001(\005\022\022\n\nConfi"
      "gData\030\004 \001(\014\"a\n\014Transmission\022\021\n\tDeviceMac"
      "\030\001 \001(\014\022\021\n\tOperation\030\002 \001(\014\022\017\n\007CurTime\030\003 \001"
      "(\005\022\014\n\004Type\030\004 \001(\005\022\014\n\004Data\030\005 \001(\014\"X\n\024Transm"
      "issionResponse\022\021\n\tDeviceMac\030\001 \001(\014\022\021\n\tOpe"
      "ration\030\002 \001(\014\022\014\n\004Type\030\003 \001(\005\022\014\n\004Data\030\004 \001(\014"
      "\"\313\001\n\016WhiteBlackList\022\r\n\005GWMac\030\001 \001(\014\022\021\n\tDe"
      "viceMac\030\002 \001(\014\022\016\n\006CardId\030\003 \001(\014\022\016\n\006FetIdx\030"
      "\004 \001(\005\022\020\n\010RecordId\030\005 \001(\005\022\021\n\tStartTime\030\006 \001"
      "(\005\022\017\n\007EndTime\030\007 \001(\005\022\020\n\010CardType\030\010 \001(\005\022\017\n"
      "\007FunType\030\t \001(\005\022\020\n\010ListType\030\n \001(\005\022\014\n\004Data"
      "\030\013 \001(\014\"8\n\024DispatchWBListResult\022\020\n\010Record"
      "Id\030\001 \001(\005\022\016\n\006Result\030\002 \001(\005\"`\n\013DeviceTable\022"
      "\r\n\005GWMac\030\001 \001(\014\0224\n\016DeviceInfoList\030\002 \003(\0132\034"
      ".ServerProtocol.GWDeviceInfo\022\014\n\004Type\030\003 \001"
      "(\005\"n\n\014FeatureTable\022\r\n\005GWMac\030\001 \001(\014\022.\n\013Fea"
      "tureList\030\002 \003(\0132\031.ServerProtocol.GWFeatur"
      "e\022\014\n\004Type\030\003 \001(\005\022\021\n\tDeviceCrc\030\004 \001(\005\"^\n\nRe"
      "moteOpen\022\021\n\tDeviceMac\030\001 \001(\014\022\016\n\006CardId\030\002 "
      "\001(\014\022\017\n\007CurTime\030\003 \001(\005\022\016\n\006Action\030\004 \001(\005\022\014\n\004"
      "Data\030\005 \001(\014\"\222\002\n\004AIOT\022\021\n\tDeviceMac\030\001 \001(\014\022/"
      "\n\007Command\030\002 \001(\0162\036.ServerProtocol.Control"
      "Command\022\016\n\006FetIdx\030\003 \001(\005\022\017\n\007Feature\030\004 \001(\005"
      "\022\020\n\010ParaList\030\005 \003(\r\022\014\n\004Data\030\006 \001(\014\022\r\n\005GWMa"
      "c\030\007 \001(\014\022\016\n\006userId\030\010 \001(\005\022.\n\nRemoteAoit\030\t "
      "\001(\0132\032.ServerProtocol.RemoteOpen\022\022\n\nActio"
      "nType\030\n \001(\005\022\021\n\tBeginTime\030\013 \001(\003\022\017\n\007EndTim"
      "e\030\014 \001(\003\"F\n\010NBAnswer\022\r\n\005State\030\001 \001(\005\022\023\n\013AI"
      "OTCommand\030\002 \001(\014\022\026\n\016WhiteBlackList\030\003 \001(\014\""
      "\"\n\021MqttSubscribeInit\022\r\n\005GWMac\030\001 \001(\014\"E\n\021S"
      "ubscribeInitData\022\r\n\005GWMac\030\001 \001(\014\022\022\n\nDevic"
      "eList\030\002 \003(\014\022\r\n\005STime\030\003 \001(\005\"`\n\017ControlRes"
      "ponse\022\016\n\006Result\030\001 \001(\005\022\021\n\tDeviceMac\030\002 \001(\014"
      "\022\016\n\006FetIdx\030\003 \001(\005\022\014\n\004Data\030\004 \001(\014\022\014\n\004Time\030\005"
      " \001(\005*\257\006\n\007CmdCode\022\032\n\026D2S_CORRECTION_DEFAU"
      "LT\020\000\022\030\n\023D2S_CORRECTION_TIME\020\210\'\022\033\n\026D2S_MO"
      "DIFY_DEVICESTATE\020\211\'\022\025\n\020D2S_UP_DEVICELOG\020"
      "\213\'\022\030\n\023D2S_UP_DEVICEWARING\020\214\'\022\026\n\021D2S_UP_D"
      "EVICEINFO\020\215\'\022\026\n\021D2S_DELETE_DEVICE\020\216\'\022\017\n\n"
      "D2S_UP_FET\020\217\'\022\024\n\017D2S_GETWAY_INIT\020\220\'\022\035\n\030D"
      "2S_UP_CONTROL_RESPONESE\020\221\'\022\027\n\022D2S_DEVICE"
      "_OFFLINE\020\222\'\022\026\n\021D2S_WBLIST_RESULT\020\223\'\022\030\n\023D"
      "2S_DEVICE_UNONLINE\020\224\'\022\032\n\025D2S_NB_DEVICE_R"
      "EQUEST\020\225\'\022\034\n\027D2S_HM_TEMPLATE_REQUEST\020\226\'\022"
      "\034\n\027D2S_HM_TEMPLATE_REPONSE\020\227\'\022\031\n\024D2S_DEV"
      "ICE_CRC_HEART\020\230\'\022\032\n\025D2S_UP_DEVICEINFO_CR"
      "C\020\231\'\022\023\n\016D2S_UP_FET_CRC\020\232\'\022\024\n\017S2D_DOWN_CO"
      "NFIG\020\360.\022\022\n\rS2D_TRANS_CMD\020\361.\022\025\n\020S2D_DOWN_"
      "DATACMD\020\362.\022\031\n\024S2D_DOWN_DEVICETABLE\020\363.\022\022\n"
      "\rS2D_OPEN_DOOR\020\364.\022\024\n\017S2D_ACTION_AIOT\020\365.\022"
      "\030\n\023S2D_UP_LOG_RESPONSE\020\366.\022\024\n\017S2D_GETWAY_"
      "INIT\020\367.\022\034\n\027S2D_READ_DEVICE_COLLECT\020\370.\022\027\n"
      "\022S2D_NB_DATA_ANSWER\020\371.\022\032\n\025S2D_DEVICE_CRC"
      "_ANSWER\020\372.\022\030\n\023S2D_DELETE_GWDEVICE\020\373.\022\030\n\023"
      "S2D_VERSION_MANAGER\020\374.*\341\001\n\016ControlComman"
      "d\022\013\n\007DEFAULT\020\000\022\r\n\010DevOnOff\020\200\001\022\022\n\rDevBrig"
      "htness\020\201\001\022\r\n\010DevColor\020\202\001\022\022\n\rDevRemoteOpe"
      "n\020\203\001\022\020\n\013FetchEnerge\020\204\001\022\t\n\004BIBO\020\205\001\022\t\n\004Mod"
      "e\020\206\001\022\017\n\nPermitPair\020\207\001\022\022\n\rCounterConfig\020\210"
      "\001\022\022\n\rCounterModify\020\211\001\022\016\n\tBlockData\020\212\001\022\013\n"
      "\006DelFet\020\213\001*N\n\013IRISCmdType\022\020\n\014IRIS_DEFAUL"
      "T\020\000\022\016\n\nIRIS_BLOCK\020\001\022\014\n\010IRIS_DEL\020\002\022\017\n\013IRI"
      "S_CONFIG\020\003*\252\001\n\037GeneralDataBlockCharacter"
      "istics\022\017\n\013IFT_DEFAULT\020\000\022\023\n\016IFT_UPDATE_MC"
      "U\020\320\001\022\022\n\rIFT_UPDATE_BT\020\321\001\022\026\n\021IFT_IRIS_TEM"
      "PLATE\020\322\001\022\026\n\021IFT_FACE_TEMPLATE\020\323\001\022\035\n\030IFT_"
      "FINGERPRINT_TEMPLATE\020\324\001*z\n\023CardsWhiteLis"
      "tState\022\027\n\023CARDS_STATE_DEFAULT\020\000\022\021\n\rCARDS"
      "_STATE_0\020\001\022\021\n\rCARDS_STATE_1\020\002\022\021\n\rCARDS_S"
      "TATE_2\020\003\022\021\n\rCARDS_STATE_3\020\004*\302\001\n\013UpDataTy"
      "pes\022\017\n\013UDT_DEFAULT\020\000\022\n\n\006UDT_IR\020\001\022\023\n\017UDTD"
      "oorMagnetic\020\002\022\022\n\016UDTTemperature\020\003\022\017\n\013UDT"
      "Humidity\020\004\022\013\n\007UDSmoke\020\005\022\016\n\nUDTVoltage\020\006\022"
      "\016\n\nUDTCurrent\020\007\022\014\n\010UDTPower\020\010\022\r\n\tUDTEner"
      "ge\020\t\022\022\n\016UDTPowerFactor\020\nB\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeviceProtocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DeviceProtocol_2eproto
namespace ServerProtocol {
const ::google::protobuf::EnumDescriptor* CmdCode_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[0];
}
bool CmdCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 5000:
    case 5001:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
    case 6000:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6005:
    case 6006:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6011:
    case 6012:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlCommand_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[1];
}
bool ControlCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IRISCmdType_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[2];
}
bool IRISCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GeneralDataBlockCharacteristics_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[3];
}
bool GeneralDataBlockCharacteristics_IsValid(int value) {
  switch (value) {
    case 0:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CardsWhiteListState_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[4];
}
bool CardsWhiteListState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UpDataTypes_descriptor() {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DeviceProtocol_2eproto::file_level_enum_descriptors[5];
}
bool UpDataTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VersionManager::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionManager::kVerTypeFieldNumber;
const int VersionManager::kInterFaceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionManager::VersionManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_VersionManager.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.VersionManager)
}
VersionManager::VersionManager(const VersionManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interfacename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.interfacename().size() > 0) {
    interfacename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfacename_);
  }
  vertype_ = from.vertype_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.VersionManager)
}

void VersionManager::SharedCtor() {
  interfacename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertype_ = 0;
}

VersionManager::~VersionManager() {
  // @@protoc_insertion_point(destructor:ServerProtocol.VersionManager)
  SharedDtor();
}

void VersionManager::SharedDtor() {
  interfacename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VersionManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VersionManager::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VersionManager& VersionManager::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_VersionManager.base);
  return *internal_default_instance();
}


void VersionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.VersionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertype_ = 0;
  _internal_metadata_.Clear();
}

bool VersionManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.VersionManager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 VerType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InterFaceName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfacename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfacename().data(), static_cast<int>(this->interfacename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.VersionManager.InterFaceName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.VersionManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.VersionManager)
  return false;
#undef DO_
}

void VersionManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.VersionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 VerType = 1;
  if (this->vertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vertype(), output);
  }

  // string InterFaceName = 2;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), static_cast<int>(this->interfacename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.VersionManager.InterFaceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interfacename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.VersionManager)
}

::google::protobuf::uint8* VersionManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.VersionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 VerType = 1;
  if (this->vertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vertype(), target);
  }

  // string InterFaceName = 2;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), static_cast<int>(this->interfacename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.VersionManager.InterFaceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interfacename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.VersionManager)
  return target;
}

size_t VersionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.VersionManager)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string InterFaceName = 2;
  if (this->interfacename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfacename());
  }

  // int32 VerType = 1;
  if (this->vertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vertype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.VersionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.VersionManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.VersionManager)
    MergeFrom(*source);
  }
}

void VersionManager::MergeFrom(const VersionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.VersionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interfacename().size() > 0) {

    interfacename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfacename_);
  }
  if (from.vertype() != 0) {
    set_vertype(from.vertype());
  }
}

void VersionManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.VersionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionManager::CopyFrom(const VersionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.VersionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionManager::IsInitialized() const {
  return true;
}

void VersionManager::Swap(VersionManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionManager::InternalSwap(VersionManager* other) {
  using std::swap;
  interfacename_.Swap(&other->interfacename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vertype_, other->vertype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VersionManager::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteGwDevice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteGwDevice::kGatewayMacFieldNumber;
const int DeleteGwDevice::kDeviceMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteGwDevice::DeleteGwDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeleteGwDevice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeleteGwDevice)
}
DeleteGwDevice::DeleteGwDevice(const DeleteGwDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewaymac().size() > 0) {
    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeleteGwDevice)
}

void DeleteGwDevice::SharedCtor() {
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteGwDevice::~DeleteGwDevice() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeleteGwDevice)
  SharedDtor();
}

void DeleteGwDevice::SharedDtor() {
  gatewaymac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteGwDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteGwDevice::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteGwDevice& DeleteGwDevice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeleteGwDevice.base);
  return *internal_default_instance();
}


void DeleteGwDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeleteGwDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteGwDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeleteGwDevice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GatewayMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewaymac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.DeleteGwDevice.GatewayMac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DeviceMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicemac().data(), static_cast<int>(this->devicemac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.DeleteGwDevice.DeviceMac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeleteGwDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeleteGwDevice)
  return false;
#undef DO_
}

void DeleteGwDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeleteGwDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeleteGwDevice.GatewayMac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gatewaymac(), output);
  }

  // string DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemac().data(), static_cast<int>(this->devicemac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeleteGwDevice.DeviceMac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicemac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeleteGwDevice)
}

::google::protobuf::uint8* DeleteGwDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeleteGwDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeleteGwDevice.GatewayMac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gatewaymac(), target);
  }

  // string DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemac().data(), static_cast<int>(this->devicemac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeleteGwDevice.DeviceMac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicemac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeleteGwDevice)
  return target;
}

size_t DeleteGwDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeleteGwDevice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewaymac());
  }

  // string DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicemac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGwDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeleteGwDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGwDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteGwDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeleteGwDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeleteGwDevice)
    MergeFrom(*source);
  }
}

void DeleteGwDevice::MergeFrom(const DeleteGwDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeleteGwDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gatewaymac().size() > 0) {

    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
}

void DeleteGwDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeleteGwDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGwDevice::CopyFrom(const DeleteGwDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeleteGwDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGwDevice::IsInitialized() const {
  return true;
}

void DeleteGwDevice::Swap(DeleteGwDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteGwDevice::InternalSwap(DeleteGwDevice* other) {
  using std::swap;
  gatewaymac_.Swap(&other->gatewaymac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteGwDevice::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceCrcVerification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceCrcVerification::kGatewayMacFieldNumber;
const int DeviceCrcVerification::kDeviceCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceCrcVerification::DeviceCrcVerification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceCrcVerification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceCrcVerification)
}
DeviceCrcVerification::DeviceCrcVerification(const DeviceCrcVerification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewaymac().size() > 0) {
    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  devicecrc_ = from.devicecrc_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceCrcVerification)
}

void DeviceCrcVerification::SharedCtor() {
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecrc_ = 0;
}

DeviceCrcVerification::~DeviceCrcVerification() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceCrcVerification)
  SharedDtor();
}

void DeviceCrcVerification::SharedDtor() {
  gatewaymac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceCrcVerification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceCrcVerification::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceCrcVerification& DeviceCrcVerification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceCrcVerification.base);
  return *internal_default_instance();
}


void DeviceCrcVerification::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceCrcVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicecrc_ = 0;
  _internal_metadata_.Clear();
}

bool DeviceCrcVerification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceCrcVerification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GatewayMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewaymac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.DeviceCrcVerification.GatewayMac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DeviceCrc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceCrcVerification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceCrcVerification)
  return false;
#undef DO_
}

void DeviceCrcVerification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceCrcVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeviceCrcVerification.GatewayMac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gatewaymac(), output);
  }

  // int32 DeviceCrc = 2;
  if (this->devicecrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->devicecrc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceCrcVerification)
}

::google::protobuf::uint8* DeviceCrcVerification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceCrcVerification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.DeviceCrcVerification.GatewayMac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gatewaymac(), target);
  }

  // int32 DeviceCrc = 2;
  if (this->devicecrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->devicecrc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceCrcVerification)
  return target;
}

size_t DeviceCrcVerification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceCrcVerification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewaymac());
  }

  // int32 DeviceCrc = 2;
  if (this->devicecrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicecrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceCrcVerification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceCrcVerification)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceCrcVerification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceCrcVerification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceCrcVerification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceCrcVerification)
    MergeFrom(*source);
  }
}

void DeviceCrcVerification::MergeFrom(const DeviceCrcVerification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceCrcVerification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gatewaymac().size() > 0) {

    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  if (from.devicecrc() != 0) {
    set_devicecrc(from.devicecrc());
  }
}

void DeviceCrcVerification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceCrcVerification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceCrcVerification::CopyFrom(const DeviceCrcVerification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceCrcVerification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCrcVerification::IsInitialized() const {
  return true;
}

void DeviceCrcVerification::Swap(DeviceCrcVerification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceCrcVerification::InternalSwap(DeviceCrcVerification* other) {
  using std::swap;
  gatewaymac_.Swap(&other->gatewaymac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(devicecrc_, other->devicecrc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceCrcVerification::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpDeviceHeartReponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpDeviceHeartReponse::kGatewayMacFieldNumber;
const int UpDeviceHeartReponse::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpDeviceHeartReponse::UpDeviceHeartReponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_UpDeviceHeartReponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.UpDeviceHeartReponse)
}
UpDeviceHeartReponse::UpDeviceHeartReponse(const UpDeviceHeartReponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gatewaymac().size() > 0) {
    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.UpDeviceHeartReponse)
}

void UpDeviceHeartReponse::SharedCtor() {
  gatewaymac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

UpDeviceHeartReponse::~UpDeviceHeartReponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.UpDeviceHeartReponse)
  SharedDtor();
}

void UpDeviceHeartReponse::SharedDtor() {
  gatewaymac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpDeviceHeartReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpDeviceHeartReponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpDeviceHeartReponse& UpDeviceHeartReponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_UpDeviceHeartReponse.base);
  return *internal_default_instance();
}


void UpDeviceHeartReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.UpDeviceHeartReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gatewaymac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

bool UpDeviceHeartReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.UpDeviceHeartReponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string GatewayMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewaymac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.UpDeviceHeartReponse.GatewayMac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 State = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.UpDeviceHeartReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.UpDeviceHeartReponse)
  return false;
#undef DO_
}

void UpDeviceHeartReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.UpDeviceHeartReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.UpDeviceHeartReponse.GatewayMac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gatewaymac(), output);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.UpDeviceHeartReponse)
}

::google::protobuf::uint8* UpDeviceHeartReponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.UpDeviceHeartReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewaymac().data(), static_cast<int>(this->gatewaymac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.UpDeviceHeartReponse.GatewayMac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gatewaymac(), target);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.UpDeviceHeartReponse)
  return target;
}

size_t UpDeviceHeartReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.UpDeviceHeartReponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string GatewayMac = 1;
  if (this->gatewaymac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewaymac());
  }

  // int32 State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpDeviceHeartReponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.UpDeviceHeartReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpDeviceHeartReponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpDeviceHeartReponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.UpDeviceHeartReponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.UpDeviceHeartReponse)
    MergeFrom(*source);
  }
}

void UpDeviceHeartReponse::MergeFrom(const UpDeviceHeartReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.UpDeviceHeartReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gatewaymac().size() > 0) {

    gatewaymac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewaymac_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void UpDeviceHeartReponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.UpDeviceHeartReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpDeviceHeartReponse::CopyFrom(const UpDeviceHeartReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.UpDeviceHeartReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpDeviceHeartReponse::IsInitialized() const {
  return true;
}

void UpDeviceHeartReponse::Swap(UpDeviceHeartReponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpDeviceHeartReponse::InternalSwap(UpDeviceHeartReponse* other) {
  using std::swap;
  gatewaymac_.Swap(&other->gatewaymac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpDeviceHeartReponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmDataRequest::kGWMacFieldNumber;
const int HmDataRequest::kDevMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmDataRequest::HmDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_HmDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.HmDataRequest)
}
HmDataRequest::HmDataRequest(const HmDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  devmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devmac().size() > 0) {
    devmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devmac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.HmDataRequest)
}

void HmDataRequest::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HmDataRequest::~HmDataRequest() {
  // @@protoc_insertion_point(destructor:ServerProtocol.HmDataRequest)
  SharedDtor();
}

void HmDataRequest::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HmDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HmDataRequest::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmDataRequest& HmDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_HmDataRequest.base);
  return *internal_default_instance();
}


void HmDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.HmDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HmDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.HmDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DevMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.HmDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.HmDataRequest)
  return false;
#undef DO_
}

void HmDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.HmDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devmac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.HmDataRequest)
}

::google::protobuf::uint8* HmDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.HmDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devmac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.HmDataRequest)
  return target;
}

size_t HmDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.HmDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.HmDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HmDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.HmDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.HmDataRequest)
    MergeFrom(*source);
  }
}

void HmDataRequest::MergeFrom(const HmDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.HmDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.devmac().size() > 0) {

    devmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devmac_);
  }
}

void HmDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.HmDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmDataRequest::CopyFrom(const HmDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.HmDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmDataRequest::IsInitialized() const {
  return true;
}

void HmDataRequest::Swap(HmDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmDataRequest::InternalSwap(HmDataRequest* other) {
  using std::swap;
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  devmac_.Swap(&other->devmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HmDataRequest::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmDataReponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmDataReponse::kStateFieldNumber;
const int HmDataReponse::kDevMacFieldNumber;
const int HmDataReponse::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmDataReponse::HmDataReponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_HmDataReponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.HmDataReponse)
}
HmDataReponse::HmDataReponse(const HmDataReponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devmac().size() > 0) {
    devmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devmac_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.HmDataReponse)
}

void HmDataReponse::SharedCtor() {
  devmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(state_));
}

HmDataReponse::~HmDataReponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.HmDataReponse)
  SharedDtor();
}

void HmDataReponse::SharedDtor() {
  devmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HmDataReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HmDataReponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmDataReponse& HmDataReponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_HmDataReponse.base);
  return *internal_default_instance();
}


void HmDataReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.HmDataReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool HmDataReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.HmDataReponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DevMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 UserId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.HmDataReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.HmDataReponse)
  return false;
#undef DO_
}

void HmDataReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.HmDataReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devmac(), output);
  }

  // int64 UserId = 3;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.HmDataReponse)
}

::google::protobuf::uint8* HmDataReponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.HmDataReponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devmac(), target);
  }

  // int64 UserId = 3;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.HmDataReponse)
  return target;
}

size_t HmDataReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.HmDataReponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DevMac = 2;
  if (this->devmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devmac());
  }

  // int64 UserId = 3;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmDataReponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.HmDataReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HmDataReponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmDataReponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.HmDataReponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.HmDataReponse)
    MergeFrom(*source);
  }
}

void HmDataReponse::MergeFrom(const HmDataReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.HmDataReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devmac().size() > 0) {

    devmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devmac_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void HmDataReponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.HmDataReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmDataReponse::CopyFrom(const HmDataReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.HmDataReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmDataReponse::IsInitialized() const {
  return true;
}

void HmDataReponse::Swap(HmDataReponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmDataReponse::InternalSwap(HmDataReponse* other) {
  using std::swap;
  devmac_.Swap(&other->devmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HmDataReponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NBDeviceDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NBDeviceDataRequest::kGWMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NBDeviceDataRequest::NBDeviceDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_NBDeviceDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.NBDeviceDataRequest)
}
NBDeviceDataRequest::NBDeviceDataRequest(const NBDeviceDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.NBDeviceDataRequest)
}

void NBDeviceDataRequest::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NBDeviceDataRequest::~NBDeviceDataRequest() {
  // @@protoc_insertion_point(destructor:ServerProtocol.NBDeviceDataRequest)
  SharedDtor();
}

void NBDeviceDataRequest::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NBDeviceDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NBDeviceDataRequest::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NBDeviceDataRequest& NBDeviceDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_NBDeviceDataRequest.base);
  return *internal_default_instance();
}


void NBDeviceDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.NBDeviceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NBDeviceDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.NBDeviceDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.NBDeviceDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.NBDeviceDataRequest)
  return false;
#undef DO_
}

void NBDeviceDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.NBDeviceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.NBDeviceDataRequest)
}

::google::protobuf::uint8* NBDeviceDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.NBDeviceDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.NBDeviceDataRequest)
  return target;
}

size_t NBDeviceDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.NBDeviceDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NBDeviceDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.NBDeviceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NBDeviceDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NBDeviceDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.NBDeviceDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.NBDeviceDataRequest)
    MergeFrom(*source);
  }
}

void NBDeviceDataRequest::MergeFrom(const NBDeviceDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.NBDeviceDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
}

void NBDeviceDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.NBDeviceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NBDeviceDataRequest::CopyFrom(const NBDeviceDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.NBDeviceDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NBDeviceDataRequest::IsInitialized() const {
  return true;
}

void NBDeviceDataRequest::Swap(NBDeviceDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NBDeviceDataRequest::InternalSwap(NBDeviceDataRequest* other) {
  using std::swap;
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NBDeviceDataRequest::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceOffline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceOffline::kGWMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceOffline::DeviceOffline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceOffline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceOffline)
}
DeviceOffline::DeviceOffline(const DeviceOffline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceOffline)
}

void DeviceOffline::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceOffline::~DeviceOffline() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceOffline)
  SharedDtor();
}

void DeviceOffline::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceOffline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceOffline::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceOffline& DeviceOffline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceOffline.base);
  return *internal_default_instance();
}


void DeviceOffline::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeviceOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceOffline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceOffline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceOffline)
  return false;
#undef DO_
}

void DeviceOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceOffline)
}

::google::protobuf::uint8* DeviceOffline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceOffline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceOffline)
  return target;
}

size_t DeviceOffline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceOffline)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceOffline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceOffline)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceOffline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceOffline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceOffline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceOffline)
    MergeFrom(*source);
  }
}

void DeviceOffline::MergeFrom(const DeviceOffline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceOffline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
}

void DeviceOffline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceOffline::CopyFrom(const DeviceOffline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceOffline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOffline::IsInitialized() const {
  return true;
}

void DeviceOffline::Swap(DeviceOffline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceOffline::InternalSwap(DeviceOffline* other) {
  using std::swap;
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceOffline::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemCommonResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemCommonResponse::kStateFieldNumber;
const int SystemCommonResponse::kCurTimeFieldNumber;
const int SystemCommonResponse::kRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemCommonResponse::SystemCommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_SystemCommonResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.SystemCommonResponse)
}
SystemCommonResponse::SystemCommonResponse(const SystemCommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remark().size() > 0) {
    remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&curtime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(curtime_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.SystemCommonResponse)
}

void SystemCommonResponse::SharedCtor() {
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(curtime_));
}

SystemCommonResponse::~SystemCommonResponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.SystemCommonResponse)
  SharedDtor();
}

void SystemCommonResponse::SharedDtor() {
  remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemCommonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SystemCommonResponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemCommonResponse& SystemCommonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_SystemCommonResponse.base);
  return *internal_default_instance();
}


void SystemCommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.SystemCommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curtime_) -
      reinterpret_cast<char*>(&state_)) + sizeof(curtime_));
  _internal_metadata_.Clear();
}

bool SystemCommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.SystemCommonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CurTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Remark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remark().data(), static_cast<int>(this->remark().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.SystemCommonResponse.Remark"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.SystemCommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.SystemCommonResponse)
  return false;
#undef DO_
}

void SystemCommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.SystemCommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curtime(), output);
  }

  // string Remark = 3;
  if (this->remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.SystemCommonResponse.Remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.SystemCommonResponse)
}

::google::protobuf::uint8* SystemCommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.SystemCommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curtime(), target);
  }

  // string Remark = 3;
  if (this->remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.SystemCommonResponse.Remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.SystemCommonResponse)
  return target;
}

size_t SystemCommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.SystemCommonResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Remark = 3;
  if (this->remark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remark());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemCommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.SystemCommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemCommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemCommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.SystemCommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.SystemCommonResponse)
    MergeFrom(*source);
  }
}

void SystemCommonResponse::MergeFrom(const SystemCommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.SystemCommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remark().size() > 0) {

    remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
}

void SystemCommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.SystemCommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCommonResponse::CopyFrom(const SystemCommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.SystemCommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCommonResponse::IsInitialized() const {
  return true;
}

void SystemCommonResponse::Swap(SystemCommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemCommonResponse::InternalSwap(SystemCommonResponse* other) {
  using std::swap;
  remark_.Swap(&other->remark_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(curtime_, other->curtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SystemCommonResponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void D2SCalibrationTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int D2SCalibrationTime::kMacAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

D2SCalibrationTime::D2SCalibrationTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_D2SCalibrationTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.D2SCalibrationTime)
}
D2SCalibrationTime::D2SCalibrationTime(const D2SCalibrationTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.macaddress().size() > 0) {
    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.D2SCalibrationTime)
}

void D2SCalibrationTime::SharedCtor() {
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

D2SCalibrationTime::~D2SCalibrationTime() {
  // @@protoc_insertion_point(destructor:ServerProtocol.D2SCalibrationTime)
  SharedDtor();
}

void D2SCalibrationTime::SharedDtor() {
  macaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void D2SCalibrationTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* D2SCalibrationTime::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const D2SCalibrationTime& D2SCalibrationTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_D2SCalibrationTime.base);
  return *internal_default_instance();
}


void D2SCalibrationTime::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.D2SCalibrationTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool D2SCalibrationTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.D2SCalibrationTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string MacAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->macaddress().data(), static_cast<int>(this->macaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerProtocol.D2SCalibrationTime.MacAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.D2SCalibrationTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.D2SCalibrationTime)
  return false;
#undef DO_
}

void D2SCalibrationTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.D2SCalibrationTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MacAddress = 1;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), static_cast<int>(this->macaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.D2SCalibrationTime.MacAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->macaddress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.D2SCalibrationTime)
}

::google::protobuf::uint8* D2SCalibrationTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.D2SCalibrationTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string MacAddress = 1;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), static_cast<int>(this->macaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerProtocol.D2SCalibrationTime.MacAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->macaddress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.D2SCalibrationTime)
  return target;
}

size_t D2SCalibrationTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.D2SCalibrationTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string MacAddress = 1;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->macaddress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void D2SCalibrationTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.D2SCalibrationTime)
  GOOGLE_DCHECK_NE(&from, this);
  const D2SCalibrationTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const D2SCalibrationTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.D2SCalibrationTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.D2SCalibrationTime)
    MergeFrom(*source);
  }
}

void D2SCalibrationTime::MergeFrom(const D2SCalibrationTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.D2SCalibrationTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.macaddress().size() > 0) {

    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
}

void D2SCalibrationTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.D2SCalibrationTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void D2SCalibrationTime::CopyFrom(const D2SCalibrationTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.D2SCalibrationTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool D2SCalibrationTime::IsInitialized() const {
  return true;
}

void D2SCalibrationTime::Swap(D2SCalibrationTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void D2SCalibrationTime::InternalSwap(D2SCalibrationTime* other) {
  using std::swap;
  macaddress_.Swap(&other->macaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata D2SCalibrationTime::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModifyDeviceState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyDeviceState::kSeviceMacFieldNumber;
const int ModifyDeviceState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyDeviceState::ModifyDeviceState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_ModifyDeviceState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.ModifyDeviceState)
}
ModifyDeviceState::ModifyDeviceState(const ModifyDeviceState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sevicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sevicemac().size() > 0) {
    sevicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sevicemac_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.ModifyDeviceState)
}

void ModifyDeviceState::SharedCtor() {
  sevicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

ModifyDeviceState::~ModifyDeviceState() {
  // @@protoc_insertion_point(destructor:ServerProtocol.ModifyDeviceState)
  SharedDtor();
}

void ModifyDeviceState::SharedDtor() {
  sevicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyDeviceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModifyDeviceState::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyDeviceState& ModifyDeviceState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_ModifyDeviceState.base);
  return *internal_default_instance();
}


void ModifyDeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.ModifyDeviceState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sevicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

bool ModifyDeviceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.ModifyDeviceState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes SeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sevicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 State = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.ModifyDeviceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.ModifyDeviceState)
  return false;
#undef DO_
}

void ModifyDeviceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.ModifyDeviceState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SeviceMac = 1;
  if (this->sevicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sevicemac(), output);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.ModifyDeviceState)
}

::google::protobuf::uint8* ModifyDeviceState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.ModifyDeviceState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SeviceMac = 1;
  if (this->sevicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sevicemac(), target);
  }

  // int32 State = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.ModifyDeviceState)
  return target;
}

size_t ModifyDeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.ModifyDeviceState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes SeviceMac = 1;
  if (this->sevicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sevicemac());
  }

  // int32 State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyDeviceState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.ModifyDeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyDeviceState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyDeviceState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.ModifyDeviceState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.ModifyDeviceState)
    MergeFrom(*source);
  }
}

void ModifyDeviceState::MergeFrom(const ModifyDeviceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.ModifyDeviceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sevicemac().size() > 0) {

    sevicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sevicemac_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ModifyDeviceState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.ModifyDeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyDeviceState::CopyFrom(const ModifyDeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.ModifyDeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyDeviceState::IsInitialized() const {
  return true;
}

void ModifyDeviceState::Swap(ModifyDeviceState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyDeviceState::InternalSwap(ModifyDeviceState* other) {
  using std::swap;
  sevicemac_.Swap(&other->sevicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModifyDeviceState::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceLog::kDeviceMacFieldNumber;
const int DeviceLog::kLogTimeFieldNumber;
const int DeviceLog::kCardIdFieldNumber;
const int DeviceLog::kCardTypeFieldNumber;
const int DeviceLog::kFunTypeFieldNumber;
const int DeviceLog::kLogTypeFieldNumber;
const int DeviceLog::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceLog::DeviceLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceLog)
}
DeviceLog::DeviceLog(const DeviceLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardid().size() > 0) {
    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&logtime_, &from.logtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&logtype_) -
    reinterpret_cast<char*>(&logtime_)) + sizeof(logtype_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceLog)
}

void DeviceLog::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logtype_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(logtype_));
}

DeviceLog::~DeviceLog() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceLog)
  SharedDtor();
}

void DeviceLog::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceLog::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceLog& DeviceLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceLog.base);
  return *internal_default_instance();
}


void DeviceLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logtype_) -
      reinterpret_cast<char*>(&logtime_)) + sizeof(logtype_));
  _internal_metadata_.Clear();
}

bool DeviceLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LogTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CardId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CardType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FunType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LogType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceLog)
  return false;
#undef DO_
}

void DeviceLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // int32 LogTime = 2;
  if (this->logtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logtime(), output);
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cardid(), output);
  }

  // int32 CardType = 4;
  if (this->cardtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardtype(), output);
  }

  // int32 FunType = 5;
  if (this->funtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->funtype(), output);
  }

  // int32 LogType = 6;
  if (this->logtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->logtype(), output);
  }

  // bytes Message = 7;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceLog)
}

::google::protobuf::uint8* DeviceLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // int32 LogTime = 2;
  if (this->logtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logtime(), target);
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cardid(), target);
  }

  // int32 CardType = 4;
  if (this->cardtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardtype(), target);
  }

  // int32 FunType = 5;
  if (this->funtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->funtype(), target);
  }

  // int32 LogType = 6;
  if (this->logtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->logtype(), target);
  }

  // bytes Message = 7;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceLog)
  return target;
}

size_t DeviceLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardid());
  }

  // bytes Message = 7;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  // int32 LogTime = 2;
  if (this->logtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logtime());
  }

  // int32 CardType = 4;
  if (this->cardtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  // int32 FunType = 5;
  if (this->funtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funtype());
  }

  // int32 LogType = 6;
  if (this->logtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceLog)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceLog)
    MergeFrom(*source);
  }
}

void DeviceLog::MergeFrom(const DeviceLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.cardid().size() > 0) {

    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.logtime() != 0) {
    set_logtime(from.logtime());
  }
  if (from.cardtype() != 0) {
    set_cardtype(from.cardtype());
  }
  if (from.funtype() != 0) {
    set_funtype(from.funtype());
  }
  if (from.logtype() != 0) {
    set_logtype(from.logtype());
  }
}

void DeviceLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLog::CopyFrom(const DeviceLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLog::IsInitialized() const {
  return true;
}

void DeviceLog::Swap(DeviceLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceLog::InternalSwap(DeviceLog* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cardid_.Swap(&other->cardid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logtime_, other->logtime_);
  swap(cardtype_, other->cardtype_);
  swap(funtype_, other->funtype_);
  swap(logtype_, other->logtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceLog::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpLogTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpLogTable::kLogsFieldNumber;
const int UpLogTable::kMacFieldNumber;
const int UpLogTable::kTypeFieldNumber;
const int UpLogTable::kDeviceCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpLogTable::UpLogTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_UpLogTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.UpLogTable)
}
UpLogTable::UpLogTable(const UpLogTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicecrc_) -
    reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.UpLogTable)
}

void UpLogTable::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
}

UpLogTable::~UpLogTable() {
  // @@protoc_insertion_point(destructor:ServerProtocol.UpLogTable)
  SharedDtor();
}

void UpLogTable::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpLogTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpLogTable::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpLogTable& UpLogTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_UpLogTable.base);
  return *internal_default_instance();
}


void UpLogTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.UpLogTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
  _internal_metadata_.Clear();
}

bool UpLogTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.UpLogTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerProtocol.DeviceLog Logs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DeviceCrc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.UpLogTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.UpLogTable)
  return false;
#undef DO_
}

void UpLogTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.UpLogTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerProtocol.DeviceLog Logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->logs(static_cast<int>(i)),
      output);
  }

  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mac(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->devicecrc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.UpLogTable)
}

::google::protobuf::uint8* UpLogTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.UpLogTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerProtocol.DeviceLog Logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->logs(static_cast<int>(i)), deterministic, target);
  }

  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mac(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->devicecrc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.UpLogTable)
  return target;
}

size_t UpLogTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.UpLogTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerProtocol.DeviceLog Logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mac());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicecrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpLogTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.UpLogTable)
  GOOGLE_DCHECK_NE(&from, this);
  const UpLogTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpLogTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.UpLogTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.UpLogTable)
    MergeFrom(*source);
  }
}

void UpLogTable::MergeFrom(const UpLogTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.UpLogTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.devicecrc() != 0) {
    set_devicecrc(from.devicecrc());
  }
}

void UpLogTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.UpLogTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpLogTable::CopyFrom(const UpLogTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.UpLogTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpLogTable::IsInitialized() const {
  return true;
}

void UpLogTable::Swap(UpLogTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpLogTable::InternalSwap(UpLogTable* other) {
  using std::swap;
  CastToBase(&logs_)->InternalSwap(CastToBase(&other->logs_));
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(devicecrc_, other->devicecrc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpLogTable::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpLogResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpLogResponse::kCountFieldNumber;
const int UpLogResponse::kMacFieldNumber;
const int UpLogResponse::kDeviceCrcStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpLogResponse::UpLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_UpLogResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.UpLogResponse)
}
UpLogResponse::UpLogResponse(const UpLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicecrcstate_) -
    reinterpret_cast<char*>(&count_)) + sizeof(devicecrcstate_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.UpLogResponse)
}

void UpLogResponse::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrcstate_) -
      reinterpret_cast<char*>(&count_)) + sizeof(devicecrcstate_));
}

UpLogResponse::~UpLogResponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.UpLogResponse)
  SharedDtor();
}

void UpLogResponse::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpLogResponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpLogResponse& UpLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_UpLogResponse.base);
  return *internal_default_instance();
}


void UpLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.UpLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrcstate_) -
      reinterpret_cast<char*>(&count_)) + sizeof(devicecrcstate_));
  _internal_metadata_.Clear();
}

bool UpLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.UpLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DeviceCrcState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecrcstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.UpLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.UpLogResponse)
  return false;
#undef DO_
}

void UpLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.UpLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mac(), output);
  }

  // int32 DeviceCrcState = 3;
  if (this->devicecrcstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->devicecrcstate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.UpLogResponse)
}

::google::protobuf::uint8* UpLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.UpLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mac(), target);
  }

  // int32 DeviceCrcState = 3;
  if (this->devicecrcstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->devicecrcstate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.UpLogResponse)
  return target;
}

size_t UpLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.UpLogResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Mac = 2;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mac());
  }

  // int32 Count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 DeviceCrcState = 3;
  if (this->devicecrcstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicecrcstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.UpLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpLogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.UpLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.UpLogResponse)
    MergeFrom(*source);
  }
}

void UpLogResponse::MergeFrom(const UpLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.UpLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.devicecrcstate() != 0) {
    set_devicecrcstate(from.devicecrcstate());
  }
}

void UpLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.UpLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpLogResponse::CopyFrom(const UpLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.UpLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpLogResponse::IsInitialized() const {
  return true;
}

void UpLogResponse::Swap(UpLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpLogResponse::InternalSwap(UpLogResponse* other) {
  using std::swap;
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(devicecrcstate_, other->devicecrcstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpLogResponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GWUPDeviceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GWUPDeviceData::kGWDeviceInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GWUPDeviceData::GWUPDeviceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_GWUPDeviceData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.GWUPDeviceData)
}
GWUPDeviceData::GWUPDeviceData(const GWUPDeviceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gwdeviceinfolist_(from.gwdeviceinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.GWUPDeviceData)
}

void GWUPDeviceData::SharedCtor() {
}

GWUPDeviceData::~GWUPDeviceData() {
  // @@protoc_insertion_point(destructor:ServerProtocol.GWUPDeviceData)
  SharedDtor();
}

void GWUPDeviceData::SharedDtor() {
}

void GWUPDeviceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GWUPDeviceData::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GWUPDeviceData& GWUPDeviceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_GWUPDeviceData.base);
  return *internal_default_instance();
}


void GWUPDeviceData::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.GWUPDeviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwdeviceinfolist_.Clear();
  _internal_metadata_.Clear();
}

bool GWUPDeviceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.GWUPDeviceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gwdeviceinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.GWUPDeviceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.GWUPDeviceData)
  return false;
#undef DO_
}

void GWUPDeviceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.GWUPDeviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gwdeviceinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gwdeviceinfolist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.GWUPDeviceData)
}

::google::protobuf::uint8* GWUPDeviceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.GWUPDeviceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gwdeviceinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gwdeviceinfolist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.GWUPDeviceData)
  return target;
}

size_t GWUPDeviceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.GWUPDeviceData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerProtocol.GWDeviceInfo GWDeviceInfoList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gwdeviceinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gwdeviceinfolist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GWUPDeviceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.GWUPDeviceData)
  GOOGLE_DCHECK_NE(&from, this);
  const GWUPDeviceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GWUPDeviceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.GWUPDeviceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.GWUPDeviceData)
    MergeFrom(*source);
  }
}

void GWUPDeviceData::MergeFrom(const GWUPDeviceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.GWUPDeviceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gwdeviceinfolist_.MergeFrom(from.gwdeviceinfolist_);
}

void GWUPDeviceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.GWUPDeviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWUPDeviceData::CopyFrom(const GWUPDeviceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.GWUPDeviceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWUPDeviceData::IsInitialized() const {
  return true;
}

void GWUPDeviceData::Swap(GWUPDeviceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GWUPDeviceData::InternalSwap(GWUPDeviceData* other) {
  using std::swap;
  CastToBase(&gwdeviceinfolist_)->InternalSwap(CastToBase(&other->gwdeviceinfolist_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GWUPDeviceData::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GWDeviceInfo::InitAsDefaultInstance() {
  ::ServerProtocol::_GWDeviceInfo_default_instance_._instance.get_mutable()->deviceproperty_ = const_cast< ::ServerProtocol::GWDeviceProperty*>(
      ::ServerProtocol::GWDeviceProperty::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GWDeviceInfo::kDeviceMacFieldNumber;
const int GWDeviceInfo::kDeviceModelFieldNumber;
const int GWDeviceInfo::kFwVerFieldNumber;
const int GWDeviceInfo::kHwVerFieldNumber;
const int GWDeviceInfo::kSysVerFieldNumber;
const int GWDeviceInfo::kOtherVerFieldNumber;
const int GWDeviceInfo::kCurTimeFieldNumber;
const int GWDeviceInfo::kStateFieldNumber;
const int GWDeviceInfo::kVoltageFieldNumber;
const int GWDeviceInfo::kTemperatureFieldNumber;
const int GWDeviceInfo::kVoiceFieldNumber;
const int GWDeviceInfo::kMessageFieldNumber;
const int GWDeviceInfo::kDevicePropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GWDeviceInfo::GWDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.GWDeviceInfo)
}
GWDeviceInfo::GWDeviceInfo(const GWDeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemodel().size() > 0) {
    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_deviceproperty()) {
    deviceproperty_ = new ::ServerProtocol::GWDeviceProperty(*from.deviceproperty_);
  } else {
    deviceproperty_ = NULL;
  }
  ::memcpy(&fwver_, &from.fwver_,
    static_cast<size_t>(reinterpret_cast<char*>(&voice_) -
    reinterpret_cast<char*>(&fwver_)) + sizeof(voice_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.GWDeviceInfo)
}

void GWDeviceInfo::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deviceproperty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_) -
      reinterpret_cast<char*>(&deviceproperty_)) + sizeof(voice_));
}

GWDeviceInfo::~GWDeviceInfo() {
  // @@protoc_insertion_point(destructor:ServerProtocol.GWDeviceInfo)
  SharedDtor();
}

void GWDeviceInfo::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deviceproperty_;
}

void GWDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GWDeviceInfo::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GWDeviceInfo& GWDeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceInfo.base);
  return *internal_default_instance();
}


void GWDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.GWDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && deviceproperty_ != NULL) {
    delete deviceproperty_;
  }
  deviceproperty_ = NULL;
  ::memset(&fwver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_) -
      reinterpret_cast<char*>(&fwver_)) + sizeof(voice_));
  _internal_metadata_.Clear();
}

bool GWDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.GWDeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DeviceModel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FwVer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fwver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 HwVer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SysVer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 OtherVer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 CurTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 State = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Voltage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Temperature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Voice = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Message = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deviceproperty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.GWDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.GWDeviceInfo)
  return false;
#undef DO_
}

void GWDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.GWDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // bytes DeviceModel = 2;
  if (this->devicemodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devicemodel(), output);
  }

  // uint32 FwVer = 3;
  if (this->fwver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fwver(), output);
  }

  // uint32 HwVer = 4;
  if (this->hwver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hwver(), output);
  }

  // uint32 SysVer = 5;
  if (this->sysver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sysver(), output);
  }

  // uint32 OtherVer = 6;
  if (this->otherver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->otherver(), output);
  }

  // uint32 CurTime = 7;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curtime(), output);
  }

  // uint32 State = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  // uint32 Voltage = 9;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->voltage(), output);
  }

  // uint32 Temperature = 10;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->temperature(), output);
  }

  // uint32 Voice = 11;
  if (this->voice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->voice(), output);
  }

  // bytes Message = 12;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->message(), output);
  }

  // .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
  if (this->has_deviceproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_deviceproperty(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.GWDeviceInfo)
}

::google::protobuf::uint8* GWDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.GWDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // bytes DeviceModel = 2;
  if (this->devicemodel().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devicemodel(), target);
  }

  // uint32 FwVer = 3;
  if (this->fwver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fwver(), target);
  }

  // uint32 HwVer = 4;
  if (this->hwver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hwver(), target);
  }

  // uint32 SysVer = 5;
  if (this->sysver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sysver(), target);
  }

  // uint32 OtherVer = 6;
  if (this->otherver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->otherver(), target);
  }

  // uint32 CurTime = 7;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curtime(), target);
  }

  // uint32 State = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  // uint32 Voltage = 9;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->voltage(), target);
  }

  // uint32 Temperature = 10;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->temperature(), target);
  }

  // uint32 Voice = 11;
  if (this->voice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->voice(), target);
  }

  // bytes Message = 12;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->message(), target);
  }

  // .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
  if (this->has_deviceproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_deviceproperty(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.GWDeviceInfo)
  return target;
}

size_t GWDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.GWDeviceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes DeviceModel = 2;
  if (this->devicemodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemodel());
  }

  // bytes Message = 12;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  // .ServerProtocol.GWDeviceProperty DeviceProperty = 13;
  if (this->has_deviceproperty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deviceproperty_);
  }

  // uint32 FwVer = 3;
  if (this->fwver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fwver());
  }

  // uint32 HwVer = 4;
  if (this->hwver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hwver());
  }

  // uint32 SysVer = 5;
  if (this->sysver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sysver());
  }

  // uint32 OtherVer = 6;
  if (this->otherver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->otherver());
  }

  // uint32 CurTime = 7;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curtime());
  }

  // uint32 State = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 Voltage = 9;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voltage());
  }

  // uint32 Temperature = 10;
  if (this->temperature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temperature());
  }

  // uint32 Voice = 11;
  if (this->voice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GWDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.GWDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GWDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GWDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.GWDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.GWDeviceInfo)
    MergeFrom(*source);
  }
}

void GWDeviceInfo::MergeFrom(const GWDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.GWDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.devicemodel().size() > 0) {

    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_deviceproperty()) {
    mutable_deviceproperty()->::ServerProtocol::GWDeviceProperty::MergeFrom(from.deviceproperty());
  }
  if (from.fwver() != 0) {
    set_fwver(from.fwver());
  }
  if (from.hwver() != 0) {
    set_hwver(from.hwver());
  }
  if (from.sysver() != 0) {
    set_sysver(from.sysver());
  }
  if (from.otherver() != 0) {
    set_otherver(from.otherver());
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.voice() != 0) {
    set_voice(from.voice());
  }
}

void GWDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.GWDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWDeviceInfo::CopyFrom(const GWDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.GWDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWDeviceInfo::IsInitialized() const {
  return true;
}

void GWDeviceInfo::Swap(GWDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GWDeviceInfo::InternalSwap(GWDeviceInfo* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  devicemodel_.Swap(&other->devicemodel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deviceproperty_, other->deviceproperty_);
  swap(fwver_, other->fwver_);
  swap(hwver_, other->hwver_);
  swap(sysver_, other->sysver_);
  swap(otherver_, other->otherver_);
  swap(curtime_, other->curtime_);
  swap(state_, other->state_);
  swap(voltage_, other->voltage_);
  swap(temperature_, other->temperature_);
  swap(voice_, other->voice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GWDeviceInfo::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GWDeviceProperty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GWDeviceProperty::kRootFetIdxFieldNumber;
const int GWDeviceProperty::kDevIdFieldNumber;
const int GWDeviceProperty::kDrvIdxFieldNumber;
const int GWDeviceProperty::kPowerLevelFieldNumber;
const int GWDeviceProperty::kActiveFieldNumber;
const int GWDeviceProperty::kFetCrcFieldNumber;
const int GWDeviceProperty::kGrpFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GWDeviceProperty::GWDeviceProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceProperty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.GWDeviceProperty)
}
GWDeviceProperty::GWDeviceProperty(const GWDeviceProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rootfetidx_, &from.rootfetidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&grpfeature_) -
    reinterpret_cast<char*>(&rootfetidx_)) + sizeof(grpfeature_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.GWDeviceProperty)
}

void GWDeviceProperty::SharedCtor() {
  ::memset(&rootfetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpfeature_) -
      reinterpret_cast<char*>(&rootfetidx_)) + sizeof(grpfeature_));
}

GWDeviceProperty::~GWDeviceProperty() {
  // @@protoc_insertion_point(destructor:ServerProtocol.GWDeviceProperty)
  SharedDtor();
}

void GWDeviceProperty::SharedDtor() {
}

void GWDeviceProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GWDeviceProperty::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GWDeviceProperty& GWDeviceProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_GWDeviceProperty.base);
  return *internal_default_instance();
}


void GWDeviceProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.GWDeviceProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rootfetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpfeature_) -
      reinterpret_cast<char*>(&rootfetidx_)) + sizeof(grpfeature_));
  _internal_metadata_.Clear();
}

bool GWDeviceProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.GWDeviceProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 RootFetIdx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rootfetidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DevId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DrvIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drvidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 PowerLevel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FetCrc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetcrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 GrpFeature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpfeature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.GWDeviceProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.GWDeviceProperty)
  return false;
#undef DO_
}

void GWDeviceProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.GWDeviceProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RootFetIdx = 1;
  if (this->rootfetidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rootfetidx(), output);
  }

  // uint32 DevId = 2;
  if (this->devid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->devid(), output);
  }

  // uint32 DrvIdx = 3;
  if (this->drvidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drvidx(), output);
  }

  // uint32 PowerLevel = 4;
  if (this->powerlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->powerlevel(), output);
  }

  // bool Active = 5;
  if (this->active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  // uint32 FetCrc = 6;
  if (this->fetcrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fetcrc(), output);
  }

  // uint32 GrpFeature = 7;
  if (this->grpfeature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->grpfeature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.GWDeviceProperty)
}

::google::protobuf::uint8* GWDeviceProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.GWDeviceProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RootFetIdx = 1;
  if (this->rootfetidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rootfetidx(), target);
  }

  // uint32 DevId = 2;
  if (this->devid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->devid(), target);
  }

  // uint32 DrvIdx = 3;
  if (this->drvidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drvidx(), target);
  }

  // uint32 PowerLevel = 4;
  if (this->powerlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->powerlevel(), target);
  }

  // bool Active = 5;
  if (this->active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  // uint32 FetCrc = 6;
  if (this->fetcrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fetcrc(), target);
  }

  // uint32 GrpFeature = 7;
  if (this->grpfeature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->grpfeature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.GWDeviceProperty)
  return target;
}

size_t GWDeviceProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.GWDeviceProperty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 RootFetIdx = 1;
  if (this->rootfetidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rootfetidx());
  }

  // uint32 DevId = 2;
  if (this->devid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devid());
  }

  // uint32 DrvIdx = 3;
  if (this->drvidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drvidx());
  }

  // uint32 PowerLevel = 4;
  if (this->powerlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->powerlevel());
  }

  // bool Active = 5;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // uint32 FetCrc = 6;
  if (this->fetcrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fetcrc());
  }

  // uint32 GrpFeature = 7;
  if (this->grpfeature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->grpfeature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GWDeviceProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.GWDeviceProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GWDeviceProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GWDeviceProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.GWDeviceProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.GWDeviceProperty)
    MergeFrom(*source);
  }
}

void GWDeviceProperty::MergeFrom(const GWDeviceProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.GWDeviceProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rootfetidx() != 0) {
    set_rootfetidx(from.rootfetidx());
  }
  if (from.devid() != 0) {
    set_devid(from.devid());
  }
  if (from.drvidx() != 0) {
    set_drvidx(from.drvidx());
  }
  if (from.powerlevel() != 0) {
    set_powerlevel(from.powerlevel());
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
  if (from.fetcrc() != 0) {
    set_fetcrc(from.fetcrc());
  }
  if (from.grpfeature() != 0) {
    set_grpfeature(from.grpfeature());
  }
}

void GWDeviceProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.GWDeviceProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWDeviceProperty::CopyFrom(const GWDeviceProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.GWDeviceProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWDeviceProperty::IsInitialized() const {
  return true;
}

void GWDeviceProperty::Swap(GWDeviceProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GWDeviceProperty::InternalSwap(GWDeviceProperty* other) {
  using std::swap;
  swap(rootfetidx_, other->rootfetidx_);
  swap(devid_, other->devid_);
  swap(drvidx_, other->drvidx_);
  swap(powerlevel_, other->powerlevel_);
  swap(active_, other->active_);
  swap(fetcrc_, other->fetcrc_);
  swap(grpfeature_, other->grpfeature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GWDeviceProperty::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorState::kDeviceMacFieldNumber;
const int SensorState::kFetIdxFieldNumber;
const int SensorState::kValuesFieldNumber;
const int SensorState::kChangedFieldNumber;
const int SensorState::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorState::SensorState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_SensorState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.SensorState)
}
SensorState::SensorState(const SensorState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.values().size() > 0) {
    values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
  ::memcpy(&fetidx_, &from.fetidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&fetidx_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.SensorState)
}

void SensorState::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&fetidx_)) + sizeof(time_));
}

SensorState::~SensorState() {
  // @@protoc_insertion_point(destructor:ServerProtocol.SensorState)
  SharedDtor();
}

void SensorState::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorState::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorState& SensorState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_SensorState.base);
  return *internal_default_instance();
}


void SensorState::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.SensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&fetidx_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

bool SensorState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.SensorState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FetIdx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Changed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.SensorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.SensorState)
  return false;
#undef DO_
}

void SensorState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.SensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // uint32 FetIdx = 2;
  if (this->fetidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fetidx(), output);
  }

  // bytes Values = 3;
  if (this->values().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->values(), output);
  }

  // uint32 Changed = 4;
  if (this->changed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->changed(), output);
  }

  // uint32 Time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.SensorState)
}

::google::protobuf::uint8* SensorState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.SensorState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // uint32 FetIdx = 2;
  if (this->fetidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fetidx(), target);
  }

  // bytes Values = 3;
  if (this->values().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->values(), target);
  }

  // uint32 Changed = 4;
  if (this->changed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->changed(), target);
  }

  // uint32 Time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.SensorState)
  return target;
}

size_t SensorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.SensorState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Values = 3;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->values());
  }

  // uint32 FetIdx = 2;
  if (this->fetidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fetidx());
  }

  // uint32 Changed = 4;
  if (this->changed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->changed());
  }

  // uint32 Time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.SensorState)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.SensorState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.SensorState)
    MergeFrom(*source);
  }
}

void SensorState::MergeFrom(const SensorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.SensorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.values().size() > 0) {

    values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
  if (from.fetidx() != 0) {
    set_fetidx(from.fetidx());
  }
  if (from.changed() != 0) {
    set_changed(from.changed());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void SensorState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.SensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorState::CopyFrom(const SensorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.SensorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorState::IsInitialized() const {
  return true;
}

void SensorState::Swap(SensorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorState::InternalSwap(SensorState* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  values_.Swap(&other->values_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fetidx_, other->fetidx_);
  swap(changed_, other->changed_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorState::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StateTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateTable::kGwMacFieldNumber;
const int StateTable::kSensorStatelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateTable::StateTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_StateTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.StateTable)
}
StateTable::StateTable(const StateTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensorstatelist_(from.sensorstatelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.StateTable)
}

void StateTable::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StateTable::~StateTable() {
  // @@protoc_insertion_point(destructor:ServerProtocol.StateTable)
  SharedDtor();
}

void StateTable::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StateTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateTable::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateTable& StateTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_StateTable.base);
  return *internal_default_instance();
}


void StateTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.StateTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorstatelist_.Clear();
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StateTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.StateTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GwMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ServerProtocol.SensorState SensorStatelist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensorstatelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.StateTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.StateTable)
  return false;
#undef DO_
}

void StateTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.StateTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GwMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // repeated .ServerProtocol.SensorState SensorStatelist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorstatelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sensorstatelist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.StateTable)
}

::google::protobuf::uint8* StateTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.StateTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GwMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // repeated .ServerProtocol.SensorState SensorStatelist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensorstatelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sensorstatelist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.StateTable)
  return target;
}

size_t StateTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.StateTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerProtocol.SensorState SensorStatelist = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sensorstatelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensorstatelist(static_cast<int>(i)));
    }
  }

  // bytes GwMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.StateTable)
  GOOGLE_DCHECK_NE(&from, this);
  const StateTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.StateTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.StateTable)
    MergeFrom(*source);
  }
}

void StateTable::MergeFrom(const StateTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.StateTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorstatelist_.MergeFrom(from.sensorstatelist_);
  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
}

void StateTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.StateTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateTable::CopyFrom(const StateTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.StateTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateTable::IsInitialized() const {
  return true;
}

void StateTable::Swap(StateTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateTable::InternalSwap(StateTable* other) {
  using std::swap;
  CastToBase(&sensorstatelist_)->InternalSwap(CastToBase(&other->sensorstatelist_));
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateTable::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceDelete::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceDelete::kActionTypeFieldNumber;
const int DeviceDelete::kDeviceMacFieldNumber;
const int DeviceDelete::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceDelete::DeviceDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceDelete.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceDelete)
}
DeviceDelete::DeviceDelete(const DeviceDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  actiontype_ = from.actiontype_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceDelete)
}

void DeviceDelete::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
}

DeviceDelete::~DeviceDelete() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceDelete)
  SharedDtor();
}

void DeviceDelete::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceDelete::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceDelete& DeviceDelete::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceDelete.base);
  return *internal_default_instance();
}


void DeviceDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
  _internal_metadata_.Clear();
}

bool DeviceDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceDelete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ActionType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DeviceMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceDelete)
  return false;
#undef DO_
}

void DeviceDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ActionType = 1;
  if (this->actiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actiontype(), output);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devicemac(), output);
  }

  // bytes Data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceDelete)
}

::google::protobuf::uint8* DeviceDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ActionType = 1;
  if (this->actiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actiontype(), target);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devicemac(), target);
  }

  // bytes Data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceDelete)
  return target;
}

size_t DeviceDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceDelete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 ActionType = 1;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceDelete)
    MergeFrom(*source);
  }
}

void DeviceDelete::MergeFrom(const DeviceDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.actiontype() != 0) {
    set_actiontype(from.actiontype());
  }
}

void DeviceDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDelete::CopyFrom(const DeviceDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDelete::IsInitialized() const {
  return true;
}

void DeviceDelete::Swap(DeviceDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceDelete::InternalSwap(DeviceDelete* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actiontype_, other->actiontype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceDelete::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GWFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GWFeature::kLevelFieldNumber;
const int GWFeature::kFetFieldNumber;
const int GWFeature::kRootIndexFieldNumber;
const int GWFeature::kDeviceMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GWFeature::GWFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_GWFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.GWFeature)
}
GWFeature::GWFeature(const GWFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&rootindex_) -
    reinterpret_cast<char*>(&level_)) + sizeof(rootindex_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.GWFeature)
}

void GWFeature::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rootindex_) -
      reinterpret_cast<char*>(&level_)) + sizeof(rootindex_));
}

GWFeature::~GWFeature() {
  // @@protoc_insertion_point(destructor:ServerProtocol.GWFeature)
  SharedDtor();
}

void GWFeature::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GWFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GWFeature::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GWFeature& GWFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_GWFeature.base);
  return *internal_default_instance();
}


void GWFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.GWFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rootindex_) -
      reinterpret_cast<char*>(&level_)) + sizeof(rootindex_));
  _internal_metadata_.Clear();
}

bool GWFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.GWFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Fet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RootIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rootindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DeviceMac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.GWFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.GWFeature)
  return false;
#undef DO_
}

void GWFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.GWFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // int32 Fet = 2;
  if (this->fet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fet(), output);
  }

  // int32 RootIndex = 3;
  if (this->rootindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rootindex(), output);
  }

  // bytes DeviceMac = 4;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->devicemac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.GWFeature)
}

::google::protobuf::uint8* GWFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.GWFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // int32 Fet = 2;
  if (this->fet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fet(), target);
  }

  // int32 RootIndex = 3;
  if (this->rootindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rootindex(), target);
  }

  // bytes DeviceMac = 4;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->devicemac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.GWFeature)
  return target;
}

size_t GWFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.GWFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 4;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // int32 Level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 Fet = 2;
  if (this->fet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fet());
  }

  // int32 RootIndex = 3;
  if (this->rootindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rootindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GWFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.GWFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const GWFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GWFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.GWFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.GWFeature)
    MergeFrom(*source);
  }
}

void GWFeature::MergeFrom(const GWFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.GWFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.fet() != 0) {
    set_fet(from.fet());
  }
  if (from.rootindex() != 0) {
    set_rootindex(from.rootindex());
  }
}

void GWFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.GWFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWFeature::CopyFrom(const GWFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.GWFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWFeature::IsInitialized() const {
  return true;
}

void GWFeature::Swap(GWFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GWFeature::InternalSwap(GWFeature* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(fet_, other->fet_);
  swap(rootindex_, other->rootindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GWFeature::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceConfig::kDeviceMacFieldNumber;
const int DeviceConfig::kCurTimeFieldNumber;
const int DeviceConfig::kConfigTypeFieldNumber;
const int DeviceConfig::kConfigDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceConfig::DeviceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceConfig)
}
DeviceConfig::DeviceConfig(const DeviceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  configdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.configdata().size() > 0) {
    configdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configdata_);
  }
  ::memcpy(&curtime_, &from.curtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&configtype_) -
    reinterpret_cast<char*>(&curtime_)) + sizeof(configtype_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceConfig)
}

void DeviceConfig::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configtype_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(configtype_));
}

DeviceConfig::~DeviceConfig() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceConfig)
  SharedDtor();
}

void DeviceConfig::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceConfig::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceConfig& DeviceConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceConfig.base);
  return *internal_default_instance();
}


void DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configtype_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(configtype_));
  _internal_metadata_.Clear();
}

bool DeviceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CurTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ConfigType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ConfigData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_configdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceConfig)
  return false;
#undef DO_
}

void DeviceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curtime(), output);
  }

  // int32 ConfigType = 3;
  if (this->configtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configtype(), output);
  }

  // bytes ConfigData = 4;
  if (this->configdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->configdata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceConfig)
}

::google::protobuf::uint8* DeviceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curtime(), target);
  }

  // int32 ConfigType = 3;
  if (this->configtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configtype(), target);
  }

  // bytes ConfigData = 4;
  if (this->configdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->configdata(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceConfig)
  return target;
}

size_t DeviceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes ConfigData = 4;
  if (this->configdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->configdata());
  }

  // int32 CurTime = 2;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtime());
  }

  // int32 ConfigType = 3;
  if (this->configtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->configtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceConfig)
    MergeFrom(*source);
  }
}

void DeviceConfig::MergeFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.configdata().size() > 0) {

    configdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configdata_);
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
  if (from.configtype() != 0) {
    set_configtype(from.configtype());
  }
}

void DeviceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfig::CopyFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfig::IsInitialized() const {
  return true;
}

void DeviceConfig::Swap(DeviceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceConfig::InternalSwap(DeviceConfig* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configdata_.Swap(&other->configdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curtime_, other->curtime_);
  swap(configtype_, other->configtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceConfig::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Transmission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transmission::kDeviceMacFieldNumber;
const int Transmission::kOperationFieldNumber;
const int Transmission::kCurTimeFieldNumber;
const int Transmission::kTypeFieldNumber;
const int Transmission::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transmission::Transmission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_Transmission.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.Transmission)
}
Transmission::Transmission(const Transmission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&curtime_, &from.curtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&curtime_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.Transmission)
}

void Transmission::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(type_));
}

Transmission::~Transmission() {
  // @@protoc_insertion_point(destructor:ServerProtocol.Transmission)
  SharedDtor();
}

void Transmission::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Transmission::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transmission& Transmission::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_Transmission.base);
  return *internal_default_instance();
}


void Transmission::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Transmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.Transmission)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CurTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.Transmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.Transmission)
  return false;
#undef DO_
}

void Transmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->operation(), output);
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtime(), output);
  }

  // int32 Type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.Transmission)
}

::google::protobuf::uint8* Transmission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.Transmission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->operation(), target);
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtime(), target);
  }

  // int32 Type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.Transmission)
  return target;
}

size_t Transmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.Transmission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->operation());
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtime());
  }

  // int32 Type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transmission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.Transmission)
  GOOGLE_DCHECK_NE(&from, this);
  const Transmission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transmission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.Transmission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.Transmission)
    MergeFrom(*source);
  }
}

void Transmission::MergeFrom(const Transmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.Transmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.operation().size() > 0) {

    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Transmission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.Transmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transmission::CopyFrom(const Transmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.Transmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transmission::IsInitialized() const {
  return true;
}

void Transmission::Swap(Transmission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transmission::InternalSwap(Transmission* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operation_.Swap(&other->operation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curtime_, other->curtime_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Transmission::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransmissionResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransmissionResponse::kDeviceMacFieldNumber;
const int TransmissionResponse::kOperationFieldNumber;
const int TransmissionResponse::kTypeFieldNumber;
const int TransmissionResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransmissionResponse::TransmissionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_TransmissionResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.TransmissionResponse)
}
TransmissionResponse::TransmissionResponse(const TransmissionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.TransmissionResponse)
}

void TransmissionResponse::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TransmissionResponse::~TransmissionResponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.TransmissionResponse)
  SharedDtor();
}

void TransmissionResponse::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransmissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransmissionResponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransmissionResponse& TransmissionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_TransmissionResponse.base);
  return *internal_default_instance();
}


void TransmissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.TransmissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TransmissionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.TransmissionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.TransmissionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.TransmissionResponse)
  return false;
#undef DO_
}

void TransmissionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.TransmissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->operation(), output);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.TransmissionResponse)
}

::google::protobuf::uint8* TransmissionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.TransmissionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->operation(), target);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.TransmissionResponse)
  return target;
}

size_t TransmissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.TransmissionResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->operation());
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmissionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.TransmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmissionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransmissionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.TransmissionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.TransmissionResponse)
    MergeFrom(*source);
  }
}

void TransmissionResponse::MergeFrom(const TransmissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.TransmissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.operation().size() > 0) {

    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TransmissionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.TransmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmissionResponse::CopyFrom(const TransmissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.TransmissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmissionResponse::IsInitialized() const {
  return true;
}

void TransmissionResponse::Swap(TransmissionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransmissionResponse::InternalSwap(TransmissionResponse* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operation_.Swap(&other->operation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransmissionResponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WhiteBlackList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhiteBlackList::kGWMacFieldNumber;
const int WhiteBlackList::kDeviceMacFieldNumber;
const int WhiteBlackList::kCardIdFieldNumber;
const int WhiteBlackList::kFetIdxFieldNumber;
const int WhiteBlackList::kRecordIdFieldNumber;
const int WhiteBlackList::kStartTimeFieldNumber;
const int WhiteBlackList::kEndTimeFieldNumber;
const int WhiteBlackList::kCardTypeFieldNumber;
const int WhiteBlackList::kFunTypeFieldNumber;
const int WhiteBlackList::kListTypeFieldNumber;
const int WhiteBlackList::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhiteBlackList::WhiteBlackList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_WhiteBlackList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.WhiteBlackList)
}
WhiteBlackList::WhiteBlackList(const WhiteBlackList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardid().size() > 0) {
    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&fetidx_, &from.fetidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&listtype_) -
    reinterpret_cast<char*>(&fetidx_)) + sizeof(listtype_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.WhiteBlackList)
}

void WhiteBlackList::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listtype_) -
      reinterpret_cast<char*>(&fetidx_)) + sizeof(listtype_));
}

WhiteBlackList::~WhiteBlackList() {
  // @@protoc_insertion_point(destructor:ServerProtocol.WhiteBlackList)
  SharedDtor();
}

void WhiteBlackList::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WhiteBlackList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WhiteBlackList::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WhiteBlackList& WhiteBlackList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_WhiteBlackList.base);
  return *internal_default_instance();
}


void WhiteBlackList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.WhiteBlackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listtype_) -
      reinterpret_cast<char*>(&fetidx_)) + sizeof(listtype_));
  _internal_metadata_.Clear();
}

bool WhiteBlackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.WhiteBlackList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DeviceMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CardId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FetIdx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RecordId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 StartTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 EndTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CardType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FunType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ListType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.WhiteBlackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.WhiteBlackList)
  return false;
#undef DO_
}

void WhiteBlackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.WhiteBlackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devicemac(), output);
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cardid(), output);
  }

  // int32 FetIdx = 4;
  if (this->fetidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fetidx(), output);
  }

  // int32 RecordId = 5;
  if (this->recordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recordid(), output);
  }

  // int32 StartTime = 6;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttime(), output);
  }

  // int32 EndTime = 7;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->endtime(), output);
  }

  // int32 CardType = 8;
  if (this->cardtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cardtype(), output);
  }

  // int32 FunType = 9;
  if (this->funtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->funtype(), output);
  }

  // int32 ListType = 10;
  if (this->listtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->listtype(), output);
  }

  // bytes Data = 11;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.WhiteBlackList)
}

::google::protobuf::uint8* WhiteBlackList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.WhiteBlackList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devicemac(), target);
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cardid(), target);
  }

  // int32 FetIdx = 4;
  if (this->fetidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fetidx(), target);
  }

  // int32 RecordId = 5;
  if (this->recordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recordid(), target);
  }

  // int32 StartTime = 6;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starttime(), target);
  }

  // int32 EndTime = 7;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->endtime(), target);
  }

  // int32 CardType = 8;
  if (this->cardtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cardtype(), target);
  }

  // int32 FunType = 9;
  if (this->funtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->funtype(), target);
  }

  // int32 ListType = 10;
  if (this->listtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->listtype(), target);
  }

  // bytes Data = 11;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.WhiteBlackList)
  return target;
}

size_t WhiteBlackList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.WhiteBlackList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes CardId = 3;
  if (this->cardid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardid());
  }

  // bytes Data = 11;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 FetIdx = 4;
  if (this->fetidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fetidx());
  }

  // int32 RecordId = 5;
  if (this->recordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recordid());
  }

  // int32 StartTime = 6;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starttime());
  }

  // int32 EndTime = 7;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endtime());
  }

  // int32 CardType = 8;
  if (this->cardtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cardtype());
  }

  // int32 FunType = 9;
  if (this->funtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->funtype());
  }

  // int32 ListType = 10;
  if (this->listtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhiteBlackList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.WhiteBlackList)
  GOOGLE_DCHECK_NE(&from, this);
  const WhiteBlackList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhiteBlackList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.WhiteBlackList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.WhiteBlackList)
    MergeFrom(*source);
  }
}

void WhiteBlackList::MergeFrom(const WhiteBlackList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.WhiteBlackList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.cardid().size() > 0) {

    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.fetidx() != 0) {
    set_fetidx(from.fetidx());
  }
  if (from.recordid() != 0) {
    set_recordid(from.recordid());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.cardtype() != 0) {
    set_cardtype(from.cardtype());
  }
  if (from.funtype() != 0) {
    set_funtype(from.funtype());
  }
  if (from.listtype() != 0) {
    set_listtype(from.listtype());
  }
}

void WhiteBlackList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.WhiteBlackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiteBlackList::CopyFrom(const WhiteBlackList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.WhiteBlackList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiteBlackList::IsInitialized() const {
  return true;
}

void WhiteBlackList::Swap(WhiteBlackList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhiteBlackList::InternalSwap(WhiteBlackList* other) {
  using std::swap;
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cardid_.Swap(&other->cardid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fetidx_, other->fetidx_);
  swap(recordid_, other->recordid_);
  swap(starttime_, other->starttime_);
  swap(endtime_, other->endtime_);
  swap(cardtype_, other->cardtype_);
  swap(funtype_, other->funtype_);
  swap(listtype_, other->listtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WhiteBlackList::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DispatchWBListResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispatchWBListResult::kRecordIdFieldNumber;
const int DispatchWBListResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispatchWBListResult::DispatchWBListResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DispatchWBListResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DispatchWBListResult)
}
DispatchWBListResult::DispatchWBListResult(const DispatchWBListResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recordid_, &from.recordid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&recordid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DispatchWBListResult)
}

void DispatchWBListResult::SharedCtor() {
  ::memset(&recordid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&recordid_)) + sizeof(result_));
}

DispatchWBListResult::~DispatchWBListResult() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DispatchWBListResult)
  SharedDtor();
}

void DispatchWBListResult::SharedDtor() {
}

void DispatchWBListResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DispatchWBListResult::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispatchWBListResult& DispatchWBListResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DispatchWBListResult.base);
  return *internal_default_instance();
}


void DispatchWBListResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DispatchWBListResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recordid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&recordid_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

bool DispatchWBListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DispatchWBListResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 RecordId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DispatchWBListResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DispatchWBListResult)
  return false;
#undef DO_
}

void DispatchWBListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DispatchWBListResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RecordId = 1;
  if (this->recordid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recordid(), output);
  }

  // int32 Result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DispatchWBListResult)
}

::google::protobuf::uint8* DispatchWBListResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DispatchWBListResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RecordId = 1;
  if (this->recordid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recordid(), target);
  }

  // int32 Result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DispatchWBListResult)
  return target;
}

size_t DispatchWBListResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DispatchWBListResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 RecordId = 1;
  if (this->recordid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recordid());
  }

  // int32 Result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispatchWBListResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DispatchWBListResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DispatchWBListResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispatchWBListResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DispatchWBListResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DispatchWBListResult)
    MergeFrom(*source);
  }
}

void DispatchWBListResult::MergeFrom(const DispatchWBListResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DispatchWBListResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordid() != 0) {
    set_recordid(from.recordid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void DispatchWBListResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DispatchWBListResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispatchWBListResult::CopyFrom(const DispatchWBListResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DispatchWBListResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatchWBListResult::IsInitialized() const {
  return true;
}

void DispatchWBListResult::Swap(DispatchWBListResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispatchWBListResult::InternalSwap(DispatchWBListResult* other) {
  using std::swap;
  swap(recordid_, other->recordid_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DispatchWBListResult::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceTable::kGWMacFieldNumber;
const int DeviceTable::kDeviceInfoListFieldNumber;
const int DeviceTable::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceTable::DeviceTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_DeviceTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.DeviceTable)
}
DeviceTable::DeviceTable(const DeviceTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deviceinfolist_(from.deviceinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.DeviceTable)
}

void DeviceTable::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DeviceTable::~DeviceTable() {
  // @@protoc_insertion_point(destructor:ServerProtocol.DeviceTable)
  SharedDtor();
}

void DeviceTable::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceTable::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceTable& DeviceTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_DeviceTable.base);
  return *internal_default_instance();
}


void DeviceTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.DeviceTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceinfolist_.Clear();
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool DeviceTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.DeviceTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deviceinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.DeviceTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.DeviceTable)
  return false;
#undef DO_
}

void DeviceTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.DeviceTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deviceinfolist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->deviceinfolist(static_cast<int>(i)),
      output);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.DeviceTable)
}

::google::protobuf::uint8* DeviceTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.DeviceTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deviceinfolist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->deviceinfolist(static_cast<int>(i)), deterministic, target);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.DeviceTable)
  return target;
}

size_t DeviceTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.DeviceTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerProtocol.GWDeviceInfo DeviceInfoList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->deviceinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deviceinfolist(static_cast<int>(i)));
    }
  }

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.DeviceTable)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.DeviceTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.DeviceTable)
    MergeFrom(*source);
  }
}

void DeviceTable::MergeFrom(const DeviceTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.DeviceTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deviceinfolist_.MergeFrom(from.deviceinfolist_);
  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DeviceTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.DeviceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceTable::CopyFrom(const DeviceTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.DeviceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceTable::IsInitialized() const {
  return true;
}

void DeviceTable::Swap(DeviceTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceTable::InternalSwap(DeviceTable* other) {
  using std::swap;
  CastToBase(&deviceinfolist_)->InternalSwap(CastToBase(&other->deviceinfolist_));
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceTable::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FeatureTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureTable::kGWMacFieldNumber;
const int FeatureTable::kFeatureListFieldNumber;
const int FeatureTable::kTypeFieldNumber;
const int FeatureTable::kDeviceCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureTable::FeatureTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_FeatureTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.FeatureTable)
}
FeatureTable::FeatureTable(const FeatureTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      featurelist_(from.featurelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicecrc_) -
    reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.FeatureTable)
}

void FeatureTable::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
}

FeatureTable::~FeatureTable() {
  // @@protoc_insertion_point(destructor:ServerProtocol.FeatureTable)
  SharedDtor();
}

void FeatureTable::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeatureTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FeatureTable::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureTable& FeatureTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_FeatureTable.base);
  return *internal_default_instance();
}


void FeatureTable::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.FeatureTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  featurelist_.Clear();
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicecrc_) -
      reinterpret_cast<char*>(&type_)) + sizeof(devicecrc_));
  _internal_metadata_.Clear();
}

bool FeatureTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.FeatureTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ServerProtocol.GWFeature FeatureList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_featurelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DeviceCrc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.FeatureTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.FeatureTable)
  return false;
#undef DO_
}

void FeatureTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.FeatureTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // repeated .ServerProtocol.GWFeature FeatureList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->featurelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->featurelist(static_cast<int>(i)),
      output);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->devicecrc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.FeatureTable)
}

::google::protobuf::uint8* FeatureTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.FeatureTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // repeated .ServerProtocol.GWFeature FeatureList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->featurelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->featurelist(static_cast<int>(i)), deterministic, target);
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->devicecrc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.FeatureTable)
  return target;
}

size_t FeatureTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.FeatureTable)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ServerProtocol.GWFeature FeatureList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->featurelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->featurelist(static_cast<int>(i)));
    }
  }

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // int32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 DeviceCrc = 4;
  if (this->devicecrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicecrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.FeatureTable)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.FeatureTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.FeatureTable)
    MergeFrom(*source);
  }
}

void FeatureTable::MergeFrom(const FeatureTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.FeatureTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  featurelist_.MergeFrom(from.featurelist_);
  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.devicecrc() != 0) {
    set_devicecrc(from.devicecrc());
  }
}

void FeatureTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.FeatureTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureTable::CopyFrom(const FeatureTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.FeatureTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureTable::IsInitialized() const {
  return true;
}

void FeatureTable::Swap(FeatureTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureTable::InternalSwap(FeatureTable* other) {
  using std::swap;
  CastToBase(&featurelist_)->InternalSwap(CastToBase(&other->featurelist_));
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(devicecrc_, other->devicecrc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FeatureTable::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteOpen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteOpen::kDeviceMacFieldNumber;
const int RemoteOpen::kCardIdFieldNumber;
const int RemoteOpen::kCurTimeFieldNumber;
const int RemoteOpen::kActionFieldNumber;
const int RemoteOpen::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteOpen::RemoteOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_RemoteOpen.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.RemoteOpen)
}
RemoteOpen::RemoteOpen(const RemoteOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cardid().size() > 0) {
    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&curtime_, &from.curtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&curtime_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.RemoteOpen)
}

void RemoteOpen::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(action_));
}

RemoteOpen::~RemoteOpen() {
  // @@protoc_insertion_point(destructor:ServerProtocol.RemoteOpen)
  SharedDtor();
}

void RemoteOpen::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteOpen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteOpen::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteOpen& RemoteOpen::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_RemoteOpen.base);
  return *internal_default_instance();
}


void RemoteOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.RemoteOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&curtime_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

bool RemoteOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.RemoteOpen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes CardId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cardid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CurTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.RemoteOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.RemoteOpen)
  return false;
#undef DO_
}

void RemoteOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.RemoteOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // bytes CardId = 2;
  if (this->cardid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cardid(), output);
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtime(), output);
  }

  // int32 Action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.RemoteOpen)
}

::google::protobuf::uint8* RemoteOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.RemoteOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // bytes CardId = 2;
  if (this->cardid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cardid(), target);
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtime(), target);
  }

  // int32 Action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.RemoteOpen)
  return target;
}

size_t RemoteOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.RemoteOpen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes CardId = 2;
  if (this->cardid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cardid());
  }

  // bytes Data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 CurTime = 3;
  if (this->curtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtime());
  }

  // int32 Action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.RemoteOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.RemoteOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.RemoteOpen)
    MergeFrom(*source);
  }
}

void RemoteOpen::MergeFrom(const RemoteOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.RemoteOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.cardid().size() > 0) {

    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.curtime() != 0) {
    set_curtime(from.curtime());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void RemoteOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.RemoteOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteOpen::CopyFrom(const RemoteOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.RemoteOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteOpen::IsInitialized() const {
  return true;
}

void RemoteOpen::Swap(RemoteOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteOpen::InternalSwap(RemoteOpen* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cardid_.Swap(&other->cardid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(curtime_, other->curtime_);
  swap(action_, other->action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteOpen::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AIOT::InitAsDefaultInstance() {
  ::ServerProtocol::_AIOT_default_instance_._instance.get_mutable()->remoteaoit_ = const_cast< ::ServerProtocol::RemoteOpen*>(
      ::ServerProtocol::RemoteOpen::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIOT::kDeviceMacFieldNumber;
const int AIOT::kCommandFieldNumber;
const int AIOT::kFetIdxFieldNumber;
const int AIOT::kFeatureFieldNumber;
const int AIOT::kParaListFieldNumber;
const int AIOT::kDataFieldNumber;
const int AIOT::kGWMacFieldNumber;
const int AIOT::kUserIdFieldNumber;
const int AIOT::kRemoteAoitFieldNumber;
const int AIOT::kActionTypeFieldNumber;
const int AIOT::kBeginTimeFieldNumber;
const int AIOT::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIOT::AIOT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_AIOT.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.AIOT)
}
AIOT::AIOT(const AIOT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      paralist_(from.paralist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.has_remoteaoit()) {
    remoteaoit_ = new ::ServerProtocol::RemoteOpen(*from.remoteaoit_);
  } else {
    remoteaoit_ = NULL;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&actiontype_) -
    reinterpret_cast<char*>(&command_)) + sizeof(actiontype_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.AIOT)
}

void AIOT::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&remoteaoit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actiontype_) -
      reinterpret_cast<char*>(&remoteaoit_)) + sizeof(actiontype_));
}

AIOT::~AIOT() {
  // @@protoc_insertion_point(destructor:ServerProtocol.AIOT)
  SharedDtor();
}

void AIOT::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete remoteaoit_;
}

void AIOT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AIOT::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AIOT& AIOT::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_AIOT.base);
  return *internal_default_instance();
}


void AIOT::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.AIOT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paralist_.Clear();
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && remoteaoit_ != NULL) {
    delete remoteaoit_;
  }
  remoteaoit_ = NULL;
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actiontype_) -
      reinterpret_cast<char*>(&command_)) + sizeof(actiontype_));
  _internal_metadata_.Clear();
}

bool AIOT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.AIOT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeviceMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ServerProtocol.ControlCommand Command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command(static_cast< ::ServerProtocol::ControlCommand >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FetIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Feature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ParaList = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_paralist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_paralist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes GWMac = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 userId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ServerProtocol.RemoteOpen RemoteAoit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaoit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ActionType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 BeginTime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 EndTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.AIOT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.AIOT)
  return false;
#undef DO_
}

void AIOT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.AIOT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->devicemac(), output);
  }

  // .ServerProtocol.ControlCommand Command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command(), output);
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetidx(), output);
  }

  // int32 Feature = 4;
  if (this->feature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->feature(), output);
  }

  // repeated uint32 ParaList = 5;
  if (this->paralist_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _paralist_cached_byte_size_));
  }
  for (int i = 0, n = this->paralist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->paralist(i), output);
  }

  // bytes Data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // bytes GWMac = 7;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->gwmac(), output);
  }

  // int32 userId = 8;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->userid(), output);
  }

  // .ServerProtocol.RemoteOpen RemoteAoit = 9;
  if (this->has_remoteaoit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_remoteaoit(), output);
  }

  // int32 ActionType = 10;
  if (this->actiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->actiontype(), output);
  }

  // int64 BeginTime = 11;
  if (this->begintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->begintime(), output);
  }

  // int64 EndTime = 12;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->endtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.AIOT)
}

::google::protobuf::uint8* AIOT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.AIOT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->devicemac(), target);
  }

  // .ServerProtocol.ControlCommand Command = 2;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command(), target);
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetidx(), target);
  }

  // int32 Feature = 4;
  if (this->feature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->feature(), target);
  }

  // repeated uint32 ParaList = 5;
  if (this->paralist_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _paralist_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->paralist_, target);
  }

  // bytes Data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // bytes GWMac = 7;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->gwmac(), target);
  }

  // int32 userId = 8;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->userid(), target);
  }

  // .ServerProtocol.RemoteOpen RemoteAoit = 9;
  if (this->has_remoteaoit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_remoteaoit(), deterministic, target);
  }

  // int32 ActionType = 10;
  if (this->actiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->actiontype(), target);
  }

  // int64 BeginTime = 11;
  if (this->begintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->begintime(), target);
  }

  // int64 EndTime = 12;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->endtime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.AIOT)
  return target;
}

size_t AIOT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.AIOT)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 ParaList = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->paralist_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _paralist_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes DeviceMac = 1;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes GWMac = 7;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // .ServerProtocol.RemoteOpen RemoteAoit = 9;
  if (this->has_remoteaoit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *remoteaoit_);
  }

  // .ServerProtocol.ControlCommand Command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fetidx());
  }

  // int32 Feature = 4;
  if (this->feature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature());
  }

  // int32 userId = 8;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->userid());
  }

  // int64 BeginTime = 11;
  if (this->begintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begintime());
  }

  // int64 EndTime = 12;
  if (this->endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());
  }

  // int32 ActionType = 10;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actiontype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIOT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.AIOT)
  GOOGLE_DCHECK_NE(&from, this);
  const AIOT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AIOT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.AIOT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.AIOT)
    MergeFrom(*source);
  }
}

void AIOT::MergeFrom(const AIOT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.AIOT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paralist_.MergeFrom(from.paralist_);
  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.has_remoteaoit()) {
    mutable_remoteaoit()->::ServerProtocol::RemoteOpen::MergeFrom(from.remoteaoit());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.fetidx() != 0) {
    set_fetidx(from.fetidx());
  }
  if (from.feature() != 0) {
    set_feature(from.feature());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.begintime() != 0) {
    set_begintime(from.begintime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.actiontype() != 0) {
    set_actiontype(from.actiontype());
  }
}

void AIOT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.AIOT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIOT::CopyFrom(const AIOT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.AIOT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIOT::IsInitialized() const {
  return true;
}

void AIOT::Swap(AIOT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIOT::InternalSwap(AIOT* other) {
  using std::swap;
  paralist_.InternalSwap(&other->paralist_);
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remoteaoit_, other->remoteaoit_);
  swap(command_, other->command_);
  swap(fetidx_, other->fetidx_);
  swap(feature_, other->feature_);
  swap(userid_, other->userid_);
  swap(begintime_, other->begintime_);
  swap(endtime_, other->endtime_);
  swap(actiontype_, other->actiontype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AIOT::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NBAnswer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NBAnswer::kStateFieldNumber;
const int NBAnswer::kAIOTCommandFieldNumber;
const int NBAnswer::kWhiteBlackListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NBAnswer::NBAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_NBAnswer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.NBAnswer)
}
NBAnswer::NBAnswer(const NBAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aiotcommand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.aiotcommand().size() > 0) {
    aiotcommand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aiotcommand_);
  }
  whiteblacklist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.whiteblacklist().size() > 0) {
    whiteblacklist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.whiteblacklist_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.NBAnswer)
}

void NBAnswer::SharedCtor() {
  aiotcommand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  whiteblacklist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

NBAnswer::~NBAnswer() {
  // @@protoc_insertion_point(destructor:ServerProtocol.NBAnswer)
  SharedDtor();
}

void NBAnswer::SharedDtor() {
  aiotcommand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  whiteblacklist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NBAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NBAnswer::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NBAnswer& NBAnswer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_NBAnswer.base);
  return *internal_default_instance();
}


void NBAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.NBAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aiotcommand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  whiteblacklist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

bool NBAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.NBAnswer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 State = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes AIOTCommand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aiotcommand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes WhiteBlackList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_whiteblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.NBAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.NBAnswer)
  return false;
#undef DO_
}

void NBAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.NBAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // bytes AIOTCommand = 2;
  if (this->aiotcommand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->aiotcommand(), output);
  }

  // bytes WhiteBlackList = 3;
  if (this->whiteblacklist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->whiteblacklist(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.NBAnswer)
}

::google::protobuf::uint8* NBAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.NBAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 State = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // bytes AIOTCommand = 2;
  if (this->aiotcommand().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->aiotcommand(), target);
  }

  // bytes WhiteBlackList = 3;
  if (this->whiteblacklist().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->whiteblacklist(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.NBAnswer)
  return target;
}

size_t NBAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.NBAnswer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes AIOTCommand = 2;
  if (this->aiotcommand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->aiotcommand());
  }

  // bytes WhiteBlackList = 3;
  if (this->whiteblacklist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->whiteblacklist());
  }

  // int32 State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NBAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.NBAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const NBAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NBAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.NBAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.NBAnswer)
    MergeFrom(*source);
  }
}

void NBAnswer::MergeFrom(const NBAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.NBAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aiotcommand().size() > 0) {

    aiotcommand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aiotcommand_);
  }
  if (from.whiteblacklist().size() > 0) {

    whiteblacklist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.whiteblacklist_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void NBAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.NBAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NBAnswer::CopyFrom(const NBAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.NBAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NBAnswer::IsInitialized() const {
  return true;
}

void NBAnswer::Swap(NBAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NBAnswer::InternalSwap(NBAnswer* other) {
  using std::swap;
  aiotcommand_.Swap(&other->aiotcommand_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  whiteblacklist_.Swap(&other->whiteblacklist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NBAnswer::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MqttSubscribeInit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MqttSubscribeInit::kGWMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MqttSubscribeInit::MqttSubscribeInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_MqttSubscribeInit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.MqttSubscribeInit)
}
MqttSubscribeInit::MqttSubscribeInit(const MqttSubscribeInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.MqttSubscribeInit)
}

void MqttSubscribeInit::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MqttSubscribeInit::~MqttSubscribeInit() {
  // @@protoc_insertion_point(destructor:ServerProtocol.MqttSubscribeInit)
  SharedDtor();
}

void MqttSubscribeInit::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MqttSubscribeInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MqttSubscribeInit::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MqttSubscribeInit& MqttSubscribeInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_MqttSubscribeInit.base);
  return *internal_default_instance();
}


void MqttSubscribeInit::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.MqttSubscribeInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MqttSubscribeInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.MqttSubscribeInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.MqttSubscribeInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.MqttSubscribeInit)
  return false;
#undef DO_
}

void MqttSubscribeInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.MqttSubscribeInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.MqttSubscribeInit)
}

::google::protobuf::uint8* MqttSubscribeInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.MqttSubscribeInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.MqttSubscribeInit)
  return target;
}

size_t MqttSubscribeInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.MqttSubscribeInit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MqttSubscribeInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.MqttSubscribeInit)
  GOOGLE_DCHECK_NE(&from, this);
  const MqttSubscribeInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MqttSubscribeInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.MqttSubscribeInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.MqttSubscribeInit)
    MergeFrom(*source);
  }
}

void MqttSubscribeInit::MergeFrom(const MqttSubscribeInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.MqttSubscribeInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
}

void MqttSubscribeInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.MqttSubscribeInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MqttSubscribeInit::CopyFrom(const MqttSubscribeInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.MqttSubscribeInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqttSubscribeInit::IsInitialized() const {
  return true;
}

void MqttSubscribeInit::Swap(MqttSubscribeInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MqttSubscribeInit::InternalSwap(MqttSubscribeInit* other) {
  using std::swap;
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MqttSubscribeInit::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SubscribeInitData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeInitData::kGWMacFieldNumber;
const int SubscribeInitData::kDeviceListFieldNumber;
const int SubscribeInitData::kSTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeInitData::SubscribeInitData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_SubscribeInitData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.SubscribeInitData)
}
SubscribeInitData::SubscribeInitData(const SubscribeInitData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devicelist_(from.devicelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gwmac().size() > 0) {
    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  stime_ = from.stime_;
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.SubscribeInitData)
}

void SubscribeInitData::SharedCtor() {
  gwmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stime_ = 0;
}

SubscribeInitData::~SubscribeInitData() {
  // @@protoc_insertion_point(destructor:ServerProtocol.SubscribeInitData)
  SharedDtor();
}

void SubscribeInitData::SharedDtor() {
  gwmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubscribeInitData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SubscribeInitData::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubscribeInitData& SubscribeInitData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_SubscribeInitData.base);
  return *internal_default_instance();
}


void SubscribeInitData::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.SubscribeInitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicelist_.Clear();
  gwmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stime_ = 0;
  _internal_metadata_.Clear();
}

bool SubscribeInitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.SubscribeInitData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes GWMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gwmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes DeviceList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_devicelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 STime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.SubscribeInitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.SubscribeInitData)
  return false;
#undef DO_
}

void SubscribeInitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.SubscribeInitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gwmac(), output);
  }

  // repeated bytes DeviceList = 2;
  for (int i = 0, n = this->devicelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->devicelist(i), output);
  }

  // int32 STime = 3;
  if (this->stime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.SubscribeInitData)
}

::google::protobuf::uint8* SubscribeInitData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.SubscribeInitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gwmac(), target);
  }

  // repeated bytes DeviceList = 2;
  for (int i = 0, n = this->devicelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->devicelist(i), target);
  }

  // int32 STime = 3;
  if (this->stime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.SubscribeInitData)
  return target;
}

size_t SubscribeInitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.SubscribeInitData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes DeviceList = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->devicelist_size());
  for (int i = 0, n = this->devicelist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->devicelist(i));
  }

  // bytes GWMac = 1;
  if (this->gwmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gwmac());
  }

  // int32 STime = 3;
  if (this->stime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeInitData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.SubscribeInitData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeInitData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscribeInitData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.SubscribeInitData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.SubscribeInitData)
    MergeFrom(*source);
  }
}

void SubscribeInitData::MergeFrom(const SubscribeInitData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.SubscribeInitData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devicelist_.MergeFrom(from.devicelist_);
  if (from.gwmac().size() > 0) {

    gwmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gwmac_);
  }
  if (from.stime() != 0) {
    set_stime(from.stime());
  }
}

void SubscribeInitData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.SubscribeInitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeInitData::CopyFrom(const SubscribeInitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.SubscribeInitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeInitData::IsInitialized() const {
  return true;
}

void SubscribeInitData::Swap(SubscribeInitData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeInitData::InternalSwap(SubscribeInitData* other) {
  using std::swap;
  devicelist_.InternalSwap(CastToBase(&other->devicelist_));
  gwmac_.Swap(&other->gwmac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stime_, other->stime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeInitData::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlResponse::kResultFieldNumber;
const int ControlResponse::kDeviceMacFieldNumber;
const int ControlResponse::kFetIdxFieldNumber;
const int ControlResponse::kDataFieldNumber;
const int ControlResponse::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlResponse::ControlResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DeviceProtocol_2eproto::scc_info_ControlResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerProtocol.ControlResponse)
}
ControlResponse::ControlResponse(const ControlResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.devicemac().size() > 0) {
    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:ServerProtocol.ControlResponse)
}

void ControlResponse::SharedCtor() {
  devicemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(time_));
}

ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:ServerProtocol.ControlResponse)
  SharedDtor();
}

void ControlResponse::SharedDtor() {
  devicemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlResponse::descriptor() {
  ::protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlResponse& ControlResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DeviceProtocol_2eproto::scc_info_ControlResponse.base);
  return *internal_default_instance();
}


void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerProtocol.ControlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

bool ControlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerProtocol.ControlResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DeviceMac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicemac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FetIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerProtocol.ControlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerProtocol.ControlResponse)
  return false;
#undef DO_
}

void ControlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerProtocol.ControlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devicemac(), output);
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetidx(), output);
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // int32 Time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerProtocol.ControlResponse)
}

::google::protobuf::uint8* ControlResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerProtocol.ControlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devicemac(), target);
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetidx(), target);
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // int32 Time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerProtocol.ControlResponse)
  return target;
}

size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerProtocol.ControlResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeviceMac = 2;
  if (this->devicemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicemac());
  }

  // bytes Data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 Result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 FetIdx = 3;
  if (this->fetidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fetidx());
  }

  // int32 Time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerProtocol.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerProtocol.ControlResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerProtocol.ControlResponse)
    MergeFrom(*source);
  }
}

void ControlResponse::MergeFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerProtocol.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.devicemac().size() > 0) {

    devicemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemac_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.fetidx() != 0) {
    set_fetidx(from.fetidx());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void ControlResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerProtocol.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerProtocol.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlResponse::IsInitialized() const {
  return true;
}

void ControlResponse::Swap(ControlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlResponse::InternalSwap(ControlResponse* other) {
  using std::swap;
  devicemac_.Swap(&other->devicemac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(fetidx_, other->fetidx_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlResponse::GetMetadata() const {
  protobuf_DeviceProtocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DeviceProtocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServerProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::VersionManager* Arena::CreateMaybeMessage< ::ServerProtocol::VersionManager >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::VersionManager >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeleteGwDevice* Arena::CreateMaybeMessage< ::ServerProtocol::DeleteGwDevice >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeleteGwDevice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceCrcVerification* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceCrcVerification >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceCrcVerification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::UpDeviceHeartReponse* Arena::CreateMaybeMessage< ::ServerProtocol::UpDeviceHeartReponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::UpDeviceHeartReponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::HmDataRequest* Arena::CreateMaybeMessage< ::ServerProtocol::HmDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::HmDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::HmDataReponse* Arena::CreateMaybeMessage< ::ServerProtocol::HmDataReponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::HmDataReponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::NBDeviceDataRequest* Arena::CreateMaybeMessage< ::ServerProtocol::NBDeviceDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::NBDeviceDataRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceOffline* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceOffline >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceOffline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::SystemCommonResponse* Arena::CreateMaybeMessage< ::ServerProtocol::SystemCommonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::SystemCommonResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::D2SCalibrationTime* Arena::CreateMaybeMessage< ::ServerProtocol::D2SCalibrationTime >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::D2SCalibrationTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::ModifyDeviceState* Arena::CreateMaybeMessage< ::ServerProtocol::ModifyDeviceState >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::ModifyDeviceState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceLog* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceLog >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceLog >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::UpLogTable* Arena::CreateMaybeMessage< ::ServerProtocol::UpLogTable >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::UpLogTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::UpLogResponse* Arena::CreateMaybeMessage< ::ServerProtocol::UpLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::UpLogResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::GWUPDeviceData* Arena::CreateMaybeMessage< ::ServerProtocol::GWUPDeviceData >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::GWUPDeviceData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::GWDeviceInfo* Arena::CreateMaybeMessage< ::ServerProtocol::GWDeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::GWDeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::GWDeviceProperty* Arena::CreateMaybeMessage< ::ServerProtocol::GWDeviceProperty >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::GWDeviceProperty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::SensorState* Arena::CreateMaybeMessage< ::ServerProtocol::SensorState >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::SensorState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::StateTable* Arena::CreateMaybeMessage< ::ServerProtocol::StateTable >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::StateTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceDelete* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceDelete >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceDelete >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::GWFeature* Arena::CreateMaybeMessage< ::ServerProtocol::GWFeature >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::GWFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceConfig* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::Transmission* Arena::CreateMaybeMessage< ::ServerProtocol::Transmission >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::Transmission >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::TransmissionResponse* Arena::CreateMaybeMessage< ::ServerProtocol::TransmissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::TransmissionResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::WhiteBlackList* Arena::CreateMaybeMessage< ::ServerProtocol::WhiteBlackList >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::WhiteBlackList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DispatchWBListResult* Arena::CreateMaybeMessage< ::ServerProtocol::DispatchWBListResult >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DispatchWBListResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::DeviceTable* Arena::CreateMaybeMessage< ::ServerProtocol::DeviceTable >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::DeviceTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::FeatureTable* Arena::CreateMaybeMessage< ::ServerProtocol::FeatureTable >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::FeatureTable >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::RemoteOpen* Arena::CreateMaybeMessage< ::ServerProtocol::RemoteOpen >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::RemoteOpen >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::AIOT* Arena::CreateMaybeMessage< ::ServerProtocol::AIOT >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::AIOT >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::NBAnswer* Arena::CreateMaybeMessage< ::ServerProtocol::NBAnswer >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::NBAnswer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::MqttSubscribeInit* Arena::CreateMaybeMessage< ::ServerProtocol::MqttSubscribeInit >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::MqttSubscribeInit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::SubscribeInitData* Arena::CreateMaybeMessage< ::ServerProtocol::SubscribeInitData >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::SubscribeInitData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerProtocol::ControlResponse* Arena::CreateMaybeMessage< ::ServerProtocol::ControlResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ServerProtocol::ControlResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
