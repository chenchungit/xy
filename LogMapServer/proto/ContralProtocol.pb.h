// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContralProtocol.proto

#ifndef PROTOBUF_INCLUDED_ContralProtocol_2eproto
#define PROTOBUF_INCLUDED_ContralProtocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ContralProtocol_2eproto 

namespace protobuf_ContralProtocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ContralProtocol_2eproto
namespace ContralProtocol {
class ContralRegisterService;
class ContralRegisterServiceDefaultTypeInternal;
extern ContralRegisterServiceDefaultTypeInternal _ContralRegisterService_default_instance_;
class ContralServerInfo;
class ContralServerInfoDefaultTypeInternal;
extern ContralServerInfoDefaultTypeInternal _ContralServerInfo_default_instance_;
class ContralService;
class ContralServiceDefaultTypeInternal;
extern ContralServiceDefaultTypeInternal _ContralService_default_instance_;
class ContralServiceAnswer;
class ContralServiceAnswerDefaultTypeInternal;
extern ContralServiceAnswerDefaultTypeInternal _ContralServiceAnswer_default_instance_;
}  // namespace ContralProtocol
namespace google {
namespace protobuf {
template<> ::ContralProtocol::ContralRegisterService* Arena::CreateMaybeMessage<::ContralProtocol::ContralRegisterService>(Arena*);
template<> ::ContralProtocol::ContralServerInfo* Arena::CreateMaybeMessage<::ContralProtocol::ContralServerInfo>(Arena*);
template<> ::ContralProtocol::ContralService* Arena::CreateMaybeMessage<::ContralProtocol::ContralService>(Arena*);
template<> ::ContralProtocol::ContralServiceAnswer* Arena::CreateMaybeMessage<::ContralProtocol::ContralServiceAnswer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ContralProtocol {

enum CenterCMD {
  CMD_UNKNOWN = 0,
  CMD_REGISTER_SERVICE = 2,
  CMD_REGISTER_SERVICE_ANSWER = 3,
  CMD_SERVICE_STATISTICS = 4,
  CMD_SERVICE_SERVICE = 5,
  CMD_SERVICE_SERVICE_ANSWER = 6,
  CenterCMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CenterCMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CenterCMD_IsValid(int value);
const CenterCMD CenterCMD_MIN = CMD_UNKNOWN;
const CenterCMD CenterCMD_MAX = CMD_SERVICE_SERVICE_ANSWER;
const int CenterCMD_ARRAYSIZE = CenterCMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CenterCMD_descriptor();
inline const ::std::string& CenterCMD_Name(CenterCMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CenterCMD_descriptor(), value);
}
inline bool CenterCMD_Parse(
    const ::std::string& name, CenterCMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CenterCMD>(
    CenterCMD_descriptor(), name, value);
}
// ===================================================================

class ContralServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContralProtocol.ContralServerInfo) */ {
 public:
  ContralServerInfo();
  virtual ~ContralServerInfo();

  ContralServerInfo(const ContralServerInfo& from);

  inline ContralServerInfo& operator=(const ContralServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContralServerInfo(ContralServerInfo&& from) noexcept
    : ContralServerInfo() {
    *this = ::std::move(from);
  }

  inline ContralServerInfo& operator=(ContralServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContralServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContralServerInfo* internal_default_instance() {
    return reinterpret_cast<const ContralServerInfo*>(
               &_ContralServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContralServerInfo* other);
  friend void swap(ContralServerInfo& a, ContralServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContralServerInfo* New() const final {
    return CreateMaybeMessage<ContralServerInfo>(NULL);
  }

  ContralServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContralServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContralServerInfo& from);
  void MergeFrom(const ContralServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContralServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ClientID = 3;
  void clear_clientid();
  static const int kClientIDFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // int32 ClientTotal = 1;
  void clear_clienttotal();
  static const int kClientTotalFieldNumber = 1;
  ::google::protobuf::int32 clienttotal() const;
  void set_clienttotal(::google::protobuf::int32 value);

  // int32 ServerID = 2;
  void clear_serverid();
  static const int kServerIDFieldNumber = 2;
  ::google::protobuf::int32 serverid() const;
  void set_serverid(::google::protobuf::int32 value);

  // int32 ClientStart = 4;
  void clear_clientstart();
  static const int kClientStartFieldNumber = 4;
  ::google::protobuf::int32 clientstart() const;
  void set_clientstart(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContralProtocol.ContralServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::int32 clienttotal_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 clientstart_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ContralProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContralRegisterService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContralProtocol.ContralRegisterService) */ {
 public:
  ContralRegisterService();
  virtual ~ContralRegisterService();

  ContralRegisterService(const ContralRegisterService& from);

  inline ContralRegisterService& operator=(const ContralRegisterService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContralRegisterService(ContralRegisterService&& from) noexcept
    : ContralRegisterService() {
    *this = ::std::move(from);
  }

  inline ContralRegisterService& operator=(ContralRegisterService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContralRegisterService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContralRegisterService* internal_default_instance() {
    return reinterpret_cast<const ContralRegisterService*>(
               &_ContralRegisterService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContralRegisterService* other);
  friend void swap(ContralRegisterService& a, ContralRegisterService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContralRegisterService* New() const final {
    return CreateMaybeMessage<ContralRegisterService>(NULL);
  }

  ContralRegisterService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContralRegisterService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContralRegisterService& from);
  void MergeFrom(const ContralRegisterService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContralRegisterService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UserName = 4;
  void clear_username();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string PassWord = 5;
  void clear_password();
  static const int kPassWordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // int32 ServiceID = 1;
  void clear_serviceid();
  static const int kServiceIDFieldNumber = 1;
  ::google::protobuf::int32 serviceid() const;
  void set_serviceid(::google::protobuf::int32 value);

  // int32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 MaxLink = 3;
  void clear_maxlink();
  static const int kMaxLinkFieldNumber = 3;
  ::google::protobuf::int32 maxlink() const;
  void set_maxlink(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContralProtocol.ContralRegisterService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 serviceid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 maxlink_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ContralProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContralService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContralProtocol.ContralService) */ {
 public:
  ContralService();
  virtual ~ContralService();

  ContralService(const ContralService& from);

  inline ContralService& operator=(const ContralService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContralService(ContralService&& from) noexcept
    : ContralService() {
    *this = ::std::move(from);
  }

  inline ContralService& operator=(ContralService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContralService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContralService* internal_default_instance() {
    return reinterpret_cast<const ContralService*>(
               &_ContralService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ContralService* other);
  friend void swap(ContralService& a, ContralService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContralService* New() const final {
    return CreateMaybeMessage<ContralService>(NULL);
  }

  ContralService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContralService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContralService& from);
  void MergeFrom(const ContralService& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContralService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ServiceCRC = 1;
  void clear_servicecrc();
  static const int kServiceCRCFieldNumber = 1;
  const ::std::string& servicecrc() const;
  void set_servicecrc(const ::std::string& value);
  #if LANG_CXX11
  void set_servicecrc(::std::string&& value);
  #endif
  void set_servicecrc(const char* value);
  void set_servicecrc(const char* value, size_t size);
  ::std::string* mutable_servicecrc();
  ::std::string* release_servicecrc();
  void set_allocated_servicecrc(::std::string* servicecrc);

  // @@protoc_insertion_point(class_scope:ContralProtocol.ContralService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicecrc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ContralProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContralServiceAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContralProtocol.ContralServiceAnswer) */ {
 public:
  ContralServiceAnswer();
  virtual ~ContralServiceAnswer();

  ContralServiceAnswer(const ContralServiceAnswer& from);

  inline ContralServiceAnswer& operator=(const ContralServiceAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContralServiceAnswer(ContralServiceAnswer&& from) noexcept
    : ContralServiceAnswer() {
    *this = ::std::move(from);
  }

  inline ContralServiceAnswer& operator=(ContralServiceAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContralServiceAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContralServiceAnswer* internal_default_instance() {
    return reinterpret_cast<const ContralServiceAnswer*>(
               &_ContralServiceAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ContralServiceAnswer* other);
  friend void swap(ContralServiceAnswer& a, ContralServiceAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContralServiceAnswer* New() const final {
    return CreateMaybeMessage<ContralServiceAnswer>(NULL);
  }

  ContralServiceAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContralServiceAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContralServiceAnswer& from);
  void MergeFrom(const ContralServiceAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContralServiceAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ServiceIP = 2;
  void clear_serviceip();
  static const int kServiceIPFieldNumber = 2;
  const ::std::string& serviceip() const;
  void set_serviceip(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceip(::std::string&& value);
  #endif
  void set_serviceip(const char* value);
  void set_serviceip(const char* value, size_t size);
  ::std::string* mutable_serviceip();
  ::std::string* release_serviceip();
  void set_allocated_serviceip(::std::string* serviceip);

  // string UserName = 4;
  void clear_username();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string PassWord = 5;
  void clear_password();
  static const int kPassWordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // int32 ServiceState = 1;
  void clear_servicestate();
  static const int kServiceStateFieldNumber = 1;
  ::google::protobuf::int32 servicestate() const;
  void set_servicestate(::google::protobuf::int32 value);

  // int32 ServicePort = 3;
  void clear_serviceport();
  static const int kServicePortFieldNumber = 3;
  ::google::protobuf::int32 serviceport() const;
  void set_serviceport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ContralProtocol.ContralServiceAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serviceip_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 servicestate_;
  ::google::protobuf::int32 serviceport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ContralProtocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContralServerInfo

// int32 ClientTotal = 1;
inline void ContralServerInfo::clear_clienttotal() {
  clienttotal_ = 0;
}
inline ::google::protobuf::int32 ContralServerInfo::clienttotal() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServerInfo.ClientTotal)
  return clienttotal_;
}
inline void ContralServerInfo::set_clienttotal(::google::protobuf::int32 value) {
  
  clienttotal_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServerInfo.ClientTotal)
}

// int32 ServerID = 2;
inline void ContralServerInfo::clear_serverid() {
  serverid_ = 0;
}
inline ::google::protobuf::int32 ContralServerInfo::serverid() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServerInfo.ServerID)
  return serverid_;
}
inline void ContralServerInfo::set_serverid(::google::protobuf::int32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServerInfo.ServerID)
}

// string ClientID = 3;
inline void ContralServerInfo::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralServerInfo::clientid() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServerInfo.ClientID)
  return clientid_.GetNoArena();
}
inline void ContralServerInfo::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServerInfo.ClientID)
}
#if LANG_CXX11
inline void ContralServerInfo::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralServerInfo.ClientID)
}
#endif
inline void ContralServerInfo::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralServerInfo.ClientID)
}
inline void ContralServerInfo::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralServerInfo.ClientID)
}
inline ::std::string* ContralServerInfo::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralServerInfo.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralServerInfo::release_clientid() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralServerInfo.ClientID)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralServerInfo::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralServerInfo.ClientID)
}

// int32 ClientStart = 4;
inline void ContralServerInfo::clear_clientstart() {
  clientstart_ = 0;
}
inline ::google::protobuf::int32 ContralServerInfo::clientstart() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServerInfo.ClientStart)
  return clientstart_;
}
inline void ContralServerInfo::set_clientstart(::google::protobuf::int32 value) {
  
  clientstart_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServerInfo.ClientStart)
}

// -------------------------------------------------------------------

// ContralRegisterService

// int32 ServiceID = 1;
inline void ContralRegisterService::clear_serviceid() {
  serviceid_ = 0;
}
inline ::google::protobuf::int32 ContralRegisterService::serviceid() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralRegisterService.ServiceID)
  return serviceid_;
}
inline void ContralRegisterService::set_serviceid(::google::protobuf::int32 value) {
  
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralRegisterService.ServiceID)
}

// int32 Type = 2;
inline void ContralRegisterService::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ContralRegisterService::type() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralRegisterService.Type)
  return type_;
}
inline void ContralRegisterService::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralRegisterService.Type)
}

// int32 MaxLink = 3;
inline void ContralRegisterService::clear_maxlink() {
  maxlink_ = 0;
}
inline ::google::protobuf::int32 ContralRegisterService::maxlink() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralRegisterService.MaxLink)
  return maxlink_;
}
inline void ContralRegisterService::set_maxlink(::google::protobuf::int32 value) {
  
  maxlink_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralRegisterService.MaxLink)
}

// string UserName = 4;
inline void ContralRegisterService::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralRegisterService::username() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralRegisterService.UserName)
  return username_.GetNoArena();
}
inline void ContralRegisterService::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralRegisterService.UserName)
}
#if LANG_CXX11
inline void ContralRegisterService::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralRegisterService.UserName)
}
#endif
inline void ContralRegisterService::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralRegisterService.UserName)
}
inline void ContralRegisterService::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralRegisterService.UserName)
}
inline ::std::string* ContralRegisterService::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralRegisterService.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralRegisterService::release_username() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralRegisterService.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralRegisterService::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralRegisterService.UserName)
}

// string PassWord = 5;
inline void ContralRegisterService::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralRegisterService::password() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralRegisterService.PassWord)
  return password_.GetNoArena();
}
inline void ContralRegisterService::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralRegisterService.PassWord)
}
#if LANG_CXX11
inline void ContralRegisterService::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralRegisterService.PassWord)
}
#endif
inline void ContralRegisterService::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralRegisterService.PassWord)
}
inline void ContralRegisterService::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralRegisterService.PassWord)
}
inline ::std::string* ContralRegisterService::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralRegisterService.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralRegisterService::release_password() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralRegisterService.PassWord)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralRegisterService::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralRegisterService.PassWord)
}

// -------------------------------------------------------------------

// ContralService

// string ServiceCRC = 1;
inline void ContralService::clear_servicecrc() {
  servicecrc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralService::servicecrc() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralService.ServiceCRC)
  return servicecrc_.GetNoArena();
}
inline void ContralService::set_servicecrc(const ::std::string& value) {
  
  servicecrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralService.ServiceCRC)
}
#if LANG_CXX11
inline void ContralService::set_servicecrc(::std::string&& value) {
  
  servicecrc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralService.ServiceCRC)
}
#endif
inline void ContralService::set_servicecrc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicecrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralService.ServiceCRC)
}
inline void ContralService::set_servicecrc(const char* value, size_t size) {
  
  servicecrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralService.ServiceCRC)
}
inline ::std::string* ContralService::mutable_servicecrc() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralService.ServiceCRC)
  return servicecrc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralService::release_servicecrc() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralService.ServiceCRC)
  
  return servicecrc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralService::set_allocated_servicecrc(::std::string* servicecrc) {
  if (servicecrc != NULL) {
    
  } else {
    
  }
  servicecrc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicecrc);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralService.ServiceCRC)
}

// -------------------------------------------------------------------

// ContralServiceAnswer

// int32 ServiceState = 1;
inline void ContralServiceAnswer::clear_servicestate() {
  servicestate_ = 0;
}
inline ::google::protobuf::int32 ContralServiceAnswer::servicestate() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServiceAnswer.ServiceState)
  return servicestate_;
}
inline void ContralServiceAnswer::set_servicestate(::google::protobuf::int32 value) {
  
  servicestate_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServiceAnswer.ServiceState)
}

// string ServiceIP = 2;
inline void ContralServiceAnswer::clear_serviceip() {
  serviceip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralServiceAnswer::serviceip() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServiceAnswer.ServiceIP)
  return serviceip_.GetNoArena();
}
inline void ContralServiceAnswer::set_serviceip(const ::std::string& value) {
  
  serviceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServiceAnswer.ServiceIP)
}
#if LANG_CXX11
inline void ContralServiceAnswer::set_serviceip(::std::string&& value) {
  
  serviceip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralServiceAnswer.ServiceIP)
}
#endif
inline void ContralServiceAnswer::set_serviceip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serviceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralServiceAnswer.ServiceIP)
}
inline void ContralServiceAnswer::set_serviceip(const char* value, size_t size) {
  
  serviceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralServiceAnswer.ServiceIP)
}
inline ::std::string* ContralServiceAnswer::mutable_serviceip() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralServiceAnswer.ServiceIP)
  return serviceip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralServiceAnswer::release_serviceip() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralServiceAnswer.ServiceIP)
  
  return serviceip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralServiceAnswer::set_allocated_serviceip(::std::string* serviceip) {
  if (serviceip != NULL) {
    
  } else {
    
  }
  serviceip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceip);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralServiceAnswer.ServiceIP)
}

// int32 ServicePort = 3;
inline void ContralServiceAnswer::clear_serviceport() {
  serviceport_ = 0;
}
inline ::google::protobuf::int32 ContralServiceAnswer::serviceport() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServiceAnswer.ServicePort)
  return serviceport_;
}
inline void ContralServiceAnswer::set_serviceport(::google::protobuf::int32 value) {
  
  serviceport_ = value;
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServiceAnswer.ServicePort)
}

// string UserName = 4;
inline void ContralServiceAnswer::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralServiceAnswer::username() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServiceAnswer.UserName)
  return username_.GetNoArena();
}
inline void ContralServiceAnswer::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServiceAnswer.UserName)
}
#if LANG_CXX11
inline void ContralServiceAnswer::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralServiceAnswer.UserName)
}
#endif
inline void ContralServiceAnswer::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralServiceAnswer.UserName)
}
inline void ContralServiceAnswer::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralServiceAnswer.UserName)
}
inline ::std::string* ContralServiceAnswer::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralServiceAnswer.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralServiceAnswer::release_username() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralServiceAnswer.UserName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralServiceAnswer::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralServiceAnswer.UserName)
}

// string PassWord = 5;
inline void ContralServiceAnswer::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContralServiceAnswer::password() const {
  // @@protoc_insertion_point(field_get:ContralProtocol.ContralServiceAnswer.PassWord)
  return password_.GetNoArena();
}
inline void ContralServiceAnswer::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContralProtocol.ContralServiceAnswer.PassWord)
}
#if LANG_CXX11
inline void ContralServiceAnswer::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContralProtocol.ContralServiceAnswer.PassWord)
}
#endif
inline void ContralServiceAnswer::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContralProtocol.ContralServiceAnswer.PassWord)
}
inline void ContralServiceAnswer::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContralProtocol.ContralServiceAnswer.PassWord)
}
inline ::std::string* ContralServiceAnswer::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ContralProtocol.ContralServiceAnswer.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContralServiceAnswer::release_password() {
  // @@protoc_insertion_point(field_release:ContralProtocol.ContralServiceAnswer.PassWord)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContralServiceAnswer::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ContralProtocol.ContralServiceAnswer.PassWord)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ContralProtocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ContralProtocol::CenterCMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContralProtocol::CenterCMD>() {
  return ::ContralProtocol::CenterCMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ContralProtocol_2eproto
